{
  "contact": "Contact",
  "rules": "Rules",
  "back": "back",
  "level": "Level:",
  "score": "Score:",
  "difficultyGuide": "Difficulty Guide",
  "quizLevels": {
    "level1": "Novice",
    "level2": "Rookie",
    "level3": "Adept",
    "level4": "Expert",
    "level5": "Elite",
    "level6": "Master",
    "leaf": "Easy",
    "easyDesc": "Beginner-friendly questions to warm you up.",
    "Cog": "Medium",
    "mediumDesc": "Requires some knowledge & reasoning skills.",
    "Fire": "Hard",
    "hardDesc": "Expert-level challenges, even pros may struggle!"
  },
  "Guide": {
    "htmlHeading": "Html/Css Quiz Guide",
    "jsHeading": "Javascript Quiz Guide",
    "reactHeading": "React Quiz Guide",
    "randomHeading": "Random Quiz Guide",
    "leveling": {
      "levelingSystem": "Leveling SyStem",
      "p": "Leveling System works with this 3 icon:",
      "easy": "Easy", "easyP": "(Begginer Level)",
      "medium": "Medium", "mediumP": "(Some experience required)",
      "hard": "Hard", "hardP": "(Advanced devs level)"
    },
    "questions": {
      "logic": "Question Logic",
      "p": "After you Submit a question, the logic kicks in:",
      "explanation": "If you get a <highLight>wrong answer</highLight>, you always can see the explanation, just by click <highLight>explanations button</highLight>"
    },
    "mastery": {
      "masteryLevel": "Mastery Level",
      "p": "Here everything depends to score points",
      "explanation": "Your <highLight>mastery level</highLight> depends on your <highLight>final score</highLight>, <radial>Higher scores</radial> unlock prestigious mastery titles."
    },
    "stats": {
      "aboutStats": "About Stats",
      "p": "Stats will be revealed after Quiz gets finished:",
      "explanation": "you can view stats: your <radial>accuracy %</radial>, <radial>correct/incorrect</radial> answers, <radial>skipped</radial> questions, and your rank: (6 total ranks: <rank1>Bronze</rank1> → <rank2>Gold</rank2>)."
    },
    "Rules": {
      "rules": "About quiz rules",
      "p": "how we gona play this quiz game:",
      "explanation1": "<highLight>left/right</highLight> arrow will help to move to <highLight>next/prev</highLight> question after we submit the question.",
      "explanation2": " <highLight>No time outs</highLight>, meaning we can stay and think about the question as long as you we want to.",
      "explanation3": "It's allowed to skip maxium <highLight>29 question</highLight> box, and pass the test with only <highLight>1 correct/incorrect</highLight> answer",
      "explanation4": "This quiz game is awesome!"
    }
  },
  "training":{
    "heroSection": {
      "heading": "Test Your Coding Knowledge",
      "paragraf1": "Sharpen your skills with interactive quizzes in ",
      "paragraf2": "Challenge yourself, track progress, and master web development step by step.",
      "button1": "Start Quiz",
      "button2": "About CodeMeter",
      "Questions": "Questions",
      "Categories": "Categories",
      "Updates":{
        "Update": "Updates",
        "week": "Weekly"
      },
      "quotes":{
        "quote1": "Knowledge is not gained in leaps, but in steady footsteps each day.",
        "quote2": "The root of learning is bitter, but gets sweetened by the end. ",
        "quote3": "Learning each day is not a duty, but the art of becoming."
      },
      "stats":{
        "question": "questions"
      },
      "categories": {
        "htmlCss": "Html/Css",
        "javascript": "Javascript",
        "react": "React",
        "custom": "Custom"
      }
    },

    "htmlCss": {
      "core": "Core",
      "p1": "Sharpen your skills with <highlight>fundamental HTML & CSS challenges</highlight>. From mastering <em>semantic tags</em> to <em>responsive layouts</em>, this quiz helps you understand the building blocks of front-end development on a deeper level.",
      "p2": "Ideal for <highlight>junior and mid-level developers</highlight>. Tackle <strong>30 carefully designed questions</strong> that test practical knowledge and common pitfalls, and strengthen your foundation for real-world projects.",
      "buttons": {
        "start": "Start Now",
        "info": "Rules"
      },
      "Info": {
        "rules": "Html/Css quiz rules",
        "rule1": "You'll receive 30 Html/Css concentrated questions.",
        "rule2": "Each question allows choosing only one option.",
        "rule3": "Correct answer will become <green>green</green>, incorrect - gets <red>red</red>.",
        "rule4": "You can use Previous, Next, Skip and Explanation buttons.",
        "rule5": "After submitting, the correct answer will be revealed.",
        "rule6": "No time out, meaning you can think and learn calmly.",
        "rule7": "At the end, you'll receive score and Mastery level."
      }
    },

    "javascript": {
      "heading": "Javascript",
      "intermediate": "Intermediate",
      "p1": "Unlock the power of <highlight>JavaScript logic and problem-solving</highlight>. This section challenges you with scenarios that improve the way you think as a developer, from handling tricky conditions to mastering everyday coding patterns.",
      "p2": "Whether you're building a foundation or sharpening existing skills, you'll face <strong>30 interactive questions</strong> designed to push your reasoning, reveal common mistakes, and teach you new techniques that elevate your JavaScript knowledge.",
      "buttons": {
        "start":  "Start Now",
        "info": "Rules"
      },
      "Info": {
        "rules": "Javascript quiz rules",
        "rule1": "You'll receive 30 Javascript logic question.",
        "rule2": "You can Choose only one option from the list.",
        "rule3": "Correct answer turns <green>green</green>, incorrect one becomes-<red>red</red>.",
        "rule4": "You can use Previous, Next, Skip and Explanation buttons.",
        "rule5": "After submitting, the correct answer will be revealed.",
        "rule6": "No timer, meaning you can think and learn calmly.",
        "rule7": "At the end, you'll receive score and mastery level."
      }
    },

    "react": {
      "heading": "React",
      "advanced": "Advanced",
      "p1": "Prepare to dive deep into <highlight>core React principles</highlight>. This quiz challenges you with — handling <em>unnecessary re-renders with useEffect</em>, to understanding when and why to use <em>useRef instead of useState</em>, and even tackling real-world patterns like translation, state management, and more.",
      "p2": "By answering <strong>30 thoughtfully designed questions</strong>, you'll strengthen your ability to build scalable apps, sharpen your debugging mindset, and discover techniques that go beyond tutorials.",
      "buttons": {
        "start": "Start Now",
        "info": "Rules"
      },
      "Info": {
        "rules": "React quiz rules",
        "rule1": "You'll receive 30 React question.",
        "rule2": "Each question allows choosing only one option.",
        "rule3": "Correct answer becomes <green>green</green>, incorrect one gets-<red>red</red>.",
        "rule4": "You can use Previous, Next, Skip and Explanation buttons.",
        "rule5": "After submitting, the correct answer will be revealed.",
        "rule6": "No timer, meaning you can think and learn calmly.",
        "rule7": "At the end, you'll receive score and feedback."
      }
    },

    "random": {
      "heading": "Random Logic",
      "popular": "Popular",
      "p1": "Sharpen your problem-solving with the <highlight>Random Logic quiz</highlight>. Expect tricky puzzles that test patterns, conditions, loops, data handling, and unexpected scenarios every developer should handle.",
      "p2": "You will face questions that you have never thought about. With <strong>30 unique logic challenges</strong>, you'll train your brain to think critically, debug faster, and approach problems like a real engineer.",
      "buttons": {
        "start": "Start Now",
        "info": "Rules"
      },
      "Info": {
        "rules": "Random Logic quiz rules",
        "rule1": "You'll receive 30 randomly chosed tricky question.",
        "rule2": "Each question allows choosing only one option.",
        "rule3": "Correct answer will become <green>green</green>, incorrect - gets <red>red</red>.",
        "rule4": "You can use Previous, Next, Skip and Explanation buttons.",
        "rule5": "After submitting, the correct answer will be revealed.",
        "rule6": "No timer, meaning you can think and learn calmly.",
        "rule7": "At the end, you'll receive score and feedback."
      }
    }
  },  
  "header": {
    "about": "About",
    "contact": "Contact",
    "resources": "Resources",
    "rules": "Rules"
  },
  "main": {
    "header2": "HTML/CSS QUIZ",
    "header3": "JAVASCRIPT QUIZ",
    "header4": "REACT QUIZ",
    "header5": "Random Logic Quiz",
    "p2": "Write the tags. Rule the style.",
    "p3": "Control the logic. Power the web.",
    "p4": "Test your developer knowledge",
    "p5": "Think outside logic. Solve inside chaos.",
    "sec2html": "HTML/CSS Quiz total list:",
    "sec2js": "Javascript Quiz total list:",
    "sec2react": "React Quiz total list:",
    "sec2random": "Random Quiz total list:",
    "explanation": "Explanation",
    "question": "Question",
    "buttons": {
      "previous": "Previous",
      "next": "Next",
      "submit": "Submit",
      "skip": "Skip",
      "refresh": "Refresh",
      "explanation": "Explanation"
    },
    "videoTutorial": "Video Tutorial",
    "videoCreator": "Video tutorial by <highlight>BroCodes</highlight> on YouTube.",
    "challengecomplete": "Challenge Complete!",
    "quizstats": "Quiz Stats",
    "totalquestions": "Total Questions",
    "correctanswers": "Correct Answers",
    "wronganswers": "Wrong Answers",
    "skipped": "Skipped",
    "accuracy": "Accuracy",
    "finalscore": "Final Score",
    "insightmastery": "Insights & Mastery",
    "mostmissed": "Most Missed:",
    "noincorrectanswers": "No incorrect answers",
    "yourmasterylevel": "Your Mastery Level:",
    "tryagain": "Try again",
    "gohome": "Go home"
  },
  "footer": {
    "help": "Help",
    "howtoplay": "How to play",
    "cantStart": "Can't start quiz",
    "bug": "Found a bug",
    "more": "More",

    "resources": "Resources",
    "docs": "Documentation",
    "blog": "Blog",
    "repo": "GitHub Repo",
    "community": "Community",

    "contact": "Contact",
    "email": "Email Support",
    "linkedin": "LinkedIn",
    "instagram": "Instagram",
    "feedback": "Feedback",

    "about": "About",
    "aboutApp": "About CodeMeter",
    "purpose": "Purpose",
    "stack": "Tech Stack",
    "changelog": "Changelog",

    "quizzes": "More Quizzes",
    "htmlcss": "HTML/CSS",
    "js": "JavaScript",
    "react": "React",
    "custom": "Custom",

    "follow": "Follow Us:",
    "language": "Language:",
    "copyright": "© 2024-{{year}} | CodeMeter | Created with ",
    "rights": "by Luka | All Rights Reserved.",
    "top": "TOP",
    "quiz": "Quiz",

    "social": {
      "followUs": "Follow Us:",
      "language": "Language"
    }
  },
  "footerFacts": [
    "Boolean algebra was invented in the 1840s.",
    "Alan Turing cracked the Enigma code using logic.",
    "Recursion is a function calling itself.",
    "A NAND gate can make any logic gate.",
    "Did you know? React was created by a Facebook engineer in just a few days!",
    "In logic, the opposite of 'true' is always 'false' — no maybe!",
    "De Morgan's laws help simplify complex logical expressions.",
    "George Boole's work laid the foundation for digital circuits.",
    "Logic gates are the building blocks of all computers.",
    "XOR returns true only when inputs differ — like a secret handshake.",
    "The Turing machine is a model for all modern computers.",
    "In JavaScript, `false || true` returns true — logic wins again.",
    "In programming, `if (false)` will never run, no matter how hopeful you are.",
    "Most coding errors happen due to flawed logic, not syntax.",
    "Functional programming relies heavily on pure logic and immutability.",
    "A paradox is a statement that contradicts itself — logically tricky!",
    "Tautology is a logical formula that is always true.",
    "Contradiction is a logical formula that is always false.",
    "Truth tables map every possible outcome in a logical expression.",
    "Logic is not just for computers — it powers your critical thinking too."
  ],
  "htmlcss": {
    "1": {
      "question": "What does HTML stand for?",
      "options": [
        "Hyper Text Markup Language",
        "Home Tool Markup Language",
        "Hyperlinks and Text Markup Language",
        "Hyper Tool Machine Language"
      ],
      "level": "<easy>easy</easy>",
      "correct": "Hyper Text Markup Language",
      "explanation": "HTML stands for Hyper Text Markup Language. It structures web content using markup and allows linking between pages."
    },
    "2": {
      "question": "Which of this  is the correct HTML element for the largest heading?",
      "options": ["<heading>", "<h1>", "<h3>", "<h6>"],
      "level": "<easy>easy</easy>",
      "correct": "<h1>",
      "explanation": "<h1> is the largest and most important heading tag used in HTML, then comes <h2>, <h3>...."
    },
    "3": {
      "question": "Which HTML tag is used to define an internal style sheet?",
      "options": ["<style>", "<css>", "<script>", "<link>"],
      "level": "<easy>easy</easy>",
      "correct": "<style>",
      "explanation": "The <style> tag is used inside the HTML <head> to define internal CSS styles, which help us to style our website."
    },
    "4": {
      "question": "Which property is used to change the text color in CSS?",
      "options": ["font-color", "text-color", "color", "font-style"],
      "level": "<easy>easy</easy>",
      "correct": "color",
      "explanation": "The color property in CSS changes the text color of elements."
    },
    "5": {
      "question": "What is the correct HTML for creating a hyperlink?",
      "options": [
        "<a>www.example.com</a>",
        "<a href='www.example.com'>Example</a>",
        "<link src='www.example.com'>",
        "<a url='www.example.com'>Example</a>"
      ],
      "level": "<easy>easy</easy>",
      "correct": "<a href='www.example.com'>Example</a>",
      "explanation": "The <a> tag with an 'href' attribute creates a clickable hyperlink to a URL."
    },
    "6": {
      "question": "Which tag is used to insert a line break in HTML?",
      "options": ["<br>", "<lb>", "<break>", "<line>"],
      "level": "<easy>easy</easy>",
      "correct": "<br>",
      "explanation": "The <br> tag inserts a line break in HTML, moving content to the next line."
    },
    "7": {
      "question": "Which CSS property controls the size of text?",
      "options": ["font-style", "text-size", "font-size", "text-style"],
      "level": "<easy>easy</easy>",
      "correct": "font-size",
      "explanation": "The 'font-size' property changes how large or small text appears in CSS."
    },
    "8": {
      "question": "Which HTML tag is used for inserting an image?",
      "options": ["<image>", "<img>", "<picture>", "<media>"],
      "level": "<easy>easy</easy>",
      "correct": "<img>",
      "explanation": "The <img> tag embeds an image into the HTML document using the 'src' attribute, the src help us to choose which of the image we want to add in the exact <img> tag."
    },
    "9": {
      "question": "How do you write a comment in CSS?",
      "options": [
        "// this is a comment",
        "<!-- this is a comment -->",
        "/* this is a comment */",
        "** this is a comment **"
      ],
      "level": "<easy>easy</easy>",
      "correct": "/* this is a comment */",
      "explanation": "CSS comments are written using /*  */ and, the browser doesn't count it as a code, so it get's ignored."
    },
    "10": {
      "question": "Which attribute is used in HTML to define inline styles?",
      "options": ["font", "styles", "style", "class"],
      "level": "<easy>easy</easy>",
      "correct": "style",
      "explanation": "The 'style' attribute applies CSS rules directly to an HTML element."
    },
    "11": {
      "question": "How do you center a block element in CSS?",
      "options": [
        "margin: auto;",
        "text-align: center;",
        "align: center;",
        "padding: center;"
      ],
      "level": "<easy>easy</easy>",
      "correct": "margin: auto;",
      "explanation": "'margin: auto;' horizontally centers a block element if it has a fixed width."
    },
    "12": {
      "question": "What does CSS stand for?",
      "options": [
        "Computer Style Sheets",
        "Creative Style Sheets",
        "Cascading Style Sheets",
        "Colorful Style Sheets"
      ],
      "level": "<easy>easy</easy>",
      "correct": "Cascading Style Sheets",
      "explanation": "CSS stands for Cascading Style Sheets and is used to style HTML elements."
    },
    "13": {
      "question": "Which tag is used to make text bold in HTML?",
      "options": ["<bold>", "<b>", "<strong>", "<em>"],
      "level": "<easy>easy</easy>",
      "correct": "<b>",
      "explanation": "The <b> tag makes text bold but doesn't add semantic importance like <strong>."
    },
    "14": {
      "question": "Which CSS property makes text italic?",
      "options": ["font-style: italic", "text-transform: italic", "font-weight: italic", "text-style: italic"],
      "level": "<easy>easy</easy>",
      "correct": "font-style: italic",
      "explanation": "'font-style: italic;' is used in CSS to give it unique text appearance, italic gives text slanted visuals."
    },
    "15": {
      "question": "How do you select an element with id 'header' in CSS?",
      "options": ["#header", ".header", "*header", "header"],
      "level": "<easy>easy</easy>",
      "correct": "#header",
      "explanation": "In CSS, '#' is used to target an element by its ID, so #header selects the element with id='header'."
    },
    "16": {
      "question": "What's the difference between div and span tags?",
      "options": [
        "Both are block-level elements used to group content.",
        "<div> is used for inline styling, while <span> is used for layout.",
        "<div> is a block-level element; <span> is an inline element.",
        "<span> can contain other block elements; <div> cannot."
      ],
      "level": "<easy>easy</easy>",
      "correct": "<div> is a block-level element; <span> is an inline element.",
      "explanation": "<div> is used for layout and spans the full width. <span> is used for styling small inline portions of text."
    },
    "17": {
      "question": "Which HTML element is used to play video files?",
      "options": ["<media>", "<video>", "<player>", "<file>"],
      "level": "<easy>easy</easy>",
      "correct": "<video>",
      "explanation": "The <video> element allows you to embed and control video playback in HTML."
    },
    "18": {
      "question": "What is the default display property of a <div> in CSS?",
      "options": ["inline", "block", "flex", "grid"],
      "level": "<easy>easy</easy>",
      "correct": "block",
      "explanation": "<div> is a block-level element by default, meaning it takes up the full width of its container."
    },
    "19": {
      "question": "Which CSS property sets the background color?",
      "options": ["color", "bgcolor", "background-color", "bg-color"],
      "level": "<easy>easy</easy>",
      "correct": "background-color",
      "explanation": "'background-color' sets the background color of an element in CSS."
    },
    "20": {
      "question": "Which HTML tag is used to create a paragraph?",
      "options": ["<para>", "<paragraph>", "<p>", "<pg>"],
      "level": "<easy>easy</easy>",
      "correct": "<p>",
      "explanation": "The <p> tag is used to define a paragraph in HTML. Browsers automatically add space before and after each paragraph."
    },
    "21": {
      "question": "What is z-index in CSS?",
      "options": [
        "Controls the stacking order of layers",
        "Sets the pixel position of an element",
        "Adjusts text size",
        "Aligns an element on a line"
      ],
      "level": "<easy>easy</easy>",
      "correct": "Controls the stacking order of layers",
      "explanation": "The z-index property determines the order in which elements stack on top of each other. Higher z-index stands on above other elements."
    },
    "22": {
      "question": "What is Flexbox in CSS?",
      "options": [
        "A style for links",
        "A text decoration",
        "A scrolling effect",
        "A layout model for arranging elements"
      ],
      "level": "<easy>easy</easy>",
      "correct": "A layout model for arranging elements",
      "explanation": "Flexbox is a CSS layout model used to arrange elements inside a container in a flexible way."
    },
    "23": {
      "question": "Which tag is correct for creating a form to collect personal information (e.g., login or registration)?",
      "options": ["<form>", "<input>", "<submit>", "<button>"],
      "level": "<easy>easy</easy>",
      "correct": "<form>",
      "explanation": "The <form> tag is used to create a form for user input(password, usernam, mobile phone and more)."
    },
    "24": {
      "question": "Which attribute sets the value of a text input field?",
      "options": ["value", "input", "text", "placeholder"],
      "level": "<easy>easy</easy>",
      "correct": "value",
      "explanation": "The value attribute defines the current value inside an input field."
    },
    "25": {
      "question": "Which CSS property is used to show or hide an element?",
      "options": ["display: none", "visibility", "hidden", "opacity"],
      "level": "<easy>easy</easy>",
      "correct": "display: none",
      "explanation": "display: none hides an element completely, removing it from the page layout."
    },
    "26": {
      "question": "What is the purpose of the <!DOCTYPE html> declaration?",
      "options": [
        "To link a CSS file",
        "To specify the HTML version",
        "To include JavaScript",
        "To create a comment"
      ],
      "level": "<easy>easy</easy>",
      "correct": "To specify the HTML version",
      "explanation": "DOCTYPE tells the browser which version of HTML the page is written in, so it can be displayed correctly."
    },
    "27": {
      "question": "Which HTML tag is used to create a table?",
      "options": ["<table>", "<tab>", "<tr>", "<td>"],
      "level": "<easy>easy</easy>",
      "correct": "<table>",
      "explanation": "The <table> tag creates a table in HTML."
    },
    "28": {
      "question": "Which tag defines a table row?",
      "options": ["<td>", "<th>", "<tr>", "<row>"],
      "level": "<easy>easy</easy>",
      "correct": "<tr>",
      "explanation": "The <tr> tag defines a row in a table."
    },
    "29": {
      "question": "Which tag defines a table cell?",
      "options": ["<cell>", "<td>", "<tc>", "<tr>"],
      "level": "<easy>easy</easy>",
      "correct": "<td>",
      "explanation": "The <td> tag defines a cell in a table that contains data."
    },
    "30": {
      "question": "How do you assign a class to an element in HTML?",
      "options": [
        "class='classname'",
        ".class: classname",
        "#class: classname",
        "id='classname'"
      ],
      "level": "<easy>easy</easy>",
      "correct": "class='classname'",
      "explanation": "In HTML, the class attribute is written like this: class='classname'."
    },
    "31": {
      "question": "What is the purpose of the alt attribute in an <img> tag?",
      "options": [
        "To style the image",
        "To add a title",
        "To display alternative text if the image cannot load",
        "To define the image location"
      ],
      "level": "<easy>easy</easy>",
      "correct": "To display alternative text if the image cannot load",
      "explanation": "The alt attribute provides text that is shown if the image fails to load and improves accessibility."
    },
    "32": {
      "question": "Which tag is used for an unordered list?",
      "options": ["<ul>", "<ol>", "<li>", "<list>"],
      "level": "<easy>easy</easy>",
      "correct": "<ul>",
      "explanation": "The <ul> tag creates an unordered list with bullet points."
    },
    "33": {
      "question": "Which tag defines a list item?",
      "options": ["<item>", "<li>", "<ul>", "<ol>"],
      "level": "<easy>easy</easy>",
      "correct": "<li>",
      "explanation": "The <li> tag defines a list item, usually placed inside <ul> or <ol>."
    },
    "34": {
      "question": "Which CSS property prevents a background image from repeating?",
      "options": [
        "background-repeat: no;",
        "background-no-repeat: true;",
        "no-repeat: background;",
        "background-repeat: no-repeat;"
      ],
      "level": "<easy>easy</easy>",
      "correct": "background-repeat: no-repeat;",
      "explanation": "The background-repeat: no-repeat; property stops a background image from repeating, this mostly is usefull if the image size is too short."
    },
    "35": {
      "question": "Which unit is based on the font size of the parent element?",
      "options": ["px", "em", "cm", "%"],
      "level": "<easy>easy</easy>",
      "correct": "em",
      "explanation": "The 'em' unit is relative to the font size of the parent element."
    },
    "36": {
      "question": "Which CSS value hides an element but still leaves its space?",
      "options": ["hidden", "display: none;", "visibility: hidden;", "opacity: 100"],
      "level": "<easy>easy</easy>",
      "correct": "visibility: hidden;",
      "explanation": "visibility: hidden; makes the element invisible but keeps its space in the layout."
    },
    "37": {
      "question": "What does the z-index property do in CSS?",
      "options": [
        "Sets the zoom level",
        "Controls the stacking order of elements",
        "Sets the font weight",
        "Changes the page index"
      ],
      "level": "<easy>easy</easy>",
      "correct": "Controls the stacking order of elements",
      "explanation": "The z-index property determines which elements appear on top when they overlap."
    },
    "38": {
      "question": "How can you make a list display horizontally?",
      "options": [
        "display: inline;",
        "flex-direction: column;",
        "list-style: none;",
        "display: flex;"
      ],
      "level": "<easy>easy</easy>",
      "correct": "display: flex;",
      "explanation": "Using display: flex; on a container arranges its items in a row by default."
    },
    "39": {
      "question": "Which HTML tag is used to embed audio files?",
      "options": ["<audio>", "<sound>", "<mp3>", "<music>"],
      "level": "<easy>easy</easy>",
      "correct": "<audio>",
      "explanation": "The <audio> tag is used to embed audio content in a webpage."
    },
    "40": {
      "question": "Which pseudo-class selects the first child element?",
      "options": [":first", ":first-child", "::first", ":nth-child(1)"],
      "level": "<medium>medium</medium>",
      "correct": ":first-child",
      "explanation": "The :first-child pseudo-class selects the first child element of its parent."
    },
    "41": {
      "question": "What does the 'position: absolute' property do?",
      "options": [
        "Fixes the element relative to the viewport",
        "Removes the element from the flow and positions it relative to the nearest positioned ancestor",
        "Makes the element scrollable",
        "Aligns the element in center"
      ],
      "level": "<medium>medium</medium>",
      "correct": "Removes the element from the flow and positions it relative to the nearest positioned ancestor",
      "explanation": "'absolute' removes the element from normal document flow and positions it based on the closest ancestor with a position other than 'static'."
    },
    "42": {
      "question": "What is the default position value in CSS?",
      "options": ["absolute", "relative", "static", "fixed"],
      "level": "<medium>medium</medium>",
      "correct": "static",
      "explanation": "By default, elements are positioned 'static', meaning they follow the normal document flow."
    },
    "43": {
      "question": "Which CSS property is used to add shadow to text?",
      "options": ["text-style", "font-shadow", "text-shadow", "box-shadow"],
      "level": "<medium>medium</medium>",
      "correct": "text-shadow",
      "explanation": "'text-shadow' adds shadow effects to text."
    },
    "44": {
      "question": "Which attribute is used to open a link in a new tab?",
      "options": ["target='_blank'", "new-tab", "href='_new'", "open='tab'"],
      "level": "<medium>medium</medium>",
      "correct": "target='_blank'",
      "explanation": "Using target='_blank' opens the linked document in a new browser tab or window."
    },
    "45": {
      "question": "Which HTML element is best for marking up navigation links?",
      "options": [
        "<section>", "<nav>",
        "<aside>", "<menu>"
      ],
      "level": "<medium>medium</medium>",
      "correct": "<nav>",
      "explanation": "<nav> is a semantic HTML element specifically intended for navigation links."
    },
    "46": {
      "question": "What does the <label> tag do in HTML forms?",
      "options": [
        "It groups multiple input fields",
        "It styles form elements",
        "It defines a caption for an input",
        "It validates user input"
      ],
      "level": "<medium>medium</medium>",
      "correct": "It defines a caption for an input",
      "explanation": "The <label> tag connects text to an input element, making forms more accessible and easier to use."
    },
    "47": {
      "question": "In CSS, what does 'position: relative' mainly do?",
      "options": [
        "Moves an element relative to its parent",
        "Moves an element relative to its normal position",
        "Fixes an element in place",
        "Positions an element relative to the viewport"
      ],
      "level": "<medium>medium</medium>",
      "correct": "Moves an element relative to its normal position",
      "explanation": "'position: relative' lets you move an element without removing it from the normal document flow. It also sets a positioning context for any absolutely positioned child elements."
    },
    "48": {
      "question": "Which CSS property adds space between elements (outside the border)?",
      "options": ["padding", "margin", "border-spacing", "gap"],
      "level": "<medium>medium</medium>",
      "correct": "margin",
      "explanation": "margin controls the outer space around an element, outside its border."
    },
    "49": {
      "question": "How do you apply styles only when hovering over an element?",
      "options": [":hover", ":active", ":visited", ":focus"],
      "level": "<medium>medium</medium>",
      "correct": ":hover",
      "explanation": "The ':hover' pseudo-class applies styles when the user points to an element with a mouse."
    },
    "50": {
      "question": "What is the purpose of <head> in an HTML document?",
      "options": [
        "To define the main content",
        "To insert scripts, styles, and metadata",
        "To write body content",
        "To store server logic"
      ],
      "level": "<medium>medium</medium>",
      "correct": "To insert scripts, styles, and metadata",
      "explanation": "The <head> element contains metadata, links to stylesheets, and other non-visible elements for the page setup."
    },
    "51": {
      "question": "Which tag is used to create a table row?",
      "options": ["<th>", "<tr>", "<td>", "<row>"],
      "level": "<medium>medium</medium>",
      "correct": "<tr>",
      "explanation": "<tr> stands for table row and is used to group table cells in a horizontal row."
    },
    "52": {
      "question": "Which property changes the background color of an element in Css?",
      "options": ["color", "bg-color", "background-color", "background"],
      "level": "<medium>medium</medium>",
      "correct": "background-color",
      "explanation": "'background-color' sets the background color of an element behind the text or content."
    },
    "53": {
      "question": "Which input type creates a slider control?",
      "options": ["range", "slider", "scale", "number"],
      "level": "<medium>medium</medium>",
      "correct": "range",
      "explanation": "input type='range' creates a slider allowing selection between min and max values."
    },
    "54": {
      "question": "where exactly do we add <script> tag in our html to add functionallity",
      "options": ["<head>", "<body>", "<meta>", "<link>"],
      "level": "<medium>medium</medium>",
      "correct": "<body>",
      "explanation": "we are adding our script tag in the <body> of our html document to add functionallity"
    },
    "55": {
      "question": "You have two elements:<div style='position: relative; z-index: 20;...'></div> and <div style='position: relative; z-index: 10;...'></div>. Which element will appear on the top?",
      "options": [
        "The div with z index of 10",
        "The div with z index of 20",
        "They will overlap equally",
        "It depends on the HTML order"
      ],
      "level": "<medium>medium</medium>",
      "correct": "The div with z index of 20",
      "explanation": "The div with z index of 20 has a higher z-index (20) than the box with z-(10), so it appears in front when they overlap."
    },
    "56": {
      "question": "In Css Which selector targets all <p> elements inside a <div>?",
      "options": ["div.p", "div p", "p > div", "div + p"],
      "level": "<medium>medium</medium>",
      "correct": "div p",
      "explanation": "'div p' selects all <p> elements that are descendants of a <div>."
    },
    "57": {
      "question": "What does the <meta charset='UTF-8'> tag do?",
      "options": [
        "Defines document language",
        "Links a stylesheet",
        "Specifies character encoding",
        "Adds SEO keywords"
      ],
      "level": "<medium>medium</medium>",
      "correct": "Specifies character encoding",
      "explanation": "It tells the browser to use UTF-8 encoding, which supports most characters from all languages."
    },
    "58": {
      "question": "Which property sets the font of an element?",
      "options": ["font", "font-style", "font-family", "text-font"],
      "level": "<medium>medium</medium>",
      "correct": "font-family",
      "explanation": "'font-family' specifies the typeface used to render the text."
    },
    "59": {
      "question": "What does the 'display: flex' property do?",
      "options": [
        "Aligns text in center",
        "Applies float layout",
        "Enables a flexible box layout",
        "Makes element sticky"
      ],
      "level": "<medium>medium</medium>",
      "correct": "Enables a flexible box layout",
      "explanation": "'display: flex' activates Flexbox layout model to align and distribute space among items."
    },
    "60": {
      "question": "Which tag defines a container for navigation links?",
      "options": ["<nav>", "<button>", "<aside>", "<menu>"],
      "level": "<medium>medium</medium>",
      "correct": "<nav>",
      "explanation": "<nav> is a semantic HTML5 tag for grouping navigation links in a document."
    },
    "61": {
      "question": "What's the difference between a class and an ID in HTML?",
      "options": ["Class is unique, ID can be reused", "ID is reusable, class is unique", "Class can be reused, ID is unique", "Both are the same"],
      "level": "<medium>medium</medium>",
      "correct": "Class can be reused, ID is unique",
      "explanation": "Classes can be applied to multiple elements, while IDs must be unique per tag <div id=`1`></div>."
    },
    "62": {
      "question": "Which CSS unit is relative to the root font size?",
      "options": ["em", "rem", "px", "%"],
      "level": "<medium>medium</medium>",
      "correct": "rem",
      "explanation": "`rem` stands for 'root em' and scales based on the root `<html>` element's font size."
    },
    "63": {
      "question": "What CSS unit should you use for scalable spacing across all screen sizes?",
      "options": ["px", "rem", "vh", "pt"],
      "level": "<medium>medium</medium>",
      "correct": "rem",
      "explanation": "`rem` units scale consistently with the root font size, making them ideal for responsive design."
    },
    "64": {
      "question": "How do you change text color using Tailwind CSS?",
      "options": ["color-red", "font-color-red", "text-red-500", "bg-red-500"],
      "level": "<medium>medium</medium>",
      "correct": "text-red-500",
      "explanation": "Tailwind uses utility classes like `text-red-500`,`red-50 till red-950` to apply text color."
    },
    "65": {
      "question": "What's a major difference between Tailwind CSS and regular CSS?",
      "options": ["Tailwind is used inline", "Tailwind has no limitations", "Tailwind uses utility classes", "Tailwind supports all animations"],
      "level": "<medium>medium</medium>",
      "correct": "Tailwind uses utility classes",
      "explanation": "Unlike regular CSS where you write custom styles for each class or element, Tailwind provides pre-built utility classes for common CSS properties like margin, padding, colors, and fonts. Instead of writing new CSS rules, you combine these small classes directly in your HTML to style elements quickly and consistently. This approach is called 'utility-first' and helps reduce the need to switch between HTML and CSS files."
    },
    "66": {
      "question": "Which position value keeps an element fixed during scroll?",
      "options": ["relative", "static", "sticky", "fixed"],
      "level": "<medium>medium</medium>",
      "correct": "fixed",
      "explanation": "Fixed positioning anchors the element to the viewport, meaning it's fixed to place we want while scrolling."
    },
    "67": {
      "question": "What does `position: sticky` do?",
      "options": ["Fixes to the top", "Moves like absolute", "Behaves like relative then fixed", "Hides the element"],
      "level": "<medium>medium</medium>",
      "correct": "Behaves like relative then fixed",
      "explanation": "Sticky elements scroll normally but become fixed when reaching a defined scroll position."
    },
    "68": {
      "question": "What's the default display property of a `<div>`?",
      "options": ["inline", "block", "flex", "grid"],
      "level": "<medium>medium</medium>",
      "correct": "block",
      "explanation": "`div` elements are block-level by default, meaning they take full width."
    },
    "69": {
      "question": "Which Tailwind class applies padding on all sides(top, bottom, left and right)?",
      "options": ["pd-4", "space-4", "p-4", "padding-4"],
      "level": "<medium>medium</medium>",
      "correct": "p-4",
      "explanation": "In Tailwind, `p-4` adds equal padding on all four sides(top, bottom, left and right)."
    },
    "70": {
      "question": "How do you apply a box shadow in Tailwind CSS?",
      "options": ["shadow-md", "box-shadow", "shadow: md", "shd-md"],
      "level": "<medium>medium</medium>",
      "correct": "shadow-md",
      "explanation": "Tailwind uses utilities like `shadow`, `animate` to apply predefined box shadow styles."
    },
    "71": {
      "question": "Which of the HTML element is used to type our personal information(password, username, mobile phone..)?",
      "options": ["<footer>", "<form>", "<link>", "<aside>"],
      "level": "<medium>medium</medium>",
      "correct": "<form>",
      "explanation": "<form> element is used to save personal information about person(username, mobile phone, password), we type it in <form>."
    },
    "72": {
      "question": "In HTML/CSS, what is considered the 'root' element of a webpage?",
      "options": [
        "<body>",
        "<html>",
        "<head>",
        "<main>"
      ],
      "level": "<medium>medium</medium>",
      "correct": "<html>",
      "explanation": "The `<html>` element is the root of an HTML document. In CSS, `:root` targets this element, often used for defining global variables."
    },
    "73": {
      "question": "What's the key difference between `em` and `rem` units in CSS?",
      "options": ["em is fixed, rem is relative", "em uses root size, rem uses parent", "em uses parent size, rem uses root", "they're identical"],
      "level": "<medium>medium</medium>",
      "correct": "em uses parent size, rem uses root",
      "explanation": "`em` is relative to the parent element's font size, while `rem` is relative to the root."
    },
    "74": {
      "question": "Which CSS property is used to change the type of cursor when hovering over an element?",
      "options": [
        "pointer-events",
        "cursor",
        "hover",
        "mouse-style"
      ],
      "level": "<medium>medium</medium>",
      "correct": "cursor",
      "explanation": "The `cursor` property changes the mouse pointer style when hovering over an element, for example `cursor: pointer;` makes it a hand icon."
    },
    "75": {
      "question": "What is the main benefit of using CSS variables?",
      "options": ["Faster rendering", "Easier animations", "Reusable values", "Custom fonts"],
      "level": "<medium>medium</medium>",
      "correct": "Reusable values",
      "explanation": "CSS variables make it easy to reuse consistent values like colors or sizes across styles."
    },
    "76": {
      "question": "Which of the following selectors targets a class in Css?",
      "options": [".header", "#header", "header", "header[]"],
      "level": "<medium>medium</medium>",
      "correct": ".header",
      "explanation": "Class selectors start with a dot (`.`) followed by the class name in Css."
    },
    "77": {
      "question": "When resizing an image in CSS, which property helps keep its original proportions so it doesn't look stretched or broken?",
      "options": [
        "object-fit",
        "image-ratio",
        "background-size",
        "aspect-ratio"
      ],
      "level": "<medium>medium</medium>",
      "correct": "object-fit",
      "explanation": "The `object-fit` property controls how an image is resized to fit its container. Using `object-fit: cover;` or `contain;` helps maintain the correct proportions without distortion."
    },
    "78": {
      "question": "In HTML, how do you make an input field a radio button?",
      "options": [
        "<input type='button'>",
        "<input type='radio'>",
        "<input type='checkbox'>",
        "<input type='circle'>"
      ],
      "level": "<medium>medium</medium>",
      "correct": "<input type='radio'>",
      "explanation": "Setting the `type` attribute to `radio` creates a circular option selector that allows users to choose one value from a group."
    },
    "79": {
      "question": "In HTML, what is the purpose of the <svg> tag?",
      "options": [
        "To display scalable vector graphics",
        "To insert sound effects",
        "To add video playback",
        "To style text with gradients"
      ],
      "level": "<medium>medium</medium>",
      "correct": "To display scalable vector graphics",
      "explanation": "The `<svg>` tag is used to define and display scalable vector graphics directly in HTML. SVG images stay sharp at any resolution and is usefull for nice UX/UI."
    },
    "80": {
      "question": "What does `overflow: hidden` do?",
      "options": ["Shows scrollbars", "Cuts off overflow", "Centers the content", "Expands the element"],
      "level": "<medium>medium</medium>",
      "correct": "Cuts off overflow",
      "explanation": "`overflow: hidden` hides any content that exceeds the container's bounds."
    },
    "81": {
      "question": "What is the difference between `min-width` and `max-width`?",
      "options": ["min-width sets fixed size", "max-width overrides margin", "min is the smallest size allowed", "they are the same"],
      "level": "<hard>hard</hard>",
      "correct": "min-width is the smallest size allowed",
      "explanation": "`min-width` sets the smallest possible width, `max-width` sets the largest."
    },
    "82": {
      "question": "Which Tailwind class controls spacing between flex items?",
      "options": ["gap-x", "margin-x", "space-x", "padding-x"],
      "level": "<hard>hard</hard>",
      "correct": "space-x",
      "explanation": "`space-x-*` in Tailwind adds horizontal spacing between child elements."
    },
    "83": {
      "question": "What is the default value of `box-sizing`?",
      "options": ["border-box", "content-box", "auto", "none"],
      "level": "<hard>hard</hard>",
      "correct": "content-box",
      "explanation": "By default, `box-sizing` is `content-box`, meaning padding and border are *not* included in width/height."
    },
    "84": {
      "question": "In CSS, which property and value are used to create a multi-color background gradient?",
      "options": [
        "background: color-mix(...)",
        "background: gradient-color(...)",
        "background: linear-gradient(...)",
        "background: color-gradient(...)"
      ],
      "level": "<hard>hard</hard>",
      "correct": "background: linear-gradient(...)",
      "explanation": "In CSS, `linear-gradient()` is used with the `background` property to create multi-color gradients. For example: `background: linear-gradient(to bottom, red, blue, green);`."
    },
    "85": {
      "question": "Which media query targets screen widths less than 768px?",
      "options": ["@media (min-width: 768px)", "@media screen", "@media (max-width: 768px)", "@media <768"],
      "level": "<hard>hard</hard>",
      "correct": "@media (max-width: 768px)",
      "explanation": "`max-width: 768px` applies styles to screens smaller than 768 pixels wide."
    },
     "86": {
      "question": "Which was the first version of HTML and when was it created?",
      "options": ["HTML 1.0 in 1991", "HTML 2.0 in 1995", "HTML 3.2 in 1997", "HTML5 in 2014"],
      "level": "<hard>hard</hard>",
      "correct": "HTML 1.0 in 1991",
      "explanation": "HTML 1.0 was created by Tim Berners-Lee in 1991 to allow simple document formatting and linking on the early web."
    },
    "87": {
      "question": "Who invented HTML and why?",
      "options": [
        "Brendan Eich, to style documents",
        "Tim Berners-Lee, to share linked documents",
        "Linus Torvalds, for Linux websites",
        "Steve Jobs, for Apple websites"
      ],
      "level": "<hard>hard</hard>",
      "correct": "Tim Berners-Lee, to share linked documents",
      "explanation": "Tim Berners-Lee created HTML to help researchers share and link documents on the World Wide Web."
    },
    "88": {
      "question": "Why are HTML and CSS not considered programming languages?",
      "options": ["They don't use semicolons", "They can't create websites", "They don't include logic or flow control", "They don't work in browsers"],
      "level": "<hard>hard</hard>",
      "correct": "They don't include logic or flow control",
      "explanation": "HTML and CSS are markup and styling languages, not programming languages, because they can't perform logic or decision-making."
    },
    "89": {
      "question": "Which version introduced the modern structure of HTML with semantic tags like `<article>` and `<section>`?",
      "options": ["HTML 3.2", "HTML 4.01", "HTML5", "XHTML"],
      "level": "<hard>hard</hard>",
      "correct": "HTML5",
      "explanation": "HTML5 introduced semantic tags to better describe the structure and meaning of web content."
    },
    "90": {
      "question": "What was the purpose of creating CSS in 1996?",
      "options": [
        "To replace JavaScript",
        "To style HTML separately from content",
        "To speed up page loading",
        "To build mobile apps"
      ],
      "level": "<hard>hard</hard>",
      "correct": "To style HTML separately from content",
      "explanation": "CSS was created to separate style from structure, allowing more consistent and maintainable web design."
    },
    "91": {
      "question": "In which year was CSS (Cascading Style Sheets) first proposed?",
      "options": [
        "1994",
        "1989",
        "2000",
        "1997"
      ],
      "level": "<hard>hard</hard>",
      "correct": "1994",
      "explanation": "CSS was first proposed by Håkon Wium Lie in 1994 to separate content from design on the web."
    },
    "92": {
      "question": "How does Tailwind CSS handle responsive design?",
      "options": ["It uses media queries directly", "It adds custom JavaScript breakpoints", "It uses utility classes like `md:` and `lg:`", "It doesn't support responsiveness"],
      "level": "<hard>hard</hard>",
      "correct": "It uses utility classes like `md:` and `lg:`",
      "explanation": "Tailwind uses breakpoint prefixes like `md:` to apply styles conditionally based on screen size."
    },
    "93": {
      "question": "What's the main difference between absolute and sticky positioning?",
      "options": ["Sticky moves freely, absolute doesn't", "Sticky is relative to scroll, absolute is to nearest positioned parent", "Sticky uses z-index, absolute doesn't", "There is no difference"],
      "level": "<hard>hard</hard>",
      "correct": "Sticky is relative to scroll, absolute is to nearest positioned parent",
      "explanation": "Sticky elements scroll with the page until they reach a threshold, while absolute elements stay fixed relative to a parent."
    },
    "94": {
      "question": "Why might you use `em` or `rem` units instead of `px` in CSS?",
      "options": ["They are easier to type", "They scale better with user settings", "They load faster", "They only work with mobile"],
      "level": "<hard>hard</hard>",
      "correct": "They scale better with user settings",
      "explanation": "em and rem units are relative, so they help create more accessible, responsive designs."
    },
    "95": {
      "question": "In CSS, if you set an element's width to 100vw, why might a horizontal scrollbar still appear?",
      "options": [
        "Because vw includes the width of the scrollbar",
        "Because vw ignores padding",
        "Because vw is based on the parent container",
        "Because vw includes margins by default"
      ],
      "level": "<hard>hard</hard>",
      "correct": "Because vw includes the width of the scrollbar",
      "explanation": "The `vw` unit is based on the full viewport width, including the space taken up by the vertical scrollbar. On systems where scrollbars take up space, 100vw can be slightly wider than the visible area, causing overflow and a horizontal scrollbar."
    },
    "96": {
      "question": "What does `flex: 1` do inside a flex container?",
      "options": ["Shrinks the element", "Grows the element to fill space", "Aligns the element left", "Makes it fixed size"],
      "level": "<hard>hard</hard>",
      "correct": "Grows the element to fill space",
      "explanation": "`flex: 1` allows a flex item to grow and take available space equally with other flexible items."
    },
    "97": {
      "question": "Why do developers often prefer CSS Grid for complex layouts instead of only using Flexbox?",
      "options": [
        "Because Grid can arrange elements in both rows and columns at the same time",
        "Because Grid can automatically arrange elements correctly on the x-axis.",
        "Because Grid can automatically arrange elements correctly on the horizontal axis.",
        "Because Grid it's faster and easier to use."
      ],
      "level": "<hard>hard</hard>",
      "correct": "Because Grid can arrange elements in both rows and columns at the same time",
      "explanation": "Flexbox is one-dimensional, designed for layouts in a single row or column. CSS Grid is two-dimensional, allowing you to place items in both rows and columns at once, making it ideal for complex page structures."
    },
    "98": {
      "question": "Why was the box model introduced in CSS?",
      "options": [
        "To define JavaScript functions",
        "To create 3D shapes",
        "To control padding, border, and margin",
        "To style text only"
      ],
      "level": "<hard>hard</hard>",
      "correct": "To control padding, border, and margin",
      "explanation": "The box model represents how space is calculated around every HTML element, using padding, border, and margin."
    },
    "99": {
      "question": "What happens if you apply both `display: none` and `visibility: hidden` to an element?",
      "options": [
        "They cancel each other out",
        "The element becomes more visible",
        "Only `display: none` takes effect",
        "The element becomes fixed"
      ],
      "level": "<hard>hard</hard>",
      "correct": "Only `display: none` takes effect",
      "explanation": "`display: none` removes the element from layout entirely, while `visibility: hidden` only hides it but keeps the space."
    },
    "100": {
      "question": "What's the difference between a semantic and non-semantic HTML tag?",
      "options": [
        "`<div>` is semantic, `<section>` is not",
        "Semantic tags describe meaning and structure",
        "Non-semantic tags are deprecated",
        "There is no difference"
      ],
      "level": "<hard>hard</hard>",
      "correct": "Semantic tags describe meaning and structure",
      "explanation": "Semantic tags like `<article>`, `<header>`, and `<nav>` clearly describe their content, improving accessibility and SEO."
    },
    "101": {
      "question": "In web development, what does SEO stand for and why is it important?",
      "options": [
        "Search Engine Optimization - to improve site visibility in search results",
        "Secure Email Operations - to protect user messages",
        "System Error Output - to debug applications",
        "Server Endpoint Operation - to handle API requests"
      ],
      "level": "<hard>hard</hard>",
      "correct": "Search Engine Optimization - to improve site visibility in search results",
      "explanation": "SEO (Search Engine Optimization) is the practice of improving a website so search engines rank it higher. Good SEO helps more people discover your site through organic search."
    }
  },
  "javascript": {
    "1": {
      "question": "What's the variable in JavaScript and why do we use it?",
      "options": [
        "It creates function",
        "We can use variable so we can give it some value, or unique name",
        "We don't use variables in JavaScript",
        "It contains information about user"
      ],
      "level": "<easy>easy</easy>",
      "correct": "We can use variable so we can give it some value, or unique name",
      "explanation": "A variable is like a container for storing values. In JavaScript we use let, const, or var(var is not recomended to use)."
    },
    "2": {
      "question": "What's the difference between const and let in JavaScript?",
      "options": [
        "const cannot be reassigned, let can be reassigned",
        "let is used only inside functions",
        "const is faster than let",
        "there is no difference"
      ],
      "level": "<easy>easy</easy>",
      "correct": "const cannot be reassigned, let can be reassigned",
      "explanation": "const means the value cannot change (reassign), while let can be updated."
    },
    "3": {
      "question": "What is var in JavaScript?",
      "options": [
        "A modern replacement for const",
        "An old way to declare variables, function-scoped",
        "A constant variable that never changes",
        "It is used for defining arrays only"
      ],
      "level": "<easy>easy</easy>",
      "correct": "An old way to declare variables, function-scoped",
      "explanation": "Before ES6, var was the main way to declare variables. It has function scope, unlike let and const which have block scope."
    },
    "4": {
      "question": "Can we declare variables inside functions?",
      "options": [
        "No, variables must be global only",
        "Yes, variables can be declared inside functions",
        "Only const variables can be declared inside functions",
        "Variables must be declared outside(function) and then used inside(the function)"
      ],
      "level": "<easy>easy</easy>",
      "correct": "Yes, variables can be declared inside functions",
      "explanation": "Functions can have their own variables that are not accessible outside the function(A function can use an external variable)."
    },
    "5": {
      "question": "What is a function declaration in javascript?",
      "options": [
        "A way to declare a function using the function keyword",
        "A variable that stores a function",
        "A function created automatically",
        "A method only used in classes"
      ],
      "level": "<easy>easy</easy>",
      "correct": "A way to declare a function using the function keyword",
      "explanation": "Function declaration(const car = function() {}), starts with the function keyword and can be called before it's defined due to hoisting."
    },
    "6": {
      "question": "What is an arrow function in JavaScript?",
      "options": [
        "It is a combination of multiple functions.",
        "It is a type of function with its own distinguishing features.",
        "A function that only works with arrays.",
        "A function that cannot return values."
      ],
      "level": "<easy>easy</easy>",
      "correct": "It is a type of function with its own distinguishing features.",
      "explanation": "An arrow function looks like this: const arrow = () => {}. It can return values automatically, which means it doesn't always need the return keyword. However, it does not have its own 'this', which makes its behavior different from regular functions."
    },
    "7": {
      "question": "What is the difference between a function declaration and an arrow function?",
      "options": [
        "Function declarations are hoisted, arrow functions are not",
        "Arrow functions are faster than declarations",
        "They are the same thing",
        "Arrow functions cannot have parameters"
      ],
      "level": "<easy>easy</easy>",
      "correct": "Function declarations are hoisted, arrow functions are not",
      "explanation": "Function declarations use the `function` keyword and are hoisted(“Hoisting” means JavaScript internally moves the function declaration to the top of its scope during compilation.), so you can call them before they are defined. Arrow functions use `=>`, are not hoisted, do not have their own `this`, and can return values automatically in single-expression form."
    },
    "8": {
      "question": "What does Math.random() do in JavaScript?",
      "options": [
        "Returns a random number between 0 and 1",
        "Returns a random number between 1 and 100",
        "Generates random integers only",
        "Randomly selects an array element"
      ],
      "level": "<easy>easy</easy>",
      "correct": "Returns a random number between 0 and 1",
      "explanation": "Math.random() generates a floating-point number from 0 (inclusive; 0.1,0.99...) to 1 (exclusive)."
    },
    "9": {
      "question": "What does Math.floor() do?",
      "options": [
        "Rounds a number down to the nearest integer",
        "Rounds a number up to the nearest integer",
        "Returns the largest number",
        "Cuts decimals but doesn't round"
      ],
      "level": "<easy>easy</easy>",
      "correct": "Rounds a number down to the nearest integer",
      "explanation": "Math.floor() always rounds down, removing the decimal part, for exp: if we have 1.99, after using this method we will get 1 as result."
    },
    "10": {
      "question": "What does Math.max() do?",
      "options": [
        "Returns the smallest number",
        "Finds the largest number among given values",
        "Rounds a number",
        "Generates random numbers"
      ],
      "level": "<easy>easy</easy>",
      "correct": "Finds the largest number among given values(from an array)",
      "explanation": "Math.max() returns the highest value from the provided numbers(Math.max([1,2,3]) will return 3)."
    },
    "11": {
      "question": "What is Math in JavaScript and why do we need it?",
      "options": [
        "A library for working with numbers and calculations",
        "A way to create variables",
        "A special type of loop",
        "It is used for making arrays"
      ],
      "level": "<easy>easy</easy>",
      "correct": "A library for working with numbers and calculations",
      "explanation": "Math is a built-in object in JavaScript that provides methods for calculations like random numbers, rounding, and powers."
    },
    "12": {
      "question": "What does Math.min() do in JavaScript?",
      "options": [
        "Finds the smallest number among given values",
        "Finds the largest number",
        "Rounding down numbers",
        "Generates a random number"
      ],
      "level": "<easy>easy</easy>",
      "correct": "Finds the smallest number among given values",
      "explanation": "Math.min() returns the lowest value from the provided arguments."
    },
    "13": {
      "question": "What does Math.pow(2, 3) return?",
      "options": [
        "6",
        "8",
        "9",
        "5"
      ],
      "level": "<easy>easy</easy>",
      "correct": "8",
      "explanation": "Math.pow(x, y) returns x raised to the power y. So 2³ = 8."
    },
    "14": {
      "question": "What does Math.sqrt(25) return?",
      "options": [
        "5",
        "25",
        "2.5",
        "10"
      ],
      "level": "<easy>easy</easy>",
      "correct": "5",
      "explanation": "Math.sqrt(n) returns the square root of a number. The square root of 25 is 5."
    },
    "15": {
      "question": "What does Math.round(4.6) return?",
      "options": [
        "4",
        "5",
        "4.5",
        "6"
      ],
      "level": "<easy>easy</easy>",
      "correct": "5",
      "explanation": "Math.round() rounds a number to the nearest integer. 4.6 rounds to 5."
    },
    "16": {
      "question": "What does Math.ceil(4.2) return?",
      "options": [
        "4",
        "5",
        "4.5",
        "2"
      ],
      "level": "<easy>easy</easy>",
      "correct": "5",
      "explanation": "Math.ceil() always rounds a number UP to the nearest integer."
    },
    "17": {
      "question": "What does the = operator do in JavaScript?",
      "options": [
        "Compares two values",
        "Assigns a value to a variable",
        "Checks if values are equal with type",
        "Checks if values are equal without type"
      ],
      "level": "<easy>easy</easy>",
      "correct": "Assigns a value to a variable",
      "explanation": "The single = is the assignment operator, used to store a value in a variable."
    },
    "18": {
      "question": "What is the difference between == and === in JavaScript?",
      "options": [
        "== checks value only, === checks value and type",
        "Both are exactly the same",
        "=== only works with numbers",
        "== only works with strings"
      ],
      "level": "<easy>easy</easy>",
      "correct": "== checks value only, === checks value and type",
      "explanation": "== compares values with type conversion, while === checks both value and type strictly."
    },
    "19": {
      "question": "What does the != operator do?",
      "options": [
        "Checks if two values are equal",
        "Checks if two values are not equal",
        "Assigns a value",
        "Converts to a number"
      ],
      "level": "<easy>easy</easy>",
      "correct": "Checks if two values are not equal",
      "explanation": "!= returns true if the values are different, false if they are the same."
    },
    "20": {
      "question": "What does the += operator do in JavaScript?",
      "options": [
        "Subtracts and assigns a value",
        "Adds a value to a variable and assigns it",
        "Multiplies values",
        "Compares two numbers"
      ],
      "level": "<easy>easy</easy>",
      "correct": "Adds a value to a variable and assigns it",
      "explanation": "x += y means x = x + y. It's a shorthand for adding and reassigning."
    },
    "21": {
      "question": "What does the -= operator do in JavaScript?",
      "options": [
        "Adds a value to a variable",
        "Subtracts a value from a variable and assigns it",
        "Divides values",
        "Checks if values are equal"
      ],
      "level": "<easy>easy</easy>",
      "correct": "Subtracts a value from a variable and assigns it",
      "explanation": "x -= y means x = x - y. It subtracts y from x and assigns the result back."
    },
    "22": {
      "question": "What does the *= operator do?",
      "options": [
        "Adds two numbers",
        "Multiplies a variable by a value and assigns it",
        "Checks if values are not equal",
        "Divides and assigns"
      ],
      "level": "<easy>easy</easy>",
      "correct": "Multiplies a variable by a value and assigns it",
      "explanation": "x *= y means x = x * y. It multiplies and reassigns."
    },
    "23": {
      "question": "What does the /= operator do?",
      "options": [
        "Divides a variable by a value and assigns it",
        "Multiplies a variable",
        "Checks for strict equality",
        "Adds numbers together"
      ],
      "level": "<easy>easy</easy>",
      "correct": "Divides a variable by a value and assigns it",
      "explanation": "x /= y means x = x / y. It divides and reassigns."
    },
    "24": {
      "question": "What does the % operator do in JavaScript?",
      "options": [
        "Returns remainder after division",
        "Returns percentage of a number",
        "Adds decimals",
        "Rounds down numbers"
      ],
      "level": "<easy>easy</easy>",
      "correct": "Returns remainder after division",
      "explanation": "x % y returns the remainder after dividing x by y. Example: 10 % 3 = 1."
    },
    "25": {
      "question": "What does Math.abs(-7) return?",
      "options": [
        "-7",
        "7",
        "0",
        "NaN"
      ],
      "level": "<easy>easy</easy>",
      "correct": "7",
      "explanation": "Math.abs() returns the absolute (positive) value of a number."
    },
    "26": {
      "question": "What does Math.trunc(4.9) return?",
      "options": [
        "4",
        "5",
        "4.9",
        "0"
      ],
      "level": "<easy>easy</easy>",
      "correct": "4",
      "explanation": "Math.trunc() removes the decimal part of a number without rounding."
    },
    "27": {
      "question": "What does Math.PI represent in JavaScript?",
      "options": [
        "3.14 (the value of π)",
        "The largest integer",
        "Infinity",
        "Square root of 2"
      ],
      "level": "<easy>easy</easy>",
      "correct": "3.14 (the value of π)",
      "explanation": "Math.PI gives the value of π (pi), approximately 3.14159."
    },
    "28": {
      "question": "What is NaN in JavaScript?",
      "options": [
        "Not a Number, a result of invalid math",
        "Null value",
        "A type of variable",
        "Infinity"
      ],
      "level": "<easy>easy</easy>",
      "correct": "Not a Number, a result of invalid math",
      "explanation": "NaN means 'Not a Number'. Example: dividing 0/0 gives NaN."
    },
    "29": {
      "question": "What is Infinity in JavaScript?",
      "options": [
        "A very large number",
        "A special value greater than any number",
        "It means undefined",
        "A type of array"
      ],
      "level": "<easy>easy</easy>",
      "correct": "A special value greater than any number",
      "explanation": "Infinity represents a value larger than the largest possible number in JavaScript."
    },
    "30": {
      "question": "What does typeof operator do?",
      "options": [
        "Checks the type of a value",
        "Checks if values are equal",
        "Creates a new variable",
        "Rounds numbers"
      ],
      "level": "<easy>easy</easy>",
      "correct": "Checks the type of a value",
      "explanation": "typeof returns the data type of a value. Example: typeof 5 is 'number'."
    },
    "31": {
      "question": "What is the window object in JavaScript?",
      "options": [
        "It represents the browser window and provides built-in methods",
        "It is a way to declare variables",
        "It is only used for arrays",
        "It is a function declaration"
      ],
      "level": "<easy>easy</easy>",
      "correct": "It represents the browser window and provides built-in methods",
      "explanation": "The window object is the global object in browsers. It represents the browser window and contains methods like alert, prompt, and confirm."
    },
    "32": {
      "question": "What does window.alert() do?",
      "options": [
        "Shows a popup message box",
        "Asks user for input",
        "Closes the browser",
        "Converts values to string"
      ],
      "level": "<easy>easy</easy>",
      "correct": "Shows a popup message box",
      "explanation": "window.alert() displays a simple alert box with a message."
    },
    "33": {
      "question": "What does window.prompt() do?",
      "options": [
        "Shows a popup asking the user to enter text",
        "Displays a warning message",
        "Runs a function automatically",
        "Converts numbers to strings"
      ],
      "level": "<easy>easy</easy>",
      "correct": "Shows a popup asking the user to enter text",
      "explanation": "window.prompt() displays a dialog box that asks the user for input and returns it as a string."
    },
    "34": {
      "question": "What does window.confirm() return?",
      "options": [
        "Always a string",
        "True if OK is pressed, false if Cancel is pressed",
        "Always a number",
        "It does not return anything"
      ],
      "level": "<easy>easy</easy>",
      "correct": "True if OK is pressed, false if Cancel is pressed",
      "explanation": "window.confirm() shows a dialog with OK/Cancel and returns a boolean value."
    },
    "35": {
      "question": "How do we convert a string '123' into a number in JavaScript?",
      "options": [
        "Number('123')",
        "String('123')",
        "Boolean('123')",
        "parseString('123')"
      ],
      "level": "<easy>easy</easy>",
      "correct": "Number('123')",
      "explanation": "We can convert a string to a number using Number() or parseInt(). Example: Number('123') → 123."
    },
    "36": {
      "question": "How do we convert a number 0 into a boolean?",
      "options": [
        "Boolean(0)",
        "Number(0)",
        "String(0)",
        "parseInt(0)"
      ],
      "level": "<easy>easy</easy>",
      "correct": "Boolean(0)",
      "explanation": "Boolean(0) returns false, while Boolean(1) returns true."
    },
    "37": {
      "question": "What does String(123) return?",
      "options": [
        "123 as a number",
        "'123' as a string",
        "true",
        "NaN"
      ],
      "level": "<easy>easy</easy>",
      "correct": "'123' as a string",
      "explanation": "String() converts values to strings. Example: String(123) → '123'."
    },
    "38": {
      "question": "What is an if statement used for in JavaScript?",
      "options": [
        "To repeat code many times",
        "To create new variables",
        "To make decisions based on conditions",
        "To display a popup"
      ],
      "level": "<easy>easy</easy>",
      "correct": "To make decisions based on conditions",
      "explanation": "An if statement runs code only if a condition is true."
    },
    "39": {
      "question": "What does an else statement do?",
      "options": [
        "Runs code only when the if condition is true",
        "Runs code when the if condition is false",
        "Ends the program",
        "Declares a variable"
      ],
      "level": "<easy>easy</easy>",
      "correct": "Runs code when the if condition is false",
      "explanation": "The else block executes when the if condition is not true."
    },
    "40": {
      "question": "What is the correct syntax for an if...else statement?",
      "options": [
        "if (condition) { code } else { code }",
        "if condition then code else code",
        "if { condition } else { code }",
        "if (condition) => else { code }"
      ],
      "level": "<easy>easy</easy>",
      "correct": "if (condition) { code } else { code }",
      "explanation": "The correct syntax is: if (condition) { ... } else { ... }."
    },
    "41": {
      "question": "What happens if the condition in an if statement is false?",
      "options": [
        "The code inside the if block runs",
        "The code inside the if block is skipped",
        "The program stops completely",
        "It always runs the else block"
      ],
      "level": "<easy>easy</easy>",
      "correct": "The code inside the if block is skipped",
      "explanation": "If the condition is false, the code inside the if block is ignored."
    },
    "42": {
      "question": "Can an if statement have multiple else if blocks?",
      "options": [
        "Yes, you can use else if for multiple conditions",
        "No, only one else is allowed",
        "Yes, but only with switch",
        "No, JavaScript doesn't allow it"
      ],
      "level": "<easy>easy</easy>",
      "correct": "Yes, you can use else if for multiple conditions",
      "explanation": "You can chain multiple else if blocks to check several conditions."
    },
    "43": {
      "question": "What happens if none of the if or else if conditions are true but an else exists?",
      "options": [
        "The else block will run",
        "Nothing happens",
        "The program crashes",
        "The first condition runs anyway"
      ],
      "level": "<easy>easy</easy>",
      "correct": "The else block will run",
      "explanation": "If no condition is true, the else block runs as the default option."
    },
    "44": {
      "question": "What is the ternary operator in JavaScript?",
      "options": [
        "An operator that runs loops",
        "A shorthand for if...else",
        "A way to declare functions",
        "A type of switch statement"
      ],
      "level": "<easy>easy</easy>",
      "correct": "A shorthand for if...else",
      "explanation": "The ternary operator uses condition ? value1 : value2 as a shortcut for if...else."
    },
    "45": {
      "question": "What does the expression (5 > 3 ? 'Yes' : 'No') return?",
      "options": [
        "'Yes'",
        "'No'",
        "true",
        "false"
      ],
      "level": "<easy>easy</easy>",
      "correct": "'Yes'",
      "explanation": "Since 5 > 3 is true, the ternary operator returns 'Yes'."
    },
    "46": {
      "question": "What is the switch statement used for?",
      "options": [
        "To run code based on multiple possible cases",
        "To replace variables",
        "To repeat code",
        "To declare arrays"
      ],
      "level": "<easy>easy</easy>",
      "correct": "To run code based on multiple possible cases",
      "explanation": "A switch checks a value against many cases, and runs the matching one."
    },
    "47": {
      "question": "What keyword is used inside a switch case to stop execution?",
      "options": [
        "exit",
        "break",
        "stop",
        "return"
      ],
      "level": "<easy>easy</easy>",
      "correct": "break",
      "explanation": "The break statement stops the switch from running into the next case."
    },
    "48": {
      "question": "What is the main difference between if...else and switch?",
      "options": [
        "if...else checks multiple conditions, switch checks one value against cases",
        "switch is faster than if...else always",
        "if...else cannot compare numbers",
        "They are exactly the same"
      ],
      "level": "<easy>easy</easy>",
      "correct": "if...else checks multiple conditions, switch checks one value against cases",
      "explanation": "if...else is for conditions, while switch compares one value with different cases."
    },
    "49": {
      "question": "When should we use a ternary operator instead of if...else?",
      "options": [
        "When we need a short one-line decision",
        "When we want to compare many cases",
        "When we need loops",
        "When declaring variables"
      ],
      "level": "<easy>easy</easy>",
      "correct": "When we need a short one-line decision",
      "explanation": "The ternary operator is best for quick, simple conditions. For complex logic, use if...else."
    },
    "50": {
      "question": "What is a key difference between if...else, ternary, and switch?",
      "options": [
        "if...else handles conditions, ternary is shorthand for if...else, and switch is for checking one value against many options",
        "All three are exactly the same",
        "Ternary is faster than switch always",
        "Switch only works with numbers"
      ],
      "level": "<easy>easy</easy>",
      "correct": "if...else handles conditions, ternary is shorthand for if...else, and switch is for checking one value against many options",
      "explanation": "Each has its use: if...else for conditions, ternary for short expressions, and switch for multiple exact matches."
    },
    "51": {
      "question": "Can we chain multiple ternary operators together in JavaScript?",
      "options": [
        "Yes, but it can reduce readability",
        "No, only one ternary is allowed",
        "Yes, and it is always faster than if...else",
        "No, it will always throw an error"
      ],
      "level": "<medium>medium</medium>",
      "correct": "Yes, but it can reduce readability",
      "explanation": "You can chain multiple ternary operators to handle multiple conditions, but long chains can make code <hard>hard</hard>er to read."
    },
    "52": {
      "question": "What is a possible downside of chaining many ternary operators?",
      "options": [
        "It makes the code run slower",
        "It can make code confusing and <hard>hard</hard>er to read",
        "It is not supported in modern JavaScript",
        "It always causes an infinite loop"
      ],
      "level": "<medium>medium</medium>",
      "correct": "It can make code confusing and <hard>hard</hard>er to read",
      "explanation": "While ternary operators are useful, chaining too many can make the logic less clear compared to if...else or switch."
    },
    "53": {
      "question": "How can ternary operators simulate loops or repeated conditions?",
      "options": [
        "By chaining conditions that call functions repeatedly",
        "By using break and continue",
        "By nesting if statements inside",
        "By converting them to switch"
      ],
      "level": "<medium>medium</medium>",
      "correct": "By chaining conditions that call functions repeatedly",
      "explanation": "Ternary operators can be chained to repeatedly decide which function or expression to call, simulating loop-like behavior."
    },
    "54": {
      "question": "What does 'Hello World'.lastIndexOf('o') return?",
      "options": [
        "4",
        "7",
        "5",
        "-1"
      ],
      "level": "<medium>medium</medium>",
      "correct": "7",
      "explanation": "lastIndexOf finds the last occurrence of a character. The last 'o' in 'Hello World' is at index 7."
    },
    "55": {
      "question": "What does 'JavaScript'.startsWith('Java') return?",
      "options": [
        "true",
        "false",
        "null",
        "undefined"
      ],
      "level": "<medium>medium</medium>",
      "correct": "true",
      "explanation": "startsWith() checks if a string begins with a given substring. 'JavaScript' starts with 'Java'."
    },
    "56": {
      "question": "What does 'ReactJS'.endsWith('JS') return?",
      "options": [
        "true",
        "false",
        "null",
        "undefined"
      ],
      "level": "<medium>medium</medium>",
      "correct": "true",
      "explanation": "endsWith() checks if a string ends with a given substring. 'ReactJS' ends with 'JS'."
    },
    "57": {
      "question": "What does 'frontend developer'.includes('end') return?",
      "options": [
        "true",
        "false",
        "0",
        "-1"
      ],
      "level": "<medium>medium</medium>",
      "correct": "true",
      "explanation": "includes() checks if a substring exists inside a string. 'frontend developer' includes 'end'."
    },
    "58": {
      "question": "What does 'JavaScript'.slice(0, 4) return?",
      "options": [
        "'Java'",
        "'avaS'",
        "'Script'",
        "'ava'"
      ],
      "level": "<medium>medium</medium>",
      "correct": "'Java'",
      "explanation": "slice(start, end) extracts part of a string. From index 0 to 4 gives 'Java'."
    },
    "59": {
      "question": "What is the difference between slice() and substring()?",
      "options": [
        "slice allows negative indexes, substring does not",
        "substring is always faster",
        "slice works only with arrays",
        "They are exactly the same"
      ],
      "level": "<medium>medium</medium>",
      "correct": "slice allows negative indexes, substring does not",
      "explanation": "Both extract parts of a string, but slice() supports negative indexes while substring() doesn't."
    },
    "60": {
      "question": "What does '  hello world  '.trim() return?",
      "options": [
        "'hello world'",
        "'  hello world  '",
        "'world'",
        "'hello'"
      ],
      "level": "<medium>medium</medium>",
      "correct": "'hello world'",
      "explanation": "trim() removes whitespace from both ends of a string."
    },
    "61": {
      "question": "What does 'hello'.toUpperCase() return?",
      "options": [
        "'HELLO'",
        "'hello'",
        "'Hello'",
        "Error"
      ],
      "level": "<medium>medium</medium>",
      "correct": "'HELLO'",
      "explanation": "toUpperCase() converts all characters in a string to uppercase."
    },
    "62": {
      "question": "What does 'WORLD'.toLowerCase() return?",
      "options": [
        "'WORLD'",
        "'world'",
        "'World'",
        "undefined"
      ],
      "level": "<medium>medium</medium>",
      "correct": "'world'",
      "explanation": "toLowerCase() converts all characters in a string to lowercase."
    },
    "63": {
      "question": "What does 'a,b,c'.split(',') return?",
      "options": [
        "['a', 'b', 'c']",
        "'a b c'",
        "['abc']",
        "['a','b,c']"
      ],
      "level": "<medium>medium</medium>",
      "correct": "['a', 'b', 'c']",
      "explanation": "split() breaks a string into an array using the given separator."
    },
    "64": {
      "question": "What is method chaining in JavaScript?",
      "options": [
        "Calling multiple methods on the same value in one line",
        "Linking variables together",
        "Using multiple loops",
        "Combining arrays"
      ],
      "level": "<medium>medium</medium>",
      "correct": "Calling multiple methods on the same value in one line",
      "explanation": "Method chaining means using multiple methods one after another. Example: 'hello'.toUpperCase().split('')"
    },
    "65": {
      "question": "What does 'hello world'.toUpperCase().split(' ') return?",
      "options": [
        "['HELLO', 'WORLD']",
        "['hello', 'world']",
        "['HELLOWORLD']",
        "['hello world']"
      ],
      "level": "<medium>medium</medium>",
      "correct": "['HELLO', 'WORLD']",
      "explanation": "First toUpperCase() makes 'HELLO WORLD', then split(' ') creates an array of two words."
    },
    "66": {
      "question": "What does the && operator do?",
      "options": [
        "Returns true if both sides are true",
        "Returns true if one side is true",
        "Always returns false",
        "Converts values to numbers"
      ],
      "level": "<medium>medium</medium>",
      "correct": "Returns true if both sides are true",
      "explanation": "The logical AND (&&) returns true only when both expressions are true."
    },
    "67": {
      "question": "What does the || operator do?",
      "options": [
        "Returns true if both are true",
        "Returns true if at least one is true",
        "Always returns false",
        "Reverses a boolean"
      ],
      "level": "<medium>medium</medium>",
      "correct": "Returns true if at least one is true",
      "explanation": "The logical OR (||) returns true if either expression is true."
    },
    "68": {
      "question": "What does the ! operator do in JavaScript?",
      "options": [
        "Turns true into false and false into true",
        "Checks equality",
        "Adds numbers",
        "Loops through arrays"
      ],
      "level": "<medium>medium</medium>",
      "correct": "Turns true into false and false into true",
      "explanation": "The NOT operator (!) inverts a boolean value."
    },
    "69": {
      "question": "Which loop continues running as long as the condition is true?",
      "options": [
        "for loop",
        "while loop",
        "do loop",
        "switch loop"
      ],
      "level": "<medium>medium</medium>",
      "correct": "while loop",
      "explanation": "A while loop keeps executing until its condition becomes false."
    },
    "70": {
      "question": "What does this while loop print?: let i = 0; while(i < 3){ console.log(i); i++;}",
      "options": [
        "0 1 2",
        "1 2 3",
        "0 1 2 3",
        "Infinite loop"
      ],
      "level": "<medium>medium</medium>",
      "correct": "0 1 2",
      "explanation": "The loop runs while i < 3, printing 0, 1, and 2."
    },
    "71": {
      "question": "Which loop runs a block of code a fixed number of times?",
      "options": [
        "for loop",
        "while loop",
        "switch",
        "if statement"
      ],
      "level": "<medium>medium</medium>",
      "correct": "for loop",
      "explanation": "A for loop is commonly used to run code a set number of times, like iterating through an array."
    },
    "72": {
      "question": "What does this for loop print?\n\nfor(let i=0; i<3; i++){\n console.log(i);\n}",
      "options": [
        "0 1 2",
        "1 2 3",
        "0 1 2 3",
        "Infinite loop"
      ],
      "level": "<medium>medium</medium>",
      "correct": "0 1 2",
      "explanation": "The loop starts at 0, runs while i < 3, and increments i each time."
    },
    "73": {
      "question": "Which loop runs at least once, even if the condition is false?",
      "options": [
        "for loop",
        "while loop",
        "do...while loop",
        "switch"
      ],
      "level": "<medium>medium</medium>",
      "correct": "do...while loop",
      "explanation": "A do...while loop executes the block first, then checks the condition, so it always runs at least once."
    },
    "74": {
      "question": "What does this code print?\n\nlet i = 5;\ndo {\n console.log(i);\n i++;\n} while(i < 5);",
      "options": [
        "Nothing",
        "5",
        "5 6",
        "Infinite loop"
      ],
      "level": "<medium>medium</medium>",
      "correct": "5",
      "explanation": "The do...while loop runs once before checking the condition, so it prints 5 even though i < 5 is false."
    },
    "75": {
      "question": "What is a function declaration in JavaScript?",
      "options": [
        "A function defined using the function keyword with a name",
        "A function stored inside a variable",
        "A method inside an object",
        "A built-in method"
      ],
      "level": "<medium>medium</medium>",
      "correct": "A function defined using the function keyword with a name",
      "explanation": "A function declaration defines a named function, like function greet() { return 'Hello'; }"
    },
    "76": {
      "question": "What is a function expression?",
      "options": [
        "A function defined and stored in a variable",
        "A method inside Math",
        "A loop with return",
        "An arrow function only"
      ],
      "level": "<medium>medium</medium>",
      "correct": "A function defined and stored in a variable",
      "explanation": "A function expression creates a function and assigns it to a variable, e.g., const greet = function() { return 'Hi'; }"
    },
    "77": {
      "question": "Which array method creates a new array by transforming each element?",
      "options": [
        "map()",
        "filter()",
        "reduce()",
        "forEach()"
      ],
      "level": "<medium>medium</medium>",
      "correct": "map()",
      "explanation": "map() applies a function to each element and returns a new array."
    },
    "78": {
      "question": "Which array method creates a new array with elements that pass a test?",
      "options": [
        "map()",
        "filter()",
        "reduce()",
        "slice()"
      ],
      "level": "<medium>medium</medium>",
      "correct": "filter()",
      "explanation": "filter() checks each element and only keeps those that meet the condition."
    },
    "79": {
      "question": "Which array method reduces all values into a single value?",
      "options": [
        "map()",
        "filter()",
        "reduce()",
        "concat()"
      ],
      "level": "<medium>medium</medium>",
      "correct": "reduce()",
      "explanation": "reduce() processes all array elements and combines them into a single value, like a sum."
    },
    "80": {
      "question": "What is the difference between map() and forEach()?",
      "options": [
        "map() returns a new array, forEach() does not",
        "forEach() is faster",
        "map() changes the original array, forEach() does not",
        "They are exactly the same"
      ],
      "level": "<medium>medium</medium>",
      "correct": "map() returns a new array, forEach() always returns undefined",
      "explanation": "map() builds and returns a new array, while forEach() only executes code on each element (Its sole purpose is to execute a callback function on each element of the array, but it does not create a new array)."
    },
    "81": {
      "question": "Which array method returns the first element that matches a condition?",
      "options": [
        "filter()",
        "find()",
        "map()",
        "reduce()"
      ],
      "level": "<medium>medium</medium>",
      "correct": "find()",
      "explanation": "find() returns the first element that satisfies the condition, while filter() returns all matches."
    },
    "82": {
      "question": "Which array method checks if at least one element matches a condition?",
      "options": [
        "every()",
        "some()",
        "find()",
        "includes()"
      ],
      "level": "<medium>medium</medium>",
      "correct": "some()",
      "explanation": "some() returns true if at least one element passes the test."
    },
    "83": {
      "question": "Which array method checks if all elements match a condition?",
      "options": [
        "filter()",
        "every()",
        "some()",
        "map()"
      ],
      "level": "<medium>medium</medium>",
      "correct": "every()",
      "explanation": "every() returns true only if all elements satisfy the condition."
    },
    "84": {
      "question": "Which array method checks if an array contains a specific value?",
      "options": [
        "find()",
        "some()",
        "includes()",
        "concat()"
      ],
      "level": "<medium>medium</medium>",
      "correct": "includes()",
      "explanation": "includes() returns true if the array contains the given value."
    },
    "85": {
      "question": "Which array method returns the index of the first matching element?",
      "options": [
        "indexOf()",
        "find()",
        "filter()",
        "slice()"
      ],
      "level": "<medium>medium</medium>",
      "correct": "indexOf()",
      "explanation": "indexOf() returns the position of the first occurrence of a value in the array."
    },
    "86": {
      "question": "Which array method removes the last element?",
      "options": [
        "pop()",
        "push()",
        "shift()",
        "unshift()"
      ],
      "level": "<medium>medium</medium>",
      "correct": "pop()",
      "explanation": "pop() removes the last element and returns it."
    },
    "87": {
      "question": "Which array method adds an element to the end?",
      "options": [
        "pop()",
        "push()",
        "shift()",
        "concat()"
      ],
      "level": "<medium>medium</medium>",
      "correct": "push()",
      "explanation": "push() adds one or more elements to the end of an array."
    },
    "88": {
      "question": "Which array method flattens nested arrays into a single array?",
      "options": [
        "map()",
        "flat()",
        "reduce()",
        "slice()"
      ],
      "level": "<medium>medium</medium>",
      "correct": "flat()",
      "explanation": "flat() creates a new array by flattening nested arrays into a single level."
    },
    "89": {
      "question": "Which array method sorts elements in place?",
      "options": [
        "sort()",
        "reverse()",
        "map()",
        "filter()"
      ],
      "level": "<medium>medium</medium>",
      "correct": "sort()",
      "explanation": "sort() sorts the elements of an array in place and returns the sorted array."
    },
    "90": {
      "question": "Which array method reverses the order of elements?",
      "options": [
        "reverse()",
        "sort()",
        "slice()",
        "splice()"
      ],
      "level": "<medium>medium</medium>",
      "correct": "reverse()",
      "explanation": "reverse() reverses the elements of an array in place."
    },
    "91": {
    "question": "What does the spread operator (...) do in JavaScript arrays?",
    "options": [
      "Copies all elements of an array into a new array",
      "Deletes elements",
      "Adds numbers together",
      "Loops through the array"
    ],
    "level": "<medium>medium</medium>",
    "correct": "Copies all elements of an array into a new array",
    "explanation": "The spread operator expands an array's elements into a new array or function arguments."
    },
    "92": {
      "question": "Does the spread operator create a shallow copy or reference of the array?",
      "options": [
        "Shallow copy",
        "Deep copy",
        "Reference only",
        "It deletes the original"
      ],
      "level": "<medium>medium</medium>",
      "correct": "Shallow copy",
      "explanation": "The spread operator creates a shallow copy, meaning nested objects or arrays are still referenced."
    },
    "93": {
      "question": "What is the difference between copying an array with = and with ...?",
      "options": [
        "= copies the reference, ... copies elements",
        "= copies elements, ... copies reference",
        "Both do the same",
        "Only ... works for arrays"
      ],
      "level": "<medium>medium</medium>",
      "correct": "= copies the reference, ... copies elements",
      "explanation": "Assigning an array with = points to the same reference; spread creates a new array with copied elements."
    },
    "94": {
      "question": "What is the syntax of an arrow function with one parameter?",
      "options": [
        "(x) => x * 2",
        "function(x) { return x*2 }",
        "x => return x*2",
        "x => {x*2}"
      ],
      "level": "<medium>medium</medium>",
      "correct": "(x) => x * 2",
      "explanation": "Arrow functions with one parameter can omit parentheses(meaning no need for-{} for one argument in arrow function), we can directly return an expression."
    },
    "95": {
      "question": "Which is a key difference between arrow functions and normal functions?",
      "options": [
        "Arrow functions do not have their own 'this'",
        "Arrow functions cannot return values",
        "Normal functions cannot accept arguments",
        "Arrow functions always run asynchronously"
      ],
      "level": "<medium>medium</medium>",
      "correct": "Arrow functions do not have their own 'this'",
      "explanation": "Arrow functions inherit 'this' from their surrounding scope, unlike normal functions."
    },
    "96": {
      "question": "How do you write an arrow function with multiple parameters?",
      "options": [
        "(a, b) => a + b",
        "a, b => a + b",
        "function(a, b) => a+b",
        "(a, b) => {return a+b}"
      ],
      "level": "<medium>medium</medium>",
      "correct": "(a, b) => a + b",
      "explanation": "Multiple parameters must be wrapped in parentheses, and the arrow function can return a value directly."
    },
    "97": {
      "question": "What does 'this' refer to in a normal function called inside an object method?",
      "options": [
        "The object itself",
        "The global object",
        "Always undefined",
        "The first parameter"
      ],
      "level": "<medium>medium</medium>",
      "correct": "The object itself",
      "explanation": "'this' in a method refers to the object calling the method."
    },
    "98": {
      "question": "What does 'this' refer to in a regular function called alone?",
      "options": [
        "Global object (window in browser)",
        "The object it was created in",
        "The arrow function nearby",
        "Always null"
      ],
      "level": "<medium>medium</medium>",
      "correct": "Global object (window in browser)",
      "explanation": "A standalone function's 'this' points to the global object in non-strict mode, or undefined in strict mode."
    },
    "99": {
      "question": "Can arrow functions be used as object methods?",
      "options": [
        "Yes, but 'this' will not refer to the object",
        "Yes, 'this' works normally",
        "No, arrow functions cannot be in objects",
        "Only if the object is an array"
      ],
      "level": "<medium>medium</medium>",
      "correct": "Yes, but 'this' will not refer to the object",
      "explanation": "Arrow functions inherit 'this' from the parent scope, so they don't have their own context inside objects."
    },
    "100": {
      "question": "Which is a correct way to copy an array using the spread operator?",
      "options": [
        "let newArr = [...oldArr]",
        "let newArr = oldArr",
        "let newArr = oldArr.copy()",
        "let newArr = oldArr{}"
      ],
      "level": "<medium>medium</medium>",
      "correct": "let newArr = [...oldArr]",
      "explanation": "The spread operator creates a new array with the same elements: [...oldArr]."
    },
    "101": {
      "question": "What's the class in javascript?",
      "options": [
        "A blueprint for creating objects",
        "A function that always returns a number",
        "An array of functions",
        "A keyword to declare variables"
      ],
      "level": "<medium>medium</medium>",
      "correct": "A blueprint for creating objects",
      "explanation": "Classes provide a template for creating objects with shared properties and methods."
    },
    "102": {
      "question": "How to create an object from the class?",
      "options": [
        "let obj = new ClassName()",
        "let obj = ClassName()",
        "let obj = ClassName.new()",
        "let obj = create ClassName()"
      ],
      "level": "<medium>medium</medium>",
      "correct": "let obj = new ClassName()",
      "explanation": "The 'new' keyword creates an instance of a class."
    },
    "103": {
      "question": "What's the Inheritance in Javascripts classes?",
      "options": [
        "A class can extend another class and reuse its properties/methods",
        "A class can copy an array",
        "A function inside a class",
        "Assigning a variable to another"
      ],
      "level": "<medium>medium</medium>",
      "correct": "A class can extend another class and reuse its properties/methods",
      "explanation": "Inheritance allows a class to reuse code from a parent class using the 'extends' keyword."
    },
    "104": {
      "question": "What does a keyword 'super' do?",
      "options": [
        "Calls the constructor or methods of the parent class",
        "Creates a new object",
        "Deletes parent methods",
        "Assigns a variable"
      ],
      "level": "<medium>medium</medium>",
      "correct": "Calls the constructor or methods of the parent class",
      "explanation": "super() can call the parent class constructor, and super.method() calls a parent method."
    },
    "105": {
      "question": "How to define a 'Getter' in classes?",
      "options": [
        "get propertyName() { return this.value }",
        "getter propertyName() { return this.value }",
        "function get(propertyName) { return this.value }",
        "set propertyName() { this.value }"
      ],
      "level": "<medium>medium</medium>",
      "correct": "get propertyName() { return this.value }",
      "explanation": "Getters allow you to define a method that is accessed like a property."
    },
    "106": {
      "question": "How to define a 'Setter' in classes?",
      "options": [
        "set propertyName(value) { this.value = value }",
        "setter propertyName(value) { this.value = value }",
        "function set(propertyName, value) { this.value = value }",
        "get propertyName(value) { this.value = value }"
      ],
      "level": "<medium>medium</medium>",
      "correct": "set propertyName(value) { this.value = value }",
      "explanation": "Setters allow you to assign a value to a property while executing custom code."
    },
    "107": {
      "question": "Which keyword is used to extend the class?",
      "options": [
        "extends",
        "super",
        "inherit",
        "class"
      ],
      "level": "<medium>medium</medium>",
      "correct": "extends",
      "explanation": "The 'extends' keyword allows a class to inherit from another class."
    },
    "108": {
      "question": "Can a child class access parent methods without redefining them?",
      "options": [
        "Yes, via inheritance",
        "No, you must redefine all methods",
        "Only static methods",
        "Only getters and setters"
      ],
      "level": "<medium>medium</medium>",
      "correct": "Yes, via inheritance",
      "explanation": "Child classes automatically inherit non-private methods from the parent class."
    },
    "109": {
      "question": "What happens if we call super() in the constructor of a child class?",
      "options": [
        "It calls the parent class constructor",
        "It calls the child constructor recursively",
        "It creates a new object",
        "It throws an error"
      ],
      "level": "<medium>medium</medium>",
      "correct": "It calls the parent class constructor",
      "explanation": "super() in a constructor executes the parent constructor and allows proper initialization."
    },
    "110": {
      "question": "what do 'Getter' and 'Setter' to in class, and why do we need them?",
      "options": [
        "To control access to properties and run additional logic",
        "To store arrays",
        "To declare variables",
        "To call super methods"
      ],
      "level": "<medium>medium</medium>",
      "correct": "To control access to properties and run additional logic",
      "explanation": "Getters and setters allow controlled reading/writing of properties and can include validation or computed values."
    },
    "111": {
      "question": "Which of the following can we use to get an array whose first letter is capitalized?",
      "options": [
        "let arr = ['hello']; arr[0].toUpperCase();",
        "let arr = ['hello']; arr.first().toUpperCase();",
        "let arr = ['hello']; arr.toUpperCase(0);",
        "let arr = ['hello']; arr[1].toUpperCase();"
      ],
      "level": "<medium>medium</medium>",
      "correct": "let arr = ['hello']; arr[0].toUpperCase();",
      "explanation": "The first element of an array is at index 0, and strings have a toUpperCase() method."
    },
    "112": {
      "question": "Which option from the list will result in the first letter of the entry being capitalized and the rest being written in lowercase?",
      "options": [
        "let str = 'jAVaScRIPt'; str[0].toUpperCase() + str.slice(1).toLowerCase();",
        "let str = 'jAVaScRIPt'; str.capitalize();",
        "let str = 'jAVaScRIPt'; str.upperFirst();",
        "let str = 'jAVaScRIPt'; str.toUpperCaseFirst();"
      ],
      "level": "<medium>medium</medium>",
      "correct": "let str = 'jAVaScRIPt'; str[0].toUpperCase() + str.slice(1).toLowerCase();",
      "explanation": "We use toUpperCase() for the first char, then slice() and toLowerCase() for the rest."
    },
    "113": {
      "question": "How do we chain methods together to reduce spaces and make the string lowercase?",
      "options": [
        "'  HELLO  '.trim().toLowerCase();  // trim first, then lowercase",
        "'  HELLO  '.toLowerCase().trim();  // lowercase first, then trim",
        "Both trim().toLowerCase() and toLowerCase().trim() work the same",
        "'  HELLO  '.lowercase().trim();  // invalid method"
      ],
      "level": "<medium>medium</medium>",
      "correct": "Both trim().toLowerCase() and toLowerCase().trim() work the same",
      "explanation": "Both orders work because trimming spaces and converting case are independent operations."
    },
    "114": {
      "question": "How can we get an element in the DOM with an ID called 'title'?",
      "options": [
        "document.getElementById('title')  // traditional method",
        "document.querySelector('#title')  // CSS-style selector",
        "Both getElementById and querySelector('#title') are correct",
        "document.getById('title')  // not valid"
      ],
      "level": "<medium>medium</medium>",
      "correct": "Both getElementById and querySelector('#title') are correct",
      "explanation": "Both getElementById() and querySelector('#id') can select an element by ID, though querySelector is more flexible, and don't forget to use selector symbol # or . while using this method."
    },
    "115": {
      "question": "Which method will allow us to select the first paragraph on a page?",
      "options": [
        "document.querySelector('p')",
        "document.getElementByTag('p')",
        "document.select('p')",
        "document.querySelect('p')"
      ],
      "level": "<medium>medium</medium>",
      "correct": "document.querySelector('p')",
      "explanation": "querySelector() selects the first element matching the CSS selector."
    },
    "116": {
      "question": "Which method will allow us to select all elements of a paragraph on a page?",
      "options": [
        "document.querySelectorAll('p')  // returns NodeList of <p>",
        "document.getElementsByTagName('p')  // returns HTMLCollection of <p>",
        "Both querySelectorAll and getElementsByTagName work for selecting <p>",
        "document.getAll('p')  // invalid method"
      ],
      "level": "<medium>medium</medium>",
      "correct": "Both querySelectorAll and getElementsByTagName work for selecting <p>",
      "explanation": "querySelectorAll() returns a NodeList, getElementsByTagName() returns an HTMLCollection. Both can select <p> elements."
    },
    "117": {
      "question": "Which JavaScript method is used to scroll, in this case all the way up?",
      "options": [
        "window.scrollTo({ top: 0, behavior: 'smooth' });",
        "document.scrollTo(0);",
        "window.scrollSmooth(0);",
        "document.scroll({top: 0});"
      ],
      "level": "<medium>medium</medium>",
      "correct": "window.scrollTo({ top: 0, behavior: 'smooth' });",
      "explanation": "scrollTo() with options allows smooth scrolling to a specific position."
    },
    "118": {
      "question": "How do we add a click event to a button whose ID is 'btn'?",
      "options": [
        "document.getElementById('btn').addEventListener('click', () => { console.log('Clicked'); });",
        "document.querySelector('btn').onClick = () => { console.log('Clicked'); };",
        "button('btn').click(() => { console.log('Clicked'); });",
        "document.addEvent('btn', 'click', () => { console.log('Clicked'); });"
      ],
      "level": "<medium>medium</medium>",
      "correct": "document.getElementById('btn').addEventListener('click', () => { console.log('Clicked'); });",
      "explanation": "addEventListener() attaches an event handler to the button."
    },
    "119": {
      "question": "How to prevent form page from refreshing after submission?",
      "options": [
        "form.addEventListener('submit', (e) => { e.preventDefault(); });",
        "form.onsubmit = false;",
        "form.stop();",
        "return false;"
      ],
      "level": "<medium>medium</medium>",
      "correct": "form.addEventListener('submit', (e) => { e.preventDefault(); });",
      "explanation": "preventDefault() stops the default behavior, such as reloading the page on form submit."
    },
    "120": {
      "question": "How to change the text content of an element whose ID is 'msg'?",
      "options": [
        "document.getElementById('msg').textContent = 'Hello!';  // preferred",
        "document.getElementById('msg').innerText = 'Hello!';  // also works",
        "Both textContent and innerText can update text inside an element",
        "document.querySelector('msg').text = 'Hello!';  // invalid method"
      ],
      "level": "<medium>medium</medium>",
      "correct": "Both textContent and innerText can update text inside an element",
      "explanation": "Both textContent and innerText work, but textContent is faster and more consistent."
    },
    "121": {
      "question": "What impact does an API have in web programming?",
      "options": [
        "It designs the HTML layout of the page",
        "It allows applications to communicate and exchange data",
        "It is only used for styling with CSS",
        "It stores data permanently in the browser"
      ],
      "level": "<medium>medium</medium>",
      "correct": "It allows applications to communicate and exchange data",
      "explanation": "API stands for Application Programming Interface. It lets your app talk to servers or services to send and receive data."
    },
    "122": {
      "question": "Which JavaScript method is most commonly used to request data from an API?",
      "options": [
        "console.log()",
        "fetch()",
        "document.querySelector()",
        "Math.random()"
      ],
      "level": "<medium>medium</medium>",
      "correct": "fetch()",
      "explanation": "fetch() is a built-in JavaScript function for making HTTP requests to APIs and servers."
    },
    "123": {
      "question": "When using fetch(), what type of data is usually returned from an API?",
      "options": [
        "HTML",
        "JSON",
        "CSS",
        "XML only"
      ],
      "level": "<medium>medium</medium>",
      "correct": "JSON",
      "explanation": "Most modern APIs return data in JSON format because it's lightweight and easy for JavaScript to parse."
    },
    "124": {
      "question": "How do we convert a fetch() response into usable JSON?",
      "options": [
        "response.toJSON()",
        "response.parse()",
        "response.json()",
        "response.JSON()"
      ],
      "level": "<medium>medium</medium>",
      "correct": "response.json()",
      "explanation": "After calling fetch(), you must use response.json() to convert the response into a usable JavaScript object."
    },
    "125": {
      "question": "How do we handle errors in fetch requests?",
      "options": [
        "By using .catch() after fetch",
        "By reloading the page",
        "By writing try...catch inside HTML",
        "By disabling JavaScript"
      ],
      "level": "<medium>medium</medium>",
      "correct": "By using .catch() after fetch",
      "explanation": "fetch() returns a Promise, so you handle errors using .catch() or try...catch with async/await."
    },
    "126": {
      "question": "Which is the modern way to handle asynchronous API calls?",
      "options": [
        "Callbacks",
        "async/await",
        "setInterval",
        "alert()"
      ],
      "level": "<medium>medium</medium>",
      "correct": "async/await",
      "explanation": "async/await makes asynchronous code more readable and is widely used for API calls in modern JavaScript."
    },
    "127": {
      "question": "What does JSON.stringify() do when working with APIs?",
      "options": [
        "It converts JavaScript objects into a JSON string",
        "It converts JSON into JavaScript",
        "It removes spaces from strings",
        "It executes JavaScript code"
      ],
      "level": "<medium>medium</medium>",
      "correct": "It converts JavaScript objects into a JSON string",
      "explanation": "APIs often require data in JSON string format, so JSON.stringify() is used when sending data."
    },
    "128": {
      "question": "What does JSON.parse() do when working with API data?",
      "options": [
        "Converts JSON string into a JavaScript object",
        "Converts numbers into strings",
        "Removes white spaces",
        "Saves data to localStorage"
      ],
      "level": "<medium>medium</medium>",
      "correct": "Converts JSON string into a JavaScript object",
      "explanation": "APIs return data as JSON strings. JSON.parse() converts them into JavaScript objects you can use."
    },
    "129": {
      "question": "How do we store an object, for example {name: 'Luka'}, in localStorage?",
      "options": [
        "localStorage.setItem('user', {name: 'Luka'})",
        "localStorage.setItem('user', JSON.stringify({name: 'Luka'}))",
        "localStorage.save('user', 'Luka')",
        "localStorage.push({name: 'Luka'})"
      ],
      "level": "<medium>medium</medium>",
      "correct": "localStorage.setItem('user', JSON.stringify({name: 'Luka'}))",
      "explanation": "localStorage only stores strings. Use JSON.stringify() to convert objects before saving."
    },
    "130": {
      "question": "How do we retrieve an object already stored in localStorage, like {name: 'Luka'}?",
      "options": [
        "localStorage.getItem('user')",
        "JSON.parse(localStorage.getItem('user'))",
        "localStorage.load('user')",
        "localStorage.getObject('user')"
      ],
      "level": "<medium>medium</medium>",
      "correct": "JSON.parse(localStorage.getItem('user'))",
      "explanation": "localStorage stores everything as strings. Use JSON.parse() to convert the stored string back into an object."
    },
    "131": {
      "question": "How do we send data to an API using fetch (e.g., POST request)?",
      "options": [
        "fetch(url, { method: 'POST', body: JSON.stringify(data) })",
        "fetch.send(url, data)",
        "document.write(data)",
        "fetch(url).post(data)"
      ],
      "level": "<medium>medium</medium>",
      "correct": "fetch(url, { method: 'POST', body: JSON.stringify(data) })",
      "explanation": "When sending data, fetch requires the method ('POST') and the body, usually converted to JSON with JSON.stringify()."
    },
    "132": {
      "question": "Why do developers use APIs in real-time projects?",
      "options": [
        "To decorate pages with CSS",
        "To get or send data from servers or third-party services",
        "To avoid writing JavaScript",
        "To create random numbers only"
      ],
      "level": "<medium>medium</medium>",
      "correct": "To get or send data from servers or third-party services",
      "explanation": "APIs let developers integrate data and services, such as weather, maps, payments, or authentication, into their applications."
    },
    "133": {
      "question": "How do we debounce a function in JavaScript (limit its execution frequency)?",
      "options": [
        "Wrap it in setTimeout and clearTimeout before calling",
        "Use setInterval instead of calling directly",
        "Call the function multiple times quickly",
        "Add await before the function"
      ],
      "level": "<medium>medium</medium>",
      "correct": "Wrap it in setTimeout and clearTimeout before calling",
      "explanation": "Debouncing ensures a function only runs after a pause in repeated calls, often used in search inputs or resize events."
    },
    "134": {
      "question": "Which array method is best for finding the first element that meets a condition?",
      "options": [
        "map()",
        "filter()",
        "find()",
        "forEach()"
      ],
      "level": "<medium>medium</medium>",
      "correct": "find()",
      "explanation": "find() returns the first element that matches a condition, while filter() returns all matches."
    },
    "135": {
      "question": "What is the main difference between double equality ('==') and strict equality ('===')?",
      "options": [
        "== compares values with type conversion, === compares values without type conversion",
        "They are identical in all cases",
        "=== is slower than ==",
        "== only works with numbers"
      ],
      "level": "<medium>medium</medium>",
      "correct": "== compares values with type conversion, === compares values without type conversion",
      "explanation": "=== is strict equality (no type conversion), while == does type coercion."
    },
    "136": {
      "question": "How can we copy an array without modifying the original?",
      "options": [
        "let copy = original;",
        "let copy = [...original];",
        "let copy = original.copy();",
        "let copy = new Array(original)"
      ],
      "level": "<medium>medium</medium>",
      "correct": "let copy = [...original];",
      "explanation": "Using the spread operator creates a shallow copy of an array without modifying the original."
    },
    "137": {
      "question": "Which method is used to merge two arrays?",
      "options": [
        "concat()",
        "merge()",
        "append()",
        "combine()"
      ],
      "level": "<medium>medium</medium>",
      "correct": "concat()",
      "explanation": "concat() joins two arrays and returns a new array without altering the originals."
    },
    "138": {
      "question": "What is the purpose of the optional chaining operator (?.)?",
      "options": [
        "It prevents errors if a property doesn't exist",
        "It converts undefined values into empty strings",
        "It only works with arrays",
        "It forces a value to be true"
      ],
      "level": "<medium>medium</medium>",
      "correct": "It prevents errors if a property doesn't exist",
      "explanation": "Optional chaining (?.) safely accesses deeply nested properties without throwing errors if a property is missing."
    },
    "139": {
      "question": "How do we stop a setInterval loop?",
      "options": [
        "clearTimeout()",
        "stopInterval()",
        "clearInterval()",
        "break"
      ],
      "level": "<medium>medium</medium>",
      "correct": "clearInterval()",
      "explanation": "setInterval() is stopped using clearInterval() with the interval ID."
    },
    "140": {
      "question": "What does event delegation mean in JavaScript?",
      "options": [
        "Attaching one event listener to a parent to handle events on its children",
        "Creating multiple listeners on every child element",
        "Delaying events until needed",
        "Preventing default browser actions"
      ],
      "level": "<medium>medium</medium>",
      "correct": "Attaching one event listener to a parent to handle events on its children",
      "explanation": "Event delegation improves performance by listening on a parent element and handling child events via event bubbling."
    },
    "141": {
      "question": "Which loop guarantees that the block executes at least once?",
      "options": [
        "for loop",
        "while loop",
        "do...while loop",
        "forEach loop"
      ],
      "level": "<medium>medium</medium>",
      "correct": "do...while loop",
      "explanation": "A do...while loop executes its block at least once before checking the condition."
    },
    "142": {
      "question": "How can we create a deep copy of an object in modern JavaScript?",
      "options": [
        "let copy = {...obj};",
        "let copy = JSON.parse(JSON.stringify(obj));",
        "let copy = obj;",
        "let copy = obj.clone();"
      ],
      "level": "<medium>medium</medium>",
      "correct": "let copy = JSON.parse(JSON.stringify(obj));",
      "explanation": "Using JSON.parse(JSON.stringify(obj)) creates a deep copy by converting the object to a string and back."
    },
    "143": {
      "question": "What does the new Date() function return in JavaScript?",
      "options": [
        "A string of the current date and time",
        "An object representing the current date and time",
        "The number of seconds since 1975",
        "Undefined"
      ],
      "level": "<medium>medium</medium>",
      "correct": "An object representing the current date and time",
      "explanation": "new Date() creates a Date object containing the current date and time, which you can format or extract values from."
    },
    "144": {
      "question": "How can we get the current year from a Date object?",
      "options": [
        "new Date().getYear()",
        "new Date().getFullYear()",
        "new Date().year()",
        "Date.now().year"
      ],
      "level": "<medium>medium</medium>",
      "correct": "new Date().getFullYear()",
      "explanation": "getFullYear() returns the 4-digit year from a Date object. getYear() is deprecated."
    },
    "145": {
      "question": "How can we get the current month as a number (0-11) from a Date object?",
      "options": [
        "new Date().getMonth()",
        "new Date().getMonthNumber()",
        "new Date().month()",
        "Date.getMonth()"
      ],
      "level": "<medium>medium</medium>",
      "correct": "new Date().getMonth()",
      "explanation": "getMonth() returns a zero-based index (0 = January, 11 = December)."
    },
    "146": {
      "question": "What do we get when running: new Date(0)?",
      "options": [
        "January 1, 1970, 00:00:00 UTC",
        "January 1, 2000",
        "The first day of the year in the local timezone",
        "Invalid Date"
      ],
      "level": "<medium>medium</medium>",
      "correct": "January 1, 1970, 00:00:00 UTC",
      "explanation": "Date objects in JavaScript count milliseconds since Jan 1, 1970 UTC."
    },
    "147": {
      "question": "How do we get the day of the month from a Date object?",
      "options": [
        "new Date().getDay()",
        "new Date().getDate()",
        "new Date().day()",
        "new Date().getMonth()"
      ],
      "level": "<medium>medium</medium>",
      "correct": "new Date().getDate()",
      "explanation": "getDate() returns the day of the month (1-31). getDay() returns the day of the week (0-6)."
    },
    "148": {
      "question": "How can we format a Date object as a readable string?",
      "options": [
        "new Date().toString()",
        "new Date().toDateString()",
        "new Date().toLocaleDateString()",
        "All of the above"
      ],
      "level": "<medium>medium</medium>",
      "correct": "All of the above",
      "explanation": "JavaScript provides several methods to convert a Date object to a string for display."
    },
    "149": {
      "question": "What does setTimeout do?",
      "options": [
        "Runs a function immediately",
        "Schedules a function to run after a delay",
        "Stops a function",
        "Repeats a function indefinitely"
      ],
      "level": "<medium>medium</medium>",
      "correct": "Schedules a function to run after a delay",
      "explanation": "setTimeout schedules a function to run once after the specified milliseconds."
    },
    "150": {
      "question": "Why might we need to use clearTimeout?",
      "options": [
        "To cancel a scheduled function before it runs",
        "To repeat a timeout function",
        "To speed up a timeout",
        "It's only needed for animations"
      ],
      "level": "<medium>medium</medium>",
      "correct": "To cancel a scheduled function before it runs",
      "explanation": "clearTimeout(timerId) stops the function scheduled by setTimeout. Useful to prevent unnecessary code execution, like scroll events in React."
    },
    "151": {
      "question": "How do we set a timeout and then cancel it?",
      "options": [
        "let timer = setTimeout(fn, 1000); clearTimeout(timer);",
        "setTimeout(fn, 1000).stop();",
        "setTimeout(fn, 1000).clear();",
        "let timer = setTimeout(fn, 1000); timer.cancel();"
      ],
      "level": "<medium>medium</medium>",
      "correct": "let timer = setTimeout(fn, 1000); clearTimeout(timer);",
      "explanation": "You need to store the timer ID and pass it to clearTimeout() to cancel the scheduled function."
    },
    "152": {
      "question": "How can we get the number of milliseconds elapsed since January 1, 1970?",
      "options": [
        "new Date().getTime()",
        "Date.now()",
        "Both Date().getTime() and Date.now() work",
        "None"
      ],
      "level": "<medium>medium</medium>",
      "correct": "Both Date().getTime() and Date.now() work",
      "explanation": "Date.now() returns the timestamp in milliseconds. getTime() does the same from a Date object."
    },
    "153": {
      "question": "How do we create a function that repeats every 2 seconds?",
      "options": [
        "setTimeout(fn, 2000)",
        "setInterval(fn, 2000)",
        "while(true) fn()",
        "setRepeat(fn, 2000)"
      ],
      "level": "<medium>medium</medium>",
      "correct": "setInterval(fn, 2000)",
      "explanation": "setInterval schedules a function to run repeatedly at the specified interval."
    },
    "154": {
      "question": "How do we stop a setInterval loop after a condition is met?",
      "options": [
        "clearInterval(intervalId)",
        "stopInterval(intervalId)",
        "intervalId.cancel()",
        "setTimeout(intervalId, 0)"
      ],
      "level": "<medium>medium</medium>",
      "correct": "clearInterval(intervalId)",
      "explanation": "Store the ID returned by setInterval and pass it to clearInterval() to stop the loop."
    },
    "155": {
      "question": "Why might we use setTimeout inside a scroll event listener?",
      "options": [
        "To delay code execution and improve performance",
        "To make scrolling faster",
        "To trigger scrolling animations immediately",
        "To block user input"
      ],
      "level": "<medium>medium</medium>",
      "correct": "To delay code execution and improve performance",
      "explanation": "In React or vanilla JS, wrapping expensive calculations inside a setTimeout (or debounce) in scroll events reduces the frequency of executions and improves performance."
    },
    "156": {
      "question": "What does the term 'Vanilla JavaScript' mean?",
      "options": [
        "A JavaScript library like React or Vue",
        "Plain JavaScript without any libraries or frameworks",
        "Simple JavaScript with an emphasis on mobile coding.",
        "A simplified version of TypeScript"
      ],
      "level": "<medium>medium</medium>",
      "correct": "Plain JavaScript without any libraries or frameworks",
      "explanation": "Vanilla JavaScript simply means using plain, standard JavaScript (the core language) without relying on third-party libraries or frameworks like jQuery, React, or Angular."
    },
    "157": {
      "question": "Where is Vanilla JavaScript commonly used?",
      "options": [
        "Only in backend applications",
        "it Used in rare cases, and only used for DOM manipulations.",
        "In browsers for DOM manipulation, logic, and building features without libraries",
        "It cannot be used in real projects"
      ],
      "level": "<medium>medium</medium>",
      "correct": "In browsers for DOM manipulation, logic, and building features without libraries",
      "explanation": "Vanilla JavaScript is used in browsers to manipulate the DOM, handle events, perform logic, and build interactive features without needing external tools or frameworks."
    },
    "158": {
      "question": "How many arguments does addEventListener take, and what does each represent?",
      "options": [
        "2 arguments: event type and callback function",
        "3 arguments: event type, callback function, options (like capture, once, passive)",
        "5 arguments: event type, callback, capture, once, passive",
        "Only 1 argument: the event type"
      ],
      "level": "<medium>medium</medium>",
      "correct": "3 arguments: event type, callback function, options (like capture, once, passive)",
      "explanation": "addEventListener(type, callback, options) accepts the event type (string), callback function, and optional options object or boolean."
    },
    "159": {
      "question": "In addEventListener('scroll', handleScroll), what do the first and second arguments represent?",
      "options": [
        "First argument: the type of event to listen for; Second argument: the function to run when the event occurs",
        "First argument: callback function; Second argument: event type",
        "First argument: number of times to run; Second argument: function name",
        "Both arguments are optional"
      ],
      "level": "<medium>medium</medium>",
      "correct": "First argument: the type of event to listen for; Second argument: the function to run when the event occurs",
      "explanation": "The first argument is a string representing the event type (e.g., 'scroll', 'click'), and the second is the function executed when the event fires."
    },
    "160": {
      "question": "What does the 'once' parameter do in addEventListener?",
      "options": [
        "Executes the event listener only once and then removes it",
        "Repeats the event listener infinitely",
        "Stops other event listeners from running",
        "Changes the type of event automatically"
      ],
      "level": "<medium>medium</medium>",
      "correct": "Executes the event listener only once and then removes it",
      "explanation": "Setting { once: true } in the options ensures the listener runs a single time, then is automatically removed."
    },
    "161": {
      "question": "What does the 'passive' parameter do in addEventListener for scroll events?",
      "options": [
        "Tells the browser that the listener will not call preventDefault(), improving scroll performance",
        "Stops the listener from executing",
        "Delays the event by 1 second",
        "Allows multiple listeners to fire at once"
      ],
      "level": "<medium>medium</medium>",
      "correct": "Tells the browser that the listener will not call preventDefault(), improving scroll performance",
      "explanation": "Passive listeners improve performance on events like scroll or touch by signaling they won't block the browser."
    },
    "162": {
      "question": "What does the 'capture' parameter do in addEventListener?",
      "options": [
        "Makes the event listener trigger during the capture phase instead of the bubbling phase",
        "Stops the event completely",
        "Delays the event",
        "Changes the event type automatically"
      ],
      "level": "<medium>medium</medium>",
      "correct": "Makes the event listener trigger during the capture phase instead of the bubbling phase",
      "explanation": "capture: true makes the listener execute when the event travels down the DOM tree, before reaching the target."
    },
    "163": {
      "question": "When was JavaScript created, and who invented it?",
      "options": [
        "1995 by Brendan Eich",
        "2000 by Tim Berners-Lee",
        "1992 by Dennis Ritchie",
        "1998 by Guido van Rossum"
      ],
      "level": "<medium>medium</medium>",
      "correct": "1995 by Brendan Eich",
      "explanation": "JavaScript was created in 1995 by Brendan Eich while working at Netscape. It was originally called Mocha, then LiveScript, and finally renamed to JavaScript."
    },
    "164": {
      "question": "How long did it take to create the first version of JavaScript, and why was it called JavaScript?",
      "options": [
        "10 days, named for marketing reasons to ride on Java's popularity",
        "1 year, named because it was built on Java",
        "6 months, named after its creator Brendan Eich",
        "3 weeks, named randomly without meaning"
      ],
      "level": "<medium>medium</medium>",
      "correct": "10 days, named for marketing reasons to ride on Java's popularity",
      "explanation": "Brendan Eich developed JavaScript's first version in just 10 days in 1995. Netscape named it JavaScript as a marketing strategy to capitalize on Java's hype, even though the two languages are unrelated."
    },
    "165": {
      "question": "Why do developers often learn faster by building projects than by watching online tutorials?",
      "options": [
        "Projects force you to apply concepts and solve real problems",
        "YouTube tutorials are always wrong",
        "Projects teach HTML only",
        "YouTube videos are too short"
      ],
      "level": "<medium>medium</medium>",
      "correct": "Projects force you to apply concepts and solve real problems",
      "explanation": "Actively building projects reinforces knowledge, exposes gaps, and gives hands-on experience that videos alone can't provide."
    },
    "166": {
      "question": "What was the main purpose of creating JavaScript?",
      "options": [
        "To make websites interactive and dynamic in browsers",
        "To replace Java entirely",
        "To build operating systems",
        "To create mobile apps only"
      ],
      "level": "<medium>medium</medium>",
      "correct": "To make websites interactive and dynamic in browsers",
      "explanation": "JavaScript was developed to let developers add interactivity, handle user actions, and make web pages dynamic—something HTML and CSS alone could not achieve."
    },
    "167": {
      "question": "Why is JavaScript so popular in web development?",
      "options": [
        "It runs in every browser and allows interactive front-end development",
        "It is only used for Node.js",
        "It is faster than C++",
        "It doesn't need learning at all"
      ],
      "level": "<medium>medium</medium>",
      "correct": "It runs in every browser and allows interactive front-end development",
      "explanation": "JavaScript's ubiquity, versatility (front-end + back-end), and ecosystem make it extremely popular."
    },
    "168": {
      "question": "In which language was the first version of JavaScript written?",
      "options": [
        "C",
        "Java",
        "Assembly",
        "Python"
      ],
      "level": "<medium>medium</medium>",
      "correct": "C",
      "explanation": "The first implementation of JavaScript, called Mocha (later LiveScript, then JavaScript), was written in C by Brendan Eich at Netscape in 1995."
    },
    "169": {
      "question": "What is the most effective way to remember and understand new JavaScript concepts?",
      "options": [
        "Practice them in small projects and real-world problems",
        "Only read documentation without coding",
        "Watch multiple tutorials without coding",
        "Memorize code without understanding it"
      ],
      "level": "<medium>medium</medium>",
      "correct": "Practice them in small projects and real-world problems",
      "explanation": "Active practice and applying concepts in projects solidifies knowledge and improves long-term retention."
    },
    "170": {
      "question": "What will JavaScript return for this array: [3, 1, 4, 2].sort()?",
      "options": [
        "[1, 2, 3, 4]",
        "[3, 1, 4, 2]",
        "[1, 2, 3, 4] (numbers as strings)",
        "Error"
      ],
      "level": "<hard>hard</hard>",
      "correct": "[1, 2, 3, 4] (numbers as strings)",
      "explanation": "sort() converts numbers to strings and sorts them lexicographically. To sort numerically, a compare function is needed."
    },
    "171": {
      "question": "Which is the correct way to sort an array in ascending order using sort()?",
      "options": [
        "[3,1,4,2].sort((a,b)=>a-b)",
        "[3,1,4,2].sort()",
        "[3,1,4,2].sort((a,b)=>b-a)",
        "Use reverse()"
      ],
      "level": "<hard>hard</hard>",
      "correct": "[3,1,4,2].sort((a,b)=>a-b)",
      "explanation": "Providing a compare function ensures numeric sorting instead of string-based lexicographical sorting."
    },
    "172": {
      "question": "Which method returns the full year from a Date object?",
      "options": [
        "getFullYear()",
        "getYear()",
        "getMonth()",
        "toString()"
      ],
      "level": "<hard>hard</hard>",
      "correct": "getFullYear()",
      "explanation": "getFullYear() returns the 4-digit year (e.g., 2025). getYear() is deprecated."
    },
    "173": {
      "question": "How do we get the current month (0-11) from a Date object?",
      "options": [
        "date.getMonth()",
        "date.getFullMonth()",
        "date.getMonthNumber()",
        "date.getMonthName()"
      ],
      "level": "<hard>hard</hard>",
      "correct": "date.getMonth()",
      "explanation": "getMonth() returns 0 for January up to 11 for December."
    },
    "174": {
      "question": "What does setTimeout do in JavaScript?",
      "options": [
        "Executes a function after a delay",
        "Runs a function repeatedly",
        "Stops code execution",
        "Immediately calls a function"
      ],
      "level": "<hard>hard</hard>",
      "correct": "Executes a function after a delay",
      "explanation": "setTimeout schedules a function to run after a specified number of milliseconds."
    },
    "175": {
      "question": "Which method executes a function repeatedly at fixed intervals?",
      "options": [
        "setTimeout()",
        "setInterval()",
        "clearTimeout()",
        "requestAnimationFrame()"
      ],
      "level": "<hard>hard</hard>",
      "correct": "setInterval()",
      "explanation": "setInterval() executes a function repeatedly at the given time interval until cleared."
    },
    "176": {
      "question": "How do we cancel a setTimeout?",
      "options": [
        "clearTimeout(timeoutID)",
        "clearInterval(timeoutID)",
        "stopTimeout(timeoutID)",
        "setTimeout(null)"
      ],
      "level": "<hard>hard</hard>",
      "correct": "clearTimeout(timeoutID)",
      "explanation": "clearTimeout() cancels a pending setTimeout using its ID."
    },
    "177": {
      "question": "Which keyword is used to export functions or variables from a module?",
      "options": [
        "export",
        "import",
        "module",
        "require"
      ],
      "level": "<hard>hard</hard>",
      "correct": "export",
      "explanation": "export allows you to make functions, objects, or variables available for other modules."
    },
    "178": {
      "question": "How do you import a named export from a module?",
      "options": [
        "import {name} from './module.js'",
        "import name from './module.js'",
        "require('./module.js')",
        "include('./module.js')"
      ],
      "level": "<hard>hard</hard>",
      "correct": "import {name} from './module.js'",
      "explanation": "Curly braces {} are used to import named exports from a module."
    },
    "179": {
      "question": "What is the difference between default and named exports?",
      "options": [
        "Default export allows a single export per file; named exports can have multiple",
        "Default export can only export functions; named exports can export anything",
        "Named export is older syntax",
        "No difference"
      ],
      "level": "<hard>hard</hard>",
      "correct": "Default export allows a single export per file; named exports can have multiple",
      "explanation": "Default exports are imported without {}, while named exports must be imported using their exact name inside {}."
    },
    "180": {
      "question": "What is a closure in JavaScript?",
      "options": [
        "A function that remembers variables from its outer scope",
        "A private variable",
        "An arrow function",
        "A loop that stops at a condition"
      ],
      "level": "<hard>hard</hard>",
      "correct": "A function that remembers variables from its outer scope",
      "explanation": "Closures allow inner functions to access variables from outer functions even after the outer function has finished executing."
    },
    "181": {
      "question": "Which scenario is most commonly used for closures?",
      "options": [
        "Creating private variables and functions",
        "Sorting an array",
        "DOM manipulation",
        "Making a loop run faster"
      ],
      "level": "<hard>hard</hard>",
      "correct": "Creating private variables and functions",
      "explanation": "Closures can keep variables hidden from the global scope while still accessible inside functions."
    },
    "182": {
      "question": "Specifically, what do async/await do in JavaScript?",
      "options": [
        "Allows writing asynchronous code in a synchronous style",
        "Makes functions synchronous",
        "Blocks the main thread",
        "Automatically retries failed network requests"
      ],
      "level": "<hard>hard</hard>",
      "correct": "Allows writing asynchronous code in a synchronous style",
      "explanation": "async/await simplifies handling promises, letting you write async code that looks like normal sequential code."
    },
    "183": {
      "question": "Which of the following is true about Promises?",
      "options": [
        "It represents a value that may be available now, later, or never",
        "It is always resolved immediately",
        "It blocks code execution",
        "It is only used for arrays"
      ],
      "level": "<hard>hard</hard>",
      "correct": "It represents a value that may be available now, later, or never",
      "explanation": "A Promise is an object representing the eventual completion (or failure) of an async operation."
    },
    "184": {
      "question": "How should we handle errors in async/await functions?",
      "options": [
        "Using try/catch blocks",
        "Using if/else",
        "Using for loops",
        "Using switch"
      ],
      "level": "<hard>hard</hard>",
      "correct": "Using try/catch blocks",
      "explanation": "try/catch allows you to catch rejected Promises or exceptions in async functions."
    },
    "185": {
      "question": "Which fetch() method returns a promise?",
      "options": [
        "fetch('url')",
        "XMLHttpRequest.send()",
        "console.log()",
        "setTimeout()"
      ],
      "level": "<hard>hard</hard>",
      "correct": "fetch('url')",
      "explanation": "fetch() is a modern API to make network requests and returns a promise that resolves with the Response object."
    },
    "186": {
      "question": "What will this short code print: async function test(){ console.log(1); await Promise.resolve(); console.log(2);} test(); console.log(3);?",
      "options": [
        "1 3 2",
        "1 2 3",
        "3 1 2",
        "1 2 3 3"
      ],
      "level": "<hard>hard</hard>",
      "correct": "1 3 2",
      "explanation": "The code logs 1, then schedules the await continuation as a microtask, logs 3, then continues with 2."
    },
    "187": {
      "question": "Which statement is correct about the JavaScript event loop?",
      "options": [
        "It processes the call stack and task/microtask queues",
        "It blocks async functions",
        "It executes code in reverse order",
        "It only runs on Node.js"
      ],
      "level": "<hard>hard</hard>",
      "correct": "It processes the call stack and task/microtask queues",
      "explanation": "The event loop continuously checks the call stack and executes queued tasks and microtasks asynchronously."
    },
    "188": {
      "question": "Which of the following can be a microtask?",
      "options": [
        "Promise.then callbacks",
        "setTimeout callback",
        "for loop",
        "console.log()"
      ],
      "level": "<hard>hard</hard>",
      "correct": "Promise.then callbacks",
      "explanation": "Promise.then callbacks are queued as microtasks and run after the current execution context but before the next macrotask."
    },
    "189": {
      "question": "How can we cancel a fetch request?",
      "options": [
        "Using an AbortController",
        "Using clearTimeout",
        "Using try/catch",
        "Using finally"
      ],
      "level": "<hard>hard</hard>",
      "correct": "Using an AbortController",
      "explanation": "AbortController allows you to cancel fetch requests by passing its signal property to fetch() and calling abort() when needed."
    },
    "190": {
      "question": "Which is the correct way to sort an array in ascending order using sort()?",
      "options": [
        "[3,1,4,2].sort((a,b)=>a-b)",
        "[3,1,4,2].sort()",
        "[3,1,4,2].sort((a,b)=>b-a)",
        "Use reverse()"
      ],
      "level": "<hard>hard</hard>",
      "correct": "[3,1,4,2].sort((a,b)=>a-b)",
      "explanation": "Providing a compare function ensures numeric sorting instead of string-based lexicographical sorting."
    },
    "191": {
      "question": "Which event fires when a user clicks on an element?",
      "options": [
        "click",
        "dblclick",
        "mouseover",
        "keydown"
      ],
      "level": "<hard>hard</hard>",
      "correct": "click",
      "explanation": "The 'click' event fires when a user presses and releases a mouse button on an element."
    },
    "192": {
      "question": "Which event fires when a user double-clicks on an element?",
      "options": [
        "dblclick",
        "click",
        "mousedown",
        "mouseup"
      ],
      "level": "<hard>hard</hard>",
      "correct": "dblclick",
      "explanation": "'dblclick' fires after two consecutive clicks within a short time on the same element."
    },
    "193": {
      "question": "Which event fires when the mouse pointer moves over an element?",
      "options": [
        "mouseover",
        "mouseout",
        "mouseenter",
        "mousemove"
      ],
      "level": "<hard>hard</hard>",
      "correct": "mouseover",
      "explanation": "'mouseover' fires when the pointer enters the element or its child elements."
    },
    "194": {
      "question": "Which event fires when the mouse pointer leaves an element?",
      "options": [
        "mouseout",
        "mouseleave",
        "mouseover",
        "mousemove"
      ],
      "level": "<hard>hard</hard>",
      "correct": "mouseout",
      "explanation": "'mouseout' fires when the pointer leaves the element or any of its child elements."
    },
    "195": {
      "question": "Which event fires when a key is pressed down?",
      "options": [
        "keydown",
        "keyup",
        "keypress",
        "input"
      ],
      "level": "<hard>hard</hard>",
      "correct": "keydown",
      "explanation": "'keydown' fires when a key is first pressed. It repeats if the key is held down."
    },
    "196": {
      "question": "Which event fires when a key is released?",
      "options": [
        "keyup",
        "keydown",
        "keypress",
        "change"
      ],
      "level": "<hard>hard</hard>",
      "correct": "keyup",
      "explanation": "'keyup' fires when a pressed key is released."
    },
    "197": {
      "question": "Which event is deprecated and was used only for character keys?",
      "options": [
        "keypress",
        "keydown",
        "keyup",
        "input"
      ],
      "level": "<hard>hard</hard>",
      "correct": "keypress",
      "explanation": "'keypress' was used for printable characters only and is now deprecated in favor of 'keydown' and 'keyup'."
    },
    "198": {
      "question": "How do we prevent the default action of an event?",
      "options": [
        "event.preventDefault()",
        "event.stopPropagation()",
        "return false",
        "event.block()"
      ],
      "level": "<hard>hard</hard>",
      "correct": "event.preventDefault()",
      "explanation": "preventDefault() cancels the event's default behavior, like preventing a link from navigating."
    },
    "199": {
      "question": "Which method stops bubbling of an event through the DOM tree?",
      "options": [
        "event.stopPropagation()",
        "event.preventDefault()",
        "return false",
        "event.block()"
      ],
      "level": "<hard>hard</hard>",
      "correct": "event.stopPropagation()",
      "explanation": "stopPropagation() prevents the event from reaching parent elements(For example: we have a box with a second box inside it, we want both boxes to be disabled only when clicking on the outer box, and we don't want the same to happen when clicking on the inner box.)."
    },
    "200": {
      "question": "What is Event Delegation?",
      "options": [
        "Attaching a single event listener to a parent to handle events for its children",
        "Adding multiple listeners to every child element",
        "Using setTimeout to delay events",
        "Using arrow functions for events"
      ],
      "level": "<hard>hard</hard>",
      "correct": "Attaching a single event listener to a parent to handle events for its children",
      "explanation": "Event delegation improves performance by using one listener for multiple child elements and relying on event bubbling."
    },
    "201": {
      "question": "Which method selects the first element that matches a CSS selector?",
      "options": [
        "document.querySelector()",
        "document.getElementById()",
        "document.getElementsByClassName()",
        "document.querySelectorAll()"
      ],
      "level": "<hard>hard</hard>",
      "correct": "document.querySelector()",
      "explanation": "querySelector() returns the first element that matches a CSS selector string."
    },
    "202": {
      "question": "Which method selects all elements that match a CSS selector?",
      "options": [
        "document.querySelectorAll()",
        "document.querySelector()",
        "document.getElementById()",
        "document.getElementsByTagName()"
      ],
      "level": "<hard>hard</hard>",
      "correct": "document.querySelectorAll()",
      "explanation": "querySelectorAll() returns a NodeList of all elements matching the selector."
    },
    "203": {
      "question": "How do we create a new element in the DOM?",
      "options": [
        "document.createElement('tagName')",
        "document.newElement('tagName')",
        "document.appendChild('tagName')",
        "document.makeElement('tagName')"
      ],
      "level": "<hard>hard</hard>",
      "correct": "document.createElement('tagName')",
      "explanation": "createElement() creates a new element, which can then be added to the DOM."
    },
    "204": {
      "question": "Which method adds a child element to a parent element?",
      "options": [
        "parent.appendChild(child)",
        "parent.addChild(child)",
        "parent.insert(child)",
        "parent.createChild(child)"
      ],
      "level": "<hard>hard</hard>",
      "correct": "parent.appendChild(child)",
      "explanation": "appendChild() adds the specified child element to the end of the parent element's children."
    },
    "205": {
      "question": "How do we remove an element from the DOM?",
      "options": [
        "Only element.remove()",
        "Only element.delete()",
        "Only parent.removeChild()",
        "Both .remove() and .removeChild() work."
      ],
      "level": "<hard>hard</hard>",
      "correct": "Both .remove() and .removeChild() work.",
      "explanation": "element.remove() removes the element directly, or parent.removeChild(element) can remove it via the parent."
    },
    "206": {
      "question": "How do we access the value of an input element by id 'name'?",
      "options": [
        "document.getElementById('name').value",
        "document.getElementById('name').text",
        "document.querySelector('#name').innerText",
        "document.querySelector('#name').val"
      ],
      "level": "<hard>hard</hard>",
      "correct": "document.getElementById('name').value",
      "explanation": "The value property holds the current content of input elements."
    },
    "207": {
      "question": "Which specific event fires when the value of an input tag changes?",
      "options": [
        "input",
        "change",
        "keyup",
        "keydown"
      ],
      "level": "<hard>hard</hard>",
      "correct": "input",
      "explanation": "The 'input' event fires every time the value changes, while 'change' fires when focus leaves the input."
    },
    "208": {
      "question": "How can we efficiently attach event listeners to many dynamic elements?",
      "options": [
        "Use event delegation on a parent element",
        "Attach individual listeners to each element",
        "Use setTimeout for each element",
        "Use document.write"
      ],
      "level": "<hard>hard</hard>",
      "correct": "Use event delegation on a parent element",
      "explanation": "Event delegation lets a parent handle events from its children via bubbling, improving performance for dynamic elements."
    },
    "209": {
      "question": "Which property of the event object gives the element that triggered the event?",
      "options": [
        "event.target",
        "event.currentTarget",
        "event.srcElement",
        "event.origin"
      ],
      "level": "<hard>hard</hard>",
      "correct": "event.target",
      "explanation": "event.target refers to the element on which the event originated, while currentTarget is the element the listener is attached to."
    },
    "210": {
      "question": "How do we prevent a form from submitting normally?",
      "options": [
        "event.preventDefault() inside the submit handler",
        "return false in the submit handler",
        "Both .preventDefault() and returning false in the submit handler",
        "You cannot prevent form submission"
      ],
      "level": "<hard>hard</hard>",
      "correct": "Both .preventDefault() and returning false in the submit handler",
      "explanation": "Calling event.preventDefault() or returning false in the handler prevents the default form submission behavior."
    },
    "211": {
      "question": "Which method stores data in the browser's localStorage?",
      "options": [
        "localStorage.setItem('key', 'value')",
        "localStorage.store('key', 'value')",
        "sessionStorage.setItem('key', 'value')",
        "document.store('key', 'value')"
      ],
      "level": "<hard>hard</hard>",
      "correct": "localStorage.setItem('key', 'value')",
      "explanation": "setItem() stores a key-value pair in localStorage, which persists across browser sessions."
    },
    "212": {
      "question": "How do we retrieve data from localStorage?",
      "options": [
        "localStorage.getItem('key')",
        "localStorage.fetch('key')",
        "sessionStorage.get('key')",
        "document.get('key')"
      ],
      "level": "<hard>hard</hard>",
      "correct": "localStorage.getItem('key')",
      "explanation": "getItem() returns the value associated with the specified key, or null if the key does not exist."
    },
    "213": {
      "question": "How do we remove an item from localStorage?",
      "options": [
        "localStorage.removeItem('key')",
        "localStorage.delete('key')",
        "sessionStorage.remove('key')",
        "localStorage.clearItem('key')"
      ],
      "level": "<hard>hard</hard>",
      "correct": "localStorage.removeItem('key')",
      "explanation": "removeItem() deletes the specified key and its value from localStorage."
    },
    "214": {
      "question": "How do we remove all data from localStorage?",
      "options": [
        "localStorage.clear()",
        "localStorage.removeAll()",
        "sessionStorage.clear()",
        "document.clearStorage()"
      ],
      "level": "<hard>hard</hard>",
      "correct": "localStorage.clear()",
      "explanation": "clear() removes all key-value pairs from localStorage."
    },
    "215": {
      "question": "Why do we use JSON.stringify() before storing an object in localStorage?",
      "options": [
        "Because localStorage only stores strings",
        "To make it smaller",
        "To encrypt the object",
        "It's optional"
      ],
      "level": "<hard>hard</hard>",
      "correct": "Because localStorage only stores strings",
      "explanation": "Objects must be converted to a string using JSON.stringify() to store them in localStorage."
    },
    "216": {
      "question": "How do we convert a JSON string back into a JavaScript object?",
      "options": [
        "JSON.parse(jsonString)",
        "JSON.stringify(jsonString)",
        "Object.fromJSON(jsonString)",
        "JSON.objectify(jsonString)"
      ],
      "level": "<hard>hard</hard>",
      "correct": "JSON.parse(jsonString)",
      "explanation": "JSON.parse() converts a valid JSON string back into a JavaScript object."
    },
    "217": {
      "question": "What happens if we store an array directly in localStorage without JSON.stringify()?",
      "options": [
        "It is converted to a string using commas",
        "It throws an error",
        "It stores as an object",
        "It is ignored"
      ],
      "level": "<hard>hard</hard>",
      "correct": "It is converted to a string using commas",
      "explanation": "Arrays are automatically converted to a comma-separated string, which may not be useful when retrieving."
    },
    "218": {
      "question": "Which storage is cleared when the browser or tab is closed?",
      "options": [
        "sessionStorage",
        "localStorage",
        "Cookies",
        "IndexedDB"
      ],
      "level": "<hard>hard</hard>",
      "correct": "sessionStorage",
      "explanation": "sessionStorage persists only for the duration of the page session and is cleared when the tab or browser closes."
    },
    "219": {
      "question": "How do we check if a key exists in localStorage?",
      "options": [
        "'key' in localStorage",
        "localStorage.hasKey('key')",
        "localStorage.exists('key')",
        "localStorage.getItem('key') !== null"
      ],
      "level": "<hard>hard</hard>",
      "correct": "localStorage.getItem('key') !== null",
      "explanation": "getItem() returns null if the key does not exist; comparing against null confirms existence."
    },
    "220": {
      "question": "Which of the following correctly stores and retrieves an object from localStorage?",
      "options": [
        "localStorage.setItem('user', JSON.stringify(obj)); let user = JSON.parse(localStorage.getItem('user'));",
        "localStorage.setItem('user', obj); let user = localStorage.getItem('user');",
        "localStorage.save('user', obj); let user = JSON.load('user');",
        "localStorage.store('user', obj); let user = localStorage.retrieve('user');"
      ],
      "level": "<hard>hard</hard>",
      "correct": "localStorage.setItem('user', JSON.stringify(obj)); let user = JSON.parse(localStorage.getItem('user'));",
      "explanation": "Objects must be stringified before storing and parsed back when retrieving to preserve their structure."
    },
    "221": {
      "question": "In JavaScript, which is the correct way to declare a function?",
      "options": [
        "function car() { console.log('Car'); }",
        "func car() { console.log('Car'); }",
        "function: car() { console.log('Car'); }",
        "def car() { console.log('Car'); }"
      ],
      "level": "<easy>easy</easy>+",
      "correct": "function car() { console.log('Car'); }",
      "explanation": "The proper syntax for a function declaration is 'function name() { ... }'."
    },
    "222": {
      "question": "How do we correctly declare a variable that can be reassigned?",
      "options": [
        "let age = 25;",
        "const age = 25;",
        "var age;",
        "variable age = 25;"
      ],
      "level": "<easy>easy</easy>+",
      "correct": "let age = 25;",
      "explanation": "'let' declares a variable that can be reassigned. 'const' cannot be reassigned."
    },
    "223": {
      "question": "Which of the following is the correct way to create an array of numbers?",
      "options": [
        "let nums = [1, 2, 3];",
        "let nums = (1, 2, 3);",
        "let nums = {1, 2, 3};",
        "let nums = 1,2,3;"
      ],
      "level": "<easy>easy</easy>+",
      "correct": "let nums = [1, 2, 3];",
      "explanation": "Arrays in JavaScript are created with square brackets containing elements."
    },
    "224": {
      "question": "How do we add a value to the end of an array?",
      "options": [
        "nums.push(4);",
        "nums.add(4);",
        "nums.append(4);",
        "nums.insert(4);"
      ],
      "level": "<easy>easy</easy>+",
      "correct": "nums.push(4);",
      "explanation": "The push() method adds one or more elements to the end of an array."
    },
    "225": {
      "question": "Which is the correct way to write an if statement that checks if x is greater than 10?",
      "options": [
        "if (x > 10) { console.log('Yes'); }",
        "if x > 10 { console.log('Yes'); }",
        "if x > 10 then { console.log('Yes'); }",
        "if (x => 10) { console.log('Yes'); }"
      ],
      "level": "<easy>easy</easy>+",
      "correct": "if (x > 10) { console.log('Yes'); }",
      "explanation": "If statements must use parentheses around the condition and curly braces for the block."
    },
    "226": {
      "question": "How do we write a for loop that prints numbers from 0 to 4?",
      "options": [
        "for (let i = 0; i < 5; i++) { console.log(i); }",
        "for (i = 0; i < 5; i++) { console.log(i); }",
        "for i = 0; i < 5; i++ { console.log(i); }",
        "for (let i = 0; i <= 5; i++) console.log(i);"
      ],
      "level": "<easy>easy</easy>+",
      "correct": "for (let i = 0; i < 5; i++) { console.log(i); }",
      "explanation": "The proper for loop uses initialization, condition, and increment in parentheses with braces for the block."
    },
    "227": {
      "question": "Which way converts the string '123' to a number?",
      "options": [
        "Number('123')",
        "parseInt('123')",
        "+'123'",
        "All of the above"
      ],
      "level": "<easy>easy</easy>+",
      "correct": "All of the above",
      "explanation": "Number(), parseInt(), and unary + can all convert a string to a number in JavaScript."
    },
    "228": {
      "question": "Which built-in property can we use to find out the length of a string?",
      "options": [
        "'Hello'.length",
        "'Hello'.size",
        "'Hello'.count",
        "length('Hello')"
      ],
      "level": "<easy>easy</easy>+",
      "correct": "'Hello'.length",
      "explanation": "The length property returns the number of characters in a string, for exp: 'Hello'.length will return 5 as result."
    },
    "229": {
      "question": "How do we call a function named greet?",
      "options": [
        "greet();",
        "call greet();",
        "greet.call();",
        "function.greet();"
      ],
      "level": "<easy>easy</easy>+",
      "correct": "greet();",
      "explanation": "Functions are called using their name followed by parentheses."
    },
    "230": {
      "question": "Which is the correct way to write a function expression?",
      "options": [
        "const greet = function() { console.log('Hi'); };",
        "function greet = () { console.log('Hi'); };",
        "greet() = function { console.log('Hi'); };",
        "const function greet() { console.log('Hi'); };"
      ],
      "level": "<easy>easy</easy>+",
      "correct": "const greet = function() { console.log('Hi'); };",
      "explanation": "Function expressions assign a function to a variable using const/let/var."
    }
  },
  "react": {
    "1": {
    "question": "What is the main purpose of using React?",
    "options": [
      "To manage server databases",
      "To build dynamic user interfaces",
      "To create operating systems",
      "To style HTML elements"
    ],
    "level": "<easy>easy</easy>",
    "correct": "To build dynamic user interfaces",
    "explanation": "React is a JavaScript library for building interactive and dynamic UI components efficiently."
    },
    "2": {
      "question": "What does the `useState` hook do in React?",
      "options": [
        "It stores component state and updates it",
        "It connects to APIs",
        "It listens for events",
        "It updates the DOM manually"
      ],
      "level": "<easy>easy</easy>",
      "correct": "It stores component state and updates it",
      "explanation": "`useState` allows you to create state variables in functional components and update them when needed by using second argument [..., setState]."
    },
    "3": {
      "question": "What does the `onChange` event handler usually track in React forms?",
      "options": [
        "When the page reloads",
        "When the user types or changes input",
        "When the component mounts",
        "When a CSS style changes"
      ],
      "level": "<easy>easy</easy>",
      "correct": "When the user types or changes input",
      "explanation": "`onChange` detects input changes such as typing in a text field, updating the state accordingly."
    },
    "4": {
      "question": "Which React hook runs code after the component renders?",
      "options": [
        "useEffect",
        "useState",
        "useRef",
        "useContext"
      ],
      "level": "<easy>easy</easy>",
      "correct": "useEffect",
      "explanation": "`useEffect` lets you run side effects like data fetching or updating the DOM after rendering."
    },
    "5": {
      "question": "What is `useRef` mainly used for?",
      "options": [
        "To create component state",
        "To store a mutable value without causing re-renders",
        "To fetch API data",
        "To style components"
      ],
      "level": "<easy>easy</easy>",
      "correct": "To store a mutable value without causing re-renders",
      "explanation": "useRef() - `Use Reference` Does not cause re-renders when it's value changes. useref when you want a component to remember some info, but you don't want that informationto trigger new renders."
    },
    "6": {
      "question": "How do you update state created with `useState`?",
      "options": [
        "Directly assign to the variable",
        "By using useStates second argument(setter) function",
        "Change the DOM element",
        "Vy Calling useRef() hook"
      ],
      "level": "<easy>easy</easy>",
      "correct": "By using useStates second argument(setter) function",
      "explanation": "The setter function returned by `useState` updates the state and triggers a re-render."
    },
    "7": {
      "question": "What is the correct way to set an `onChange` in a React input?",
      "options": [
        "<input onChange='handleChange' />",
        "<input onChange={handleChange} />",
        "<input onchange='handleChange()' />",
        "<input change={handleChange} />"
      ],
      "level": "<easy>easy</easy>",
      "correct": "<input onChange={handleChange} />",
      "explanation": "In JSX(react), event handlers are passed as functions inside curly braces, not as strings('Hello World')."
    },
    "8": {
      "question": "What is the default initial value of a `useState` variable if not set?",
      "options": [
        "null",
        "undefined",
        "0",
        "An empty string"
      ],
      "level": "<easy>easy</easy>",
      "correct": "undefined",
      "explanation": "If you don't pass an initial value to `useState`, it will be asigned as `undefined` on default."
    },
    "9": {
      "question": "When does a `useEffect` run without a dependency array?",
      "options": [
        "Only once on mount",
        "Every time the component renders",
        "Only when state changes",
        "Never"
      ],
      "level": "<easy>easy</easy>",
      "correct": "Every time the component renders",
      "explanation": "Without dependencies(useEffect(() => {}, [dependency array])), `useEffect` executes after every render."
    },
    "10": {
      "question": "How do you store a reference to a DOM element in React?",
      "options": [
        "By using querySelector",
        "By using document.getElementById",
        "By using useRef and assigning it to the element's ref attribute",
        "By using useEffect"
      ],
      "level": "<easy>easy</easy>",
      "correct": "By using useRef and assigning it to the element's ref attribute",
      "explanation": "`useRef` can store DOM references by passing them to its `ref` attribute, this `ref` is associated with html tags (div, section, main...)"
    },
    "11": {
      "question": "Why is React called 'declarative'?",
      "options": [
        "Because it hides DOM manipulation details",
        "Because it requires class components",
        "Because it uses HTML syntax",
        "Because it doesn't use JavaScript"
      ],
      "level": "<easy>easy</easy>",
      "correct": "Because it hides DOM manipulation details",
      "explanation": "React lets you describe the desired UI and handles DOM updates automatically."
    },
    "12": {
      "question": "What is the return value of `useState`?",
      "options": [
        "A single state variable",
        "An array with the state value and a setter function",
        "An object with state properties",
        "A function that updates the DOM"
      ],
      "level": "<easy>easy</easy>",
      "correct": "An array with the state value and a setter function",
      "explanation": "`useState` returns a two-element array: the state value and its updater function."
    },
    "13": {
      "question": "Which is NOT a valid dependency for `useEffect`?",
      "options": [
        "A state variable",
        "A prop",
        "A constant value",
        "A function from setInterval"
      ],
      "level": "<easy>easy</easy>",
      "correct": "A constant value",
      "explanation": "Constant values don't change between renders, so adding them as dependencies is unnecessary."
    },
    "14": {
      "question": "What happens if you update a state variable with the same value?",
      "options": [
        "React still re-renders",
        "React skips the re-render",
        "React throws an error",
        "The component unmounts"
      ],
      "level": "<easy>easy</easy>",
      "correct": "React skips the re-render",
      "explanation": "If the new state is strictly equal to the old state(`===`), React won't trigger a re-render."
    },
    "15": {
      "question": "How can we add icons in react?",
      "options": [
        "we can copy/paste it from somewhere",
        "we can download images for icons",
        "we can import it and then use them <icon/>",
        "we can't use icons in react"
      ],
      "level": "<easy>easy</easy>",
      "correct": "we can import it and then use them <icon/>",
      "explanation": "In the website you can search for https://react-icons.github.io/react-icons and pick best for you icon to use it"
    },
    "16": {
      "question": "How do you run `useEffect` only once when the component mounts?",
      "options": [
        "Pass an empty dependency array",
        "Do not pass any dependency array",
        "Call it inside `useState`",
        "Wrap it in a function"
      ],
      "level": "<easy>easy</easy>",
      "correct": "Pass an empty dependency array",
      "explanation": "An empty dependency array:useEffect(() => {...}, []) `[]` makes `useEffect` run only once when the components mount(the initial render)."
    },
    "17": {
      "question": "Which is NOT a correct use of `useState`?",
      "options": [
        "const [count, setCount] = useState(0)",
        "const [time, setTime]= useState(() => {setTimeOut(...)})",
        "const count = useState(0)",
        "const [value, setValue] = useState()"
      ],
      "level": "<easy>easy</easy>",
      "correct": "const count = useState(0)",
      "explanation": "`useState` returns an array, so destructuring is required to get the state and updater separately."
    },
    "18": {
      "question": "What will happen if you forget the dependency array in `useEffect`?",
      "options": [
        "It will never run and work properly",
        "It will run after every render",
        "It will throw an error, in our console",
        "It will run only on mount"
      ],
      "level": "<easy>easy</easy>",
      "correct": "It will run after every render",
      "explanation": "Without dependencies, `useEffect` runs after every render, potentially causing performance issues."
    },
    "19": {
      "question": "Why are unique keys important in lists in React?",
      "options": [
        "To help React track items and update efficiently",
        "To style list items",
        "To store data in the DOM",
        "To enable animations"
      ],
      "level": "<easy>easy</easy>",
      "correct": "To help React track items and update efficiently",
      "explanation": "Keys help React identify which items changed, were added, or removed, improving rendering performance."
    },
    "20": {
      "question": "How do you do conditional rendering in React?",
      "options": [
        "Using if/else or ternary inside JSX",
        "By adding conditions in CSS",
        "By changing HTML tags",
        "By modifying index.html"
      ],
      "level": "<easy>easy</easy>",
      "correct": "Using if/else or ternary inside JSX",
      "explanation": "Conditional rendering is commonly done with ternary operators or logical && inside JSX."
    },
    "21": {
      "question": "which of the following is the correct use of conditional rendering in React?",
      "options": [
        "Import {Render} from 'react-icons';",
        "const 1 = {conditional rendering}",
        "{burgerMenu && (<div>{burgerMenu ? `...` : `...`}</div>)}",
        "<div>Render</div>"
      ],
      "level": "<easy>easy</easy>",
      "correct": "{burgerMenu && (<div>{burgerMenu ? `...` : `...`}</div>)}",
      "explanation": "we can use conditional rendering with &&, if/else or ternary operator in our JSX file."
    },
    "22": {
      "question": "How do you install React Icons?",
      "options": [
        "npm install react-icons",
        "npm install icons-react",
        "npm create react-icons",
        "yarn add react-icons-pack"
      ],
      "level": "<easy>easy</easy>",
      "correct": "npm install react-icons",
      "explanation": "To install React Icons, use `npm install react-icons` or `yarn add react-icons`."
    },
    "23": {
      "question": "How do you add a React Icon in a component?",
      "options": [
        "Import {icon} from 'react-icons' and use as JSX",
        "Copy it from HTML",
        "Use document.createElement",
        "Add in CSS"
      ],
      "level": "<easy>easy</easy>",
      "correct": "Import {icon} from 'react-icons' and use as JSX",
      "explanation": "Import icons, e.g. `import { FaHome } from 'react-icons/fa';` and then use `<FaHome />` in JSX."
    },
    "24": {
      "question": "Why use React instead of just JS/HTML/CSS?",
      "options": [
        "Because React makes UI updates faster and easier",
        "Because HTML is not supported in browsers",
        "Because CSS can't style elements",
        "Because JS doesn't work with APIs"
      ],
      "level": "<easy>easy</easy>",
      "correct": "Because React makes UI updates faster and easier",
      "explanation": "React simplifies UI updates and component-based architecture which is hard with plain JS/HTML/CSS."
    },
    "25": {
      "question": "What is prop drilling?",
      "options": [
        "Passing props through multiple components unnecessarily",
        "Updating state directly",
        "Using props inside CSS",
        "Creating state in multiple places"
      ],
      "level": "<easy>easy</easy>",
      "correct": "Passing props through multiple components unnecessarily",
      "explanation": "Prop drilling is passing data through many intermediate components, which can complicate code."
    },
    "26": {
      "question": "How to avoid prop drilling?",
      "options": [
        "Using React Context",
        "Using more props",
        "Using only CSS",
        "By avoiding state"
      ],
      "level": "<easy>easy</easy>",
      "correct": "Using React Context",
      "explanation": "React Context allows sharing data across components without passing props manually."
    },
    "27": {
      "question": "Which is a correct example of conditional rendering in React?",
      "options": [
        "{isLoggedIn ? <Dashboard/> : <Login/>}",
        "if(isLoggedIn) <Dashboard/> else <Login/>",
        "<Dashboard/> && <Login/>",
        "<Dashboard/> || <Login/>"
      ],
      "level": "<easy>easy</easy>",
      "correct": "{isLoggedIn ? <Dashboard/> : <Login/>}",
      "explanation": "Conditional rendering often uses the ternary operator inside JSX."
    },
    "28": {
      "question": "Normally where do we use useRef in React?",
      "options": [
        "It is a Vue tool and is not used in React.",
        "In places where we need as much rendering as possible.",
        "We only use the useRef() hook in critical cases when useState() fails to work.",
        "In places which cause too many re-renders, like inputs or window listeners."
      ],
      "level": "<easy>easy</easy>",
      "correct": "In places which cause too many re-renders, like inputs or window listeners.",
      "explanation": "useRef is used to store values that persist across renders without causing re-renders. It's often used for input references, DOM elements, or event listeners to avoid unnecessary re-rendering."
    },
    "29": {
      "question": "How to install React Icons?",
      "options": [
        "npm install react-icons",
        "npm install icons-react",
        "npm create react-icons",
        "yarn add react-icons-pack"
      ],
      "level": "<easy>easy</easy>",
      "correct": "npm install react-icons",
      "explanation": "To install React Icons we must use next command: `npm install react-icons` or `yarn add react-icons`."
    },
    "30": {
      "question": "What is React Router used for?",
      "options": [
        "Managing navigation and routes in React apps",
        "Styling components",
        "Fetching data",
        "Handling forms"
      ],
      "level": "<easy>easy</easy>",
      "correct": "Managing navigation and routes in React apps",
      "explanation": "React Router lets you declare routes and navigate between components in a React application."
    },
    "31": {
      "question": "Which component from React Router is used to define individual routes?",
      "options": [
        "<Route>",
        "<Link>",
        "<Switch>",
        "<Router>"
      ],
      "level": "<medium>medium</medium>",
      "correct": "<Route>",
      "explanation": "The <Route> component defines which UI to render based on the current URL."
    },
    "32": {
      "question": "What does the <BrowserRouter> component do?",
      "options": [
        "It keeps the UI in sync with the URL",
        "It styles the navigation bar",
        "It fetches data from APIs",
        "It manages form submissions"
      ],
      "level": "<medium>medium</medium>",
      "correct": "It keeps the UI in sync with the URL",
      "explanation": "<BrowserRouter> uses the HTML5 history API to manage routing in React apps(not recomended to use because of github)."
    },
    "33": {
      "question": "Which is the best option for githubs routing, <BrowserRouter> or <HashRouter>?",
      "options": [
        "<HashRouter>",
        "Both",
        "None",
        "<BrowserRouter>"
      ],
      "level": "<medium>medium</medium>",
      "correct": "<HashRouter>",
      "explanation": "GitHub Pages is a static file host and doesn't support server-side routing. <BrowserRouter> tries to handle routes like real files, which causes errors. <HashRouter> works because it uses the # part of the URL, which GitHub ignores, so React Router can handle routing correctly."
    },
    "34": {
      "question": "Why is <HashRouter> a better choice than <BrowserRouter> when deploying to GitHub Pages?",
      "options": [
        "Because GitHub Pages doesn't support server-side routing",
        "Because HashRouter loads faster than BrowserRouter",
        "Because BrowserRouter is only for mobile apps",
        "Because HashRouter automatically improves SEO"
      ],
      "level": "<medium>medium</medium>",
      "correct": "Because GitHub Pages doesn't support server-side routing",
      "explanation": "<BrowserRouter> relies on the HTML5 History API and clean URLs (e.g., /about). GitHub Pages is a static host, so refreshing or navigating directly to a route causes 404 errors. <HashRouter> works better because it uses the # part of the URL (e.g., /#/about), which GitHub ignores, so React Router can handle the routing without errors."
    },
    "35": {
      "question": "Why is it important to set the homepage route <Route path='/' element={...} /> when deploying a React app on GitHub Pages?",
      "options": [
        "Without it, GitHub Pages can't render the initial component and shows a blank screen",
        "It makes the app run faster by caching the root route",
        "It is required only for mobile devices",
        "It improves SEO by setting a homepage meta tag"
      ],
      "level": "<medium>medium</medium>",
      "correct": "Without it, GitHub Pages can't render the initial component and shows a blank screen",
      "explanation": "When using React Router, the '/' route is the entry point of the app. If it's missing, GitHub Pages won't know which component to load first. This often results in a white screen instead of rendering your app. Setting path='/' ensures the initial JSX is always available."
    },
    "36": {
      "question": "What is the main purpose of using i18n in a React project?",
      "options": [
        "To improve SEO ranking",
        "To support multiple languages and locales",
        "To optimize performance",
        "To add animations to components"
      ],
      "level": "<medium>medium</medium>",
      "correct": "To support multiple languages and locales",
      "explanation": "i18n (internationalization) is about preparing your app to support multiple languages, time formats, and cultural settings."
    },
    "37": {
      "question": "Which React library is most commonly used for internationalization?",
      "options": [
        "react-router-dom",
        "redux-toolkit",
        "react-i18next",
        "axios"
      ],
      "level": "<medium>medium</medium>",
      "correct": "react-i18next",
      "explanation": "The most popular React library for i18n is react-i18next, which provides translation hooks and components."
    },
    "38": {
      "question": "Where do you typically store translations when using react-i18next?",
      "options": [
        "Inside package.json",
        "In separate JSON resource files per language",
        "Inside index.html",
        "In .env files"
      ],
      "level": "<medium>medium</medium>",
      "correct": "In separate JSON resource files per language",
      "explanation": "Translations are usually placed in JSON files (e.g., en.json, de.json) for easy organization and scalability."
    },
    "39": {
      "question": "Which hook is provided by react-i18next to use translations inside a component?",
      "options": [
        "useState",
        "useEffect",
        "useTranslation",
        "useContext"
      ],
      "level": "<medium>medium</medium>",
      "correct": "useTranslation",
      "explanation": "react-i18next provides the useTranslation hook to access the t function and the i18n instance in functional components."
    },
    "40": {
      "question": "What does the 't' function do in react-i18next?",
      "options": [
        "Translates keys into the active language",
        "Tracks user clicks",
        "Toggles light and dark mode",
        "Fetches API data"
      ],
      "level": "<medium>medium</medium>",
      "correct": "Translates keys into the active language",
      "explanation": "The t function looks up a key in your translation JSON and returns the string in the current language."
    },
    "41": {
      "question": "How do you change the active language in react-i18next?",
      "options": [
        "By editing index.html",
        "By calling i18n.changeLanguage('xx')",
        "By using setState in App.js",
        "By reloading the browser"
      ],
      "level": "<medium>medium</medium>",
      "correct": "By calling i18n.changeLanguage('xx')",
      "explanation": "The i18n instance has a changeLanguage method where you pass the language code (e.g., 'en', 'fr', or i18n.language === `en` ?)."
    },
    "42": {
      "question": "Why is a language switcher component useful in a React app?",
      "options": [
        "It improves app speed",
        "It allows users to pick their preferred language",
        "It prevents 404 errors",
        "It adds custom CSS themes"
      ],
      "level": "<medium>medium</medium>",
      "correct": "It allows users to pick their preferred language",
      "explanation": "A language switcher lets users select their desired language, making your app more accessible globally."
    },
    "43": {
      "question": "Which component from react-i18next allows embedding translations directly in JSX with formatting?",
      "options": [
        "<Provider>",
        "<Trans>",
        "<Switch>",
        "<Translate>"
      ],
      "level": "<medium>medium</medium>",
      "correct": "<Trans>",
      "explanation": "The <Trans> component is used to translate strings(by changing thir style, color and size in place where you need to translate a paragraf, but add red phrases or wide phrases) in JSX and supports inline HTML and React components."
    },
    "44": {
      "question": "What is an advantage of using <Trans> over the t function?",
      "options": [
        "It works without JSON files",
        "It supports dynamic translation of large amounts of text.",
        "It is easier to use in large projects.",
        "It automatically generates translated text."
      ],
      "level": "<medium>medium</medium>",
      "correct": "It supports dynamic translation of large amounts of text.",
      "explanation": "<Trans> allows you to insert components, styling, and formatting tags inside translated text."
    },
    "45": {
      "question": "Does i18n come with a built-in default language?",
      "options": [
        "Yes, always English",
        "Yes, it depends on the framework",
        "No, you must set the language or fallback yourself",
        "Yes, it switches based on user's country"
      ],
      "level": "<medium>medium</medium>",
      "correct": "No, you must set the language or fallback yourself",
      "explanation": "i18next does not assume a default language like English. You need to configure `lng` or `fallbackLng` in the setup, otherwise it will just show the keys."
    },
    "46": {
      "question": "What is the purpose of a fallback language in i18n?",
      "options": [
        "It automatically translates text into all languages",
        "It provides a default language if a key is missing in the current language",
        "It reloads the app when translation fails",
        "It hides untranslated text completely"
      ],
      "level": "<medium>medium</medium>",
      "correct": "It provides a default language if a key is missing in the current language",
      "explanation": "A fallback language ensures the app displays readable text if the current language is missing some translations, instead of showing raw keys."
    },
    "47": {
      "question": "How do you initialize i18n in a React app?",
      "options": [
        "i18n does not require initialization, we do translations directly in the JSON file",
        "By creating an i18n.js file with i18next.init",
        "By placing translations inside CSS",
        "By importing i18n from react-router-dom"
      ],
      "level": "<medium>medium</medium>",
      "correct": "By creating an i18n.js file with i18next.init",
      "explanation": "For i18n, we usually create a js file (e.g., i18n.js), which we import and include in the desired JSX file to perform the translations."
    },
    "48": {
      "question": "Which file in React usually imports i18n.js to apply translations globally?",
      "options": [
        "index.js",
        "App.css",
        "package.json",
        "reportWebVitals.js"
      ],
      "level": "<medium>medium</medium>",
      "correct": "index.js",
      "explanation": "i18n.js is imported in index.js (the entry point) so translations are available throughout the app."
    },
    "49": {
      "question": "What is the difference between localization (l10n) and internationalization (i18n)?",
      "options": [
        "They mean the same thing",
        "i18n is preparing the app for multiple languages, l10n is adapting to a specific language",
        "i18n is only for React, l10n is for Vue",
        "i18n is for styling, l10n is for routing"
      ],
      "level": "<medium>medium</medium>",
      "correct": "i18n is preparing the app for multiple languages, l10n is adapting to a specific language",
      "explanation": "Internationalization (i18n) is the process of making the app language-ready. Localization (l10n) applies the actual translations for a specific culture or language."
    },
    "50": {
      "question": "Which of the following statements about react-i18next is false?",
      "options": [
        "Supports multiple languages",
        "Supports pluralization and interpolation",
        "Provides translation caching",
        "Automatically translates images"
      ],
      "level": "<medium>medium</medium>",
      "correct": "Automatically translates images",
      "explanation": "react-i18next supports translations, pluralization, and interpolation, but it cannot automatically translate images."
    },
    "51": {
      "question": "What is the main difference between useRef and useState?",
      "options": [
        "useRef causes re-renders, useState does not",
        "useState causes re-renders, useRef does not",
        "Both cause re-renders equally",
        "Neither can hold values between renders"
      ],
      "level": "<medium>medium</medium>",
      "correct": "useState causes re-renders, useRef does not",
      "explanation": "Updating a state with useState triggers a re-render, but updating a useRef value does not cause the component to re-render."
    },
    "52": {
      "question": "What is the default initial value of useRef if none is provided?",
      "options": [
        "null",
        "undefined",
        "0",
        "false"
      ],
      "level": "<medium>medium</medium>",
      "correct": "undefined",
      "explanation": "If you don't pass an initial value, useRef(undefined) is created by default."
    },
    "53": {
      "question": "Which property of useRef stores the actual value?",
      "options": [
        "value",
        "data",
        "current",
        "ref"
      ],
      "level": "<medium>medium</medium>",
      "correct": "current",
      "explanation": "useRef returns an object with a single property called 'current' where the value is stored."
    },
    "54": {
      "question": "Which situation is NOT a common use case for useRef?",
      "options": [
        "Storing DOM element references",
        "Tracking previous values between renders",
        "Preventing unnecessary re-renders",
        "Managing global state across multiple components"
      ],
      "level": "<medium>medium</medium>",
      "correct": "Managing global state across multiple components",
      "explanation": "useRef is local to a component and not designed for global state. Global state should be managed with context or state management libraries."
    },
   "55": {
      "question": "If you create a ref with const inputRef = useRef(null), how would you focus an input element using that ref?",
      "options": [
        "inputRef.focus()",
        "inputRef.current.focus()",
        "focus(inputRef)",
        "useFocus(inputRef)"
      ],
      "level": "<medium>medium</medium>",
      "correct": "inputRef.current.focus()",
      "explanation": "Refs store their value in the .current property. To call methods on a DOM element (like focus), you must use useRefs current method like this: inputRef.current.focus()."
    },
    "56": {
      "question": "Who is the creator of React?",
      "options": [
        "Mark Zuckerberg",
        "Jordan Walke",
        "Dan Abramov",
        "Evan You"
      ],
      "level": "<medium>medium</medium>",
      "correct": "Jordan Walke",
      "explanation": "React was created by Jordan Walke, a software engineer at Facebook."
    },
    "57": {
      "question": "How long did it take Jordan Walke to create the first version of React?",
      "options": [
        "A weekend",
        "2 weeks",
        "Several months",
        "Over a year"
      ],
      "level": "<medium>medium</medium>",
      "correct": "A weekend",
      "explanation": "Jordan Walke built the first working prototype of React in just a weekend while experimenting with ideas at Facebook."
    },
    "58": {
      "question": "In which year was React first made public?",
      "options": [
        "2009",
        "2011",
        "2013",
        "2015"
      ],
      "level": "<medium>medium</medium>",
      "correct": "2013",
      "explanation": "React was open-sourced and made public by Facebook at JSConf US in May 2013."
    },
    "59": {
      "question": "Why did Jordan Walke decide to create React?",
      "options": [
        "To improve Facebook's news feed performance",
        "To replace jQuery",
        "To build mobile apps",
        "To compete with Angular"
      ],
      "level": "<medium>medium</medium>",
      "correct": "To improve Facebook's news feed performance",
      "explanation": "React was born out of the need to make Facebook's dynamic news feed faster and more efficient."
    },
    "60": {
      "question": "Which company officially maintains React today?",
      "options": [
        "Google",
        "Meta (Facebook)",
        "Microsoft",
        "Airbnb"
      ],
      "level": "<medium>medium</medium>",
      "correct": "Meta (Facebook)",
      "explanation": "React is officially maintained by Meta (formerly Facebook), with contributions from the open-source community."
    },
    "61": {
      "question": "What was React originally called before being open-sourced?",
      "options": [
        "JSX Engine",
        "FaxJS",
        "XHP",
        "FaxDOM"
      ],
      "level": "<medium>medium</medium>",
      "correct": "FaxJS",
      "explanation": "React was first known internally at Facebook as FaxJS before it was renamed and open-sourced."
    },
    "62": {
      "question": "What does JSX stand for in React?",
      "options": [
        "JavaScript XML",
        "Java Syntax Extension",
        "JavaScript Extension",
        "JSON XML"
      ],
      "level": "<medium>medium</medium>",
      "correct": "JavaScript XML",
      "explanation": "JSX stands for JavaScript XML, allowing developers to write HTML-like syntax directly in JavaScript."
    },
    "63": {
      "question": "Why do we use JSX in React?",
      "options": [
        "Because browsers can read JSX directly",
        "To make React code more readable and expressive",
        "Because it replaces JavaScript",
        "To speed up CSS rendering"
      ],
      "level": "<medium>medium</medium>",
      "correct": "To make React code more readable and expressive",
      "explanation": "JSX makes writing UI easier by combining markup with JavaScript logic, though browsers compile it into regular JavaScript."
    },
    "64": {
      "question": "What is Framer Motion in React?",
      "options": [
        "A CSS preprocessor",
        "A React animation library",
        "A testing tool",
        "A state management library"
      ],
      "level": "<medium>medium</medium>",
      "correct": "A React animation library",
      "explanation": "Framer Motion is a popular library for creating animations in React apps using declarative syntax."
    },
    "65": {
      "question": "How do you turn a regular HTML element (like div or section) into an animated element with Framer Motion?",
      "options": [
        "By wrapping it in <AnimatePresence>",
        "By replacing it with motion.div or motion.section",
        "By adding a 'motion' class",
        "By enabling CSS transitions"
      ],
      "level": "<medium>medium</medium>",
      "correct": "By replacing it with motion.div or motion.section",
      "explanation": "Framer Motion provides motion components (motion.div, motion.section, etc.) that act like their HTML counterparts but support animation props."
    },
    "66": {
      "question": "What is the purpose of AnimatePresence in Framer Motion?",
      "options": [
        "To style elements",
        "To animate elements when they enter and leave the React tree",
        "To create global state",
        "To preload images"
      ],
      "level": "<medium>medium</medium>",
      "correct": "To animate elements when they enter and leave the React tree",
      "explanation": "AnimatePresence enables exit animations when components are removed and enter animations when they are added."
    },
    "67": {
      "question": "How do we import Motion animations into our JSX file?",
      "options": [
        "import { motion } from 'framer-motion';",
        "import [ Motions ] from 'motion';",
        "import 'framer-motion' from motion ;",
        "{ motion }"
      ],
      "level": "<medium>medium</medium>",
      "correct": "import { motion } from 'framer-motion';",
      "explanation": "To use Framer Motion animations, we import it just like any other React library."
    },
    "68": {
      "question": "When using <motion.section>, how do we add animations to it?",
      "options": [
        "<motion.section initial={{...}} animate={{...}} transition={{...}}",
        "Using <motion.section> automatically applies animations",
        "<motion.section initial=[...] animate=[...] transition=[...]",
        "<motion.section createAnimation={{...}}"
      ],
      "level": "<medium>medium</medium>",
      "correct": "<motion.section initial={{...}} animate={{...}} transition={{...}}",
      "explanation": "To animate a motion component, we define its starting state (initial), the target state (animate), and how it transitions between them (transition)."
    },
    "69": {
      "question": "What is the purpose of the `exit` prop in Framer Motion, and how is it used?",
      "options": [
        "It defines how an element animates when it leaves the React tree",
        "It starts the animation immediately on mount",
        "It resets the animation back to initial state",
        "It makes the animation loop forever"
      ],
      "level": "<medium>medium</medium>",
      "correct": "It defines how an element animates when it leaves the React tree",
      "explanation": "The `exit` prop is used together with <AnimatePresence> to control how a component animates when it is removed from the DOM. For example: `<motion.div exit={{ opacity: 0 }} />` makes the element fade out when unmounted."
    },
    "70": {
      "question": "What is a custom hook in React?",
      "options": [
        "A new lifecycle method",
        "A function that starts with 'use' and reuses hook logic",
        "A CSS utility",
        "A way to create new DOM APIs"
      ],
      "level": "<medium>medium</medium>",
      "correct": "A function that starts with 'use' and reuses hook logic",
      "explanation": "Custom hooks are regular JavaScript functions that start with 'use' and allow reusing stateful logic across components."
    },
    "71": {
      "question": "When should you use a custom hook?",
      "options": [
        "When repeating the same logic in multiple components",
        "Only when using class components",
        "Whenever you want a faster app",
        "When adding CSS animations"
      ],
      "level": "<hard>hard</hard>",
      "correct": "When repeating the same logic in multiple components",
      "explanation": "Custom hooks are ideal when you need to reuse logic like data fetching, form handling, or subscriptions in multiple places. A custom hook can use both useState, useEffect, and useRef at the same time."
    },
    "72": {
      "question": "Why do we create custom hooks?",
      "options": [
        "To avoid duplicate logic and make code cleaner",
        "To replace React components",
        "To handle CSS styling",
        "To optimize server rendering only"
      ],
      "level": "<hard>hard</hard>",
      "correct": "To avoid duplicate logic and make code cleaner",
      "explanation": "Custom hooks extract reusable logic, reducing duplication and making components easier to read and maintain."
    },
    "73": {
      "question": "What rule must custom hooks follow?",
      "options": [
        "They can be called conditionally",
        "They must start with the word 'use'",
        "They must return JSX",
        "They can only be used in App.js"
      ],
      "level": "<hard>hard</hard>",
      "correct": "They must start with the word 'use'",
      "explanation": "Custom hooks must start with 'use' so React can apply its rules of hooks properly."
    },
    "74": {
      "question": "Consider the code: const [count, setCount] = useState(0); What happens if you call setCount(count + 1) directly inside the component body (render) without a condition?",
      "options": [
        "It updates the state normally without issues",
        "It causes an infinite re-render loop",
        "It throws a compile-time error",
        "React ignores the state update"
      ],
      "level": "<hard>hard</hard>",
      "correct": "It causes an infinite re-render loop",
      "explanation": "Calling a state setter (like setState) directly during render will trigger a state change immediately, which causes the component to re-render again. Without a condition to prevent repeated calls, this creates an infinite render loop, often freezing the UI. Proper usage is to call state setters in event handlers, useEffect, or conditional logic, not directly in the main render."
    },
    "75": {
      "question": "JSX stands for JavaScript XML, but what does that actually mean in React?",
      "options": [
        "It lets us write HTML directly inside JavaScript",
        "It replaces JavaScript completely",
        "It runs HTML code in the browser directly",
        "It makes JavaScript compile into CSS"
      ],
      "level": "<hard>hard</hard>",
      "correct": "It lets us write HTML directly inside JavaScript",
      "explanation": "JSX is a syntax extension that allows mixing HTML-like code inside JavaScript(for example: mixing eggs and flour to get Pancakes). It isn't HTML itself, but gets compiled into React.createElement calls."
    },
    "76": {
      "question": "How can React be described in the simplest, most beginner-friendly way?",
      "options": [
        "It's like baking, where you mix eggs and flour to make pancakes",
        "It's like an atom, because everything works at atomic speed",
        "It's like a jet plane, powered by its libraries",
        "It cannot be described in simple human language"
      ],
      "level": "<hard>hard</hard>",
      "correct": "It's like baking, where you mix eggs and flour to make pancakes",
      "explanation": "React is similar to the baking process — we mix HTML and JavaScript together, and the result is something useful and powerful, just like delicious pancakes."
    },
    "77": {
      "question": "Which React team member introduced the concept of Hooks in 2018?",
      "options": [
        "Jordan Walke",
        "Dan Abramov",
        "Andrew Clark",
        "Sebastian Markbåge"
      ],
      "level": "<hard>hard</hard>",
      "correct": "Dan Abramov",
      "explanation": "Dan Abramov revealed Hooks at React Conf 2018, making state and effects possible without class components."
    },
    "78": {
      "question": "What is the secret reason React Fiber (the rewrite of React) was created?",
      "options": [
        "To improve server-side rendering",
        "To support async rendering and scheduling",
        "To make JSX faster",
        "To replace Redux"
      ],
      "level": "<hard>hard</hard>",
      "correct": "To support async rendering and scheduling",
      "explanation": "React Fiber was a complete rewrite of React's core algorithm to allow interruptible rendering, prioritization, and smooth async updates."
    },
    "79": {
      "question": "Which React feature was inspired by a PHP library used at Facebook?",
      "options": [
        "JSX",
        "Hooks",
        "Context API",
        "Concurrent Mode"
      ],
      "level": "<hard>hard</hard>",
      "correct": "JSX",
      "explanation": "JSX was inspired by Facebook's PHP library XHP, which allowed mixing XML-like syntax with PHP code."
    },
    "80": {
      "question": "We use JSON files to store translations, but where do we usually keep the collection of language files?",
      "options": [
        "In the assets folder",
        "In the locale folder",
        "In the public folder",
        "Outside the project files"
      ],
      "level": "<hard>hard</hard>",
      "correct": "In the locale folder",
      "explanation": "When building a website with multi-language support, each language's JSON file is typically stored in a 'locale' folder to organize translations efficiently."
    }
  },
  "custom": {
    "1": {
      "question": "In Tailwind CSS, which of the following will create a blend of two colors (red and blue) diagonally?",
      "options": [
        "bg-gradient-to-r from-red-500 to-blue-500",
        "bg-gradient-to-t from-red-500 to-blue-500",
        "bg-diagonal from-red-500 to-blue-500",
        "bg-gradient-diagonal from-red-500 to-blue-500"
      ],
      "level": "<easy>easy</easy>",
      "correct": "bg-gradient-to-t from-red-500 to-blue-500",
      "explanation": "In Tailwind, `to-t` makes a gradient go from bottom to top (diagonal). Other directions are straight lines or invalid."
    },
    "2": {
      "question": "Which React hook allows you to store a value that persists across renders but doesn't trigger re-renders when changed?",
      "options": [
        "useState",
        "useEffect",
        "useRef",
        "useMemo"
      ],
      "level": "<easy>easy</easy>",
      "correct": "useRef",
      "explanation": "`useRef` stores a mutable value that survives re-renders without causing the component to re-render when updated."
    },
    "3": {
      "question": "What will `console.log([] + {});` output in JavaScript?",
      "options": [
        "[object Object]",
        "0",
        "NaN",
        "''" 
      ],
      "level": "<easy>easy</easy>",
      "correct": "[object Object]",
      "explanation": "In JavaScript, adding an array to an object converts both to strings: `[]` becomes `''`, `{}` becomes `'[object Object]'`, resulting in `'[object Object]'`."
    },
    "4": {
      "question": "In HTML, which tag is **not standard** but sometimes used to create collapsible content?",
      "options": [
        "<details>",
        "<summary>",
        "<collapse>",
        "<dialog>"
      ],
      "level": "<easy>easy</easy>",
      "correct": "<collapse>",
      "explanation": "`<collapse>` is not a standard HTML tag; `<details>` and `<summary>` are the standard collapsible elements."
    },
    "5": {
      "question": "Which React icon library allows you to import only individual icons to reduce bundle size?",
      "options": [
        "react-icons",
        "font-awesome",
        "ionicons",
        "material-icons"
      ],
      "level": "<easy>easy</easy>",
      "correct": "react-icons",
      "explanation": "`react-icons` supports tree-shaking so you can import only the icons you need."
    },
    "6": {
      "question": "What will `console.log([] * 2);` output in JavaScript?",
      "options": [
        "[]",
        "0",
        "NaN",
        "[,]"
      ],
      "level": "<easy>easy</easy>",
      "correct": "0",
      "explanation": "An empty array converts to `0` in numeric operations, so multiplying by 2 results in 0."
    },
    "7": {
      "question": "Which Tailwind class will create a background with **multiple colors blended at 50% opacity**?",
      "options": [
        "bg-gradient-to-r from-red-500/50 to-blue-500/50",
        "bg-mix-red-blue",
        "bg-mix-red-blue from-red/50 to-blue/50",
        "bg-blend-multiply"
      ],
      "level": "<easy>easy</easy>",
      "correct": "bg-gradient-to-r from-red-500/50 to-blue-500/50",
      "explanation": "Tailwind allows `/50` syntax to set 50% opacity on gradient colors, creating semi-transparent blends."
    },
    "8": {
      "question": "In React, which custom hook would you likely create to handle fetching data and storing it in state?",
      "options": [
        "useDataFetch",
        "useEffectFetch",
        "useCustomState",
        "useFetchHook"
      ],
      "level": "<easy>easy</easy>",
      "correct": "useDataFetch",
      "explanation": "Custom hooks usually start with `use` and encapsulate logic like data fetching, e.g., `useDataFetch`."
    },
    "9": {
      "question": "Which of these CSS units is relative to the **root element's font size**?",
      "options": [
        "em",
        "rem",
        "vh",
        "vw"
      ],
      "level": "<easy>easy</easy>",
      "correct": "rem",
      "explanation": "`rem` stands for 'root em' and scales relative to the root element's font size, unlike `em` which is relative to the parent."
    },
    "10": {
      "question": "In JS, if you run `const a = b = 5;`, what happens?",
      "options": [
        "a and b are both local variables",
        "b becomes global, a is local",
        "Both throw an error",
        "a becomes global, b is local"
      ],
      "level": "<easy>easy</easy>",
      "correct": "b becomes global, a is local",
      "explanation": "Without `var`, `let`, or `const`, `b = 5` creates a global variable; `const a = ...` declares a local constant."
    },
    "11": {
      "question": "In HTML, which tag can be used to embed another HTML page inside the current page?",
      "options": [
        "<iframe>",
        "<embed-page>",
        "<include>",
        "<frame>"
      ],
      "level": "<easy>easy</easy>",
      "correct": "<iframe>",
      "explanation": "The `<iframe>` tag allows embedding another HTML document within the current page. Other tags do not serve this purpose."
    },
    "12": {
      "question": "What will this JavaScript expression output: `[] + []`?",
      "options": [
        "0",
        "undefined",
        "'' (empty string)",
        "[]"
      ],
      "level": "<easy>easy</easy>",
      "correct": "'' (empty string)",
      "explanation": "In JavaScript, using the `+` operator with arrays converts them to strings, so `[] + []` results in an empty string."
    },
    "13": {
      "question": "Which Tailwind utility creates a gradient background from blue to green?",
      "options": [
        "bg-gradient-to-r from-blue-500 to-green-500",
        "gradient-blue-green",
        "bg-blue-green-gradient",
        "bg-gradient-blue-to-green"
      ],
      "level": "<easy>easy</easy>",
      "correct": "bg-gradient-to-r from-blue-500 to-green-500",
      "explanation": "Tailwind uses `bg-gradient-to-{direction}` with `from-{color}` and `to-{color}` to define gradient backgrounds."
    },
    "14": {
      "question": "In React, what does the `key` prop help with in lists?",
      "options": [
        "Changing the component's style",
        "Tracking elements for efficient re-rendering",
        "Assigning unique IDs for CSS",
        "Animating components automatically"
      ],
      "level": "<easy>easy</easy>",
      "correct": "Tracking elements for efficient re-rendering",
      "explanation": "React uses `key` to identify elements between renders so it can update only the changed items efficiently."
    },
    "15": {
      "question": "What is the output of `console.log([] * 2);` in JavaScript?",
      "options": [
        "[]",
        "0",
        "NaN",
        "TypeError"
      ],
      "level": "<easy>easy</easy>",
      "correct": "0",
      "explanation": "JavaScript converts the empty array to a number, which becomes 0. Multiplying 0 by 2 results in 0."
    },
    "16": {
      "question": "Which HTML attribute allows you to provide alternative text for images?",
      "options": [
        "alt",
        "title",
        "src-alt",
        "description"
      ],
      "level": "<easy>easy</easy>",
      "correct": "alt",
      "explanation": "The `alt` attribute provides alternative text for images if they cannot be displayed and improves accessibility."
    },
    "17": {
      "question": "In React, which hook is used for managing state inside functional components?",
      "options": [
        "useState",
        "useEffect",
        "useContext",
        "useReducer"
      ],
      "level": "<easy>easy</easy>",
      "correct": "useState",
      "explanation": "`useState` is the standard React hook to add state to functional components."
    },
    "18": {
      "question": "Which CSS property is used to control the spacing between letters?",
      "options": [
        "letter-spacing",
        "word-spacing",
        "text-indent",
        "line-height"
      ],
      "level": "<easy>easy</easy>",
      "correct": "letter-spacing",
      "explanation": "`letter-spacing` adjusts the space between characters in text."
    },
    "19": {
      "question": "In JavaScript, what is the result of `typeof null`?",
      "options": [
        "\"null\"",
        "\"object\"",
        "\"undefined\"",
        "\"number\""
      ],
      "level": "<easy>easy</easy>",
      "correct": "\"object\"",
      "explanation": "Due to a historical bug, `typeof null` returns 'object' even though null is not an object."
    },
    "20": {
      "question": "How can we create stylish gradient text using Tailwind CSS?",
      "options": [
        "By applying only text color classes",
        "By downloading a gradient text from the internet",
        "By using `text-transparent`, `bg-clip-text`, and a background gradient",
        "By using private CSS libraries"
      ],
      "level": "<easy>easy</easy>",
      "correct": "By using `text-transparent`, `bg-clip-text`, and a background gradient",
      "explanation": "To create modern gradient text, make the text transparent, apply `bg-clip-text`, and set a background gradient. The text will then display the gradient colors."
    },
    "21": {
      "question": "Which HTML tag is used to define self-contained content, often with its own heading?",
      "options": [
        "<section>",
        "<div>",
        "<article>",
        "<span>"
      ],
      "level": "<easy>easy</easy>",
      "correct": "<article>",
      "explanation": "The `<article>` tag represents self-contained content that can have its own heading and be distributed independently."
    },
    "22": {
      "question": "What will `console.log([] == ![]);` output in JavaScript?",
      "options": [
        "true",
        "false",
        "undefined",
        "TypeError"
      ],
      "level": "<easy>easy</easy>",
      "correct": "true",
      "explanation": "Due to type coercion: `![]` becomes false, `[] == false` evaluates to true in JavaScript."
    },
    "23": {
      "question": "Which Tailwind class adds a shadow effect to elements?",
      "options": [
        "shadow",
        "box-shadow",
        "shadow-effect",
        "drop-shadow"
      ],
      "level": "<easy>easy</easy>",
      "correct": "shadow",
      "explanation": "Tailwind uses `shadow` (and variations like `shadow-md`) to apply box-shadow effects to elements."
    },
    "24": {
      "question": "In React, what is the primary reason to create a custom hook?",
      "options": [
        "To style components",
        "To share reusable stateful logic",
        "To manipulate the DOM directly",
        "To replace components"
      ],
      "level": "<easy>easy</easy>",
      "correct": "To share reusable stateful logic",
      "explanation": "Custom hooks allow developers to encapsulate and reuse stateful logic across multiple components."
    },
    "25": {
      "question": "Which CSS property allows you to control how overflowing content is handled?",
      "options": [
        "overflow",
        "text-overflow",
        "clip",
        "content-overflow"
      ],
      "level": "<easy>easy</easy>",
      "correct": "overflow",
      "explanation": "`overflow` determines how content that exceeds an element's box is displayed (hidden, scroll, auto, or visible)."
    },
    "26": {
      "question": "What does the `useEffect` hook with an empty dependency array (`[]`) do in React?",
      "options": [
        "Runs on every render",
        "Runs once after the first render",
        "Never runs",
        "Runs only when state changes"
      ],
      "level": "<easy>easy</easy>",
      "correct": "Runs once after the first render",
      "explanation": "An empty dependency array makes `useEffect` run only once, mimicking componentDidMount behavior."
    },
    "27": {
      "question": "Which Tailwind CSS class applies directly to phone (mobile) screens?",
      "options": [
        "max-w-3xl",
        "sm:max-w-3xl",
        "md:max-w-3xl",
        "lg:max-w-3xl"
      ],
      "level": "<easy>easy</easy>",
      "correct": "max-w-3xl",
      "explanation": "In Tailwind CSS, unprefixed classes apply to all screen sizes by default, including phones. Prefixes like sm:, md:, and lg: apply styles starting from that breakpoint and up."
    },
    "28": {
      "question": "Which HTML attribute can be used to make an input field required before form submission?",
      "options": [
        "required",
        "validate",
        "mandatory",
        "check"
      ],
      "level": "<easy>easy</easy>",
      "correct": "required",
      "explanation": "The `required` attribute ensures that the input must be filled before the form can be submitted."
    },
    "29": {
      "question": "In Tailwind, how do you apply a gradient background from top to bottom?",
      "options": [
        "bg-gradient-to-b",
        "bg-gradient-top-bottom",
        "gradient-vertical",
        "bg-top-bottom-gradient"
      ],
      "level": "<easy>easy</easy>",
      "correct": "bg-gradient-to-b",
      "explanation": "`bg-gradient-to-b` in Tailwind applies a gradient from top to bottom; `from-{color}` and `to-{color}` define the colors."
    },
    "30": {
      "question": "Which HTML tag is suitable for defining navigation links for a website?",
      "options": [
        "<nav>",
        "<menu>",
        "<section>",
        "<header>"
      ],
      "level": "<easy>easy</easy>",
      "correct": "<nav>",
      "explanation": "The `<nav>` tag defines a set of navigation links for a website or application."
    },
    "31": {
      "question": "When we upload a web project to Github and if we use the Routing system in this project, what fact should we be aware of?:",
      "options": [
        "For path='/'(source file), not using the slash will cause an unwanted error.",
        "That routing is not allowed on GitHub.",
        "That it is possible to completely delete the website.",
        "That there is no danger, because routing is completely safe."
      ],
      "level": "<medium>medium</medium>",
      "correct": "For path='/'(source file), not using the slash will cause an unwanted error.",
      "explanation": "When we upload a project to a global server and if we use routing to link multiple files, it is necessary to specify the source file with a slash: path='/'."
    },
    "32": {
      "question": "In React, which hook allows you to persist values between renders without causing a re-render?",
      "options": [
        "useState",
        "useEffect",
        "useRef",
        "useMemo"
      ],
      "level": "<medium>medium</medium>",
      "correct": "useRef",
      "explanation": "`useRef` can store a mutable value that persists across renders without triggering a component update."
    },
    "33": {
      "question": "Which CSS property is used to change the stacking order of positioned elements?",
      "options": [
        "z-index",
        "order",
        "stack-order",
        "position-level"
      ],
      "level": "<medium>medium</medium>",
      "correct": "z-index",
      "explanation": "`z-index` determines the stack order of elements with a position property (relative, absolute, fixed, or sticky)."
    },
    "34": {
      "question": "What will happen if you use `const arr = [...null];` in JavaScript?",
      "options": [
        "Creates an empty array",
        "Throws a TypeError",
        "Creates an array with null as its element",
        "Undefined behavior"
      ],
      "level": "<medium>medium</medium>",
      "correct": "Throws a TypeError",
      "explanation": "You cannot spread `null` because it's not iterable; this results in a TypeError."
    },
    "35": {
      "question": "In Tailwind, which class can mix multiple gradient colors in a single element?",
      "options": [
        "bg-gradient-to-r from-red-500 via-yellow-300 to-green-500",
        "bg-mix-gradient-red-yellow-green",
        "gradient-colors-red-yellow-green",
        "bg-multi-gradient"
      ],
      "level": "<medium>medium</medium>",
      "correct": "bg-gradient-to-r from-red-500 via-yellow-300 to-green-500",
      "explanation": "Tailwind supports multi-color gradients using `from-{color} via-{color} to-{color}` syntax."
    },
    "36": {
      "question": "Which React icon library is commonly used for scalable vector icons?",
      "options": [
        "react-fontawesome",
        "react-icons",
        "react-vectors",
        "react-svg-icons"
      ],
      "level": "<medium>medium</medium>",
      "correct": "react-icons",
      "explanation": "`react-icons` provides a variety of SVG icons from popular libraries in React projects."
    },
    "37": {
      "question": "What is the difference between `<output>` and `<progress>` in HTML?",
      "options": [
        "<output> is deprecated as var, <progress> is a relatively new method",
        "<output> is interactive, <progress> is not",
        "No difference, they are synonyms",
        "<output> shows a result, <progress> shows progress"
      ],
      "level": "<medium>medium</medium>",
      "correct": "<output> shows a result, <progress> shows progress",
      "explanation": "`<output>` is used to display results from scripts or calculations, while `<progress>` shows a completion status."
    },
    "38": {
      "question": "What will `console.log({} == {});` print in JavaScript?",
      "options": [
        "true",
        "false",
        "undefined",
        "TypeError"
      ],
      "level": "<medium>medium</medium>",
      "correct": "false",
      "explanation": "Objects are compared by reference, not value, so two different empty objects are not equal."
    },
    "39": {
      "question": "In CSS, what does `:nth-child(odd)` select?",
      "options": [
        "Only the first child",
        "All even-numbered child elements",
        "All odd-numbered child elements",
        "Only elements with odd IDs"
      ],
      "level": "<medium>medium</medium>",
      "correct": "All odd-numbered child elements",
      "explanation": "`:nth-child(odd)` targets child elements in odd positions (1st, 3rd, 5th, etc.) within a parent."
    },
    "40": {
      "question": "Which React feature allows splitting logic into smaller, reusable functions for components?",
      "options": [
        "Higher Order Components",
        "Custom Hooks",
        "JSX fragments",
        "Prop drilling"
      ],
      "level": "<medium>medium</medium>",
      "correct": "Custom Hooks",
      "explanation": "Custom Hooks let you extract and reuse component logic without changing component hierarchy."
    },
    "41": {
      "question": "How can you write fully functional JavaScript code on a single line while keeping readability?",
      "options": [
        "Write multiple statements separated by semicolons",
        "It's impossible to do",
        "Use only global variables",
        "Use arrow functions and ternary operators smartly"
      ],
      "level": "<medium>medium</medium>",
      "correct": "Use arrow functions and ternary operators smartly",
      "explanation": "Tricky interview questions like this test your strategy: you can compress logic using arrow functions, ternary operators, and chaining methods while keeping code functional."
    },
    "42": {
      "question": "What is the maximum number of languages that the i18n React library can support?",
      "options": [
        "Several",
        "Only one",
        "Only five",
        "There is no limit"
      ],
      "level": "<medium>medium</medium>",
      "correct": "There is no limit",
      "explanation": "The i18n React library has no limit on the number of languages. You can add as many as you want, you just need to create a js file (i18n-enabled) and a json file for each language."
    },
    "43": {
      "question": "After completing the YouTube courses, what should a web developer do?",
      "options": [
        "It is advisable to create several projects and then start applying for a job.",
        "It is advisable to stop at youtube tutorials and practice on them.",
        "It is advisable to continue learning other languages ​​(python, css, java)",
        "You should quit the studies and start looking for a simple job."
      ],
      "level": "<medium>medium</medium>",
      "correct": "It is advisable to create several projects and then start applying for a job.",
      "explanation": "After completing theoretical knowledge, you need to work on practice(building projects), which will help you analyze the tools (what, where, and how they are used), and use them better."
    },
    "44": {
      "question": "How can we import currency rates, like languages, into React?",
      "options": [
        "Using an API, such as fetch or axios",
        "Only read them from the local file",
        "Only by writing in hardcoded code",
        "We cannot import currency rates into React."
      ],
      "level": "<medium>medium</medium>",
      "correct": "Using an API, such as fetch or axios",
      "explanation": "In React, currency rates or any dynamic data is fetched from APIs, mostly using fetch() or axios, and the result is stored in state or context."
    },
    "45": {
      "question": "In CSS, what happens if you apply `position: sticky` to an element inside a scrollable parent?",
      "options": [
        "It stays fixed relative to the viewport",
        "It sticks within the parent's scroll area",
        "It behaves like relative",
        "It gets ignored"
      ],
      "level": "<medium>medium</medium>",
      "correct": "It sticks within the parent's scroll area",
      "explanation": "`position: sticky` allows an element to stick inside its container, stopping when the container scrolls out of view."
    },
    "46": {
      "question": "Which was created first: HTML or JavaScript?",
      "options": [
        "HTML",
        "Javascript",
        "Both together",
        "None"
      ],
      "level": "<medium>medium</medium>",
      "correct": "HTML",
      "explanation": "HTML was created in 1991 for the structure of web pages, and the programming language JavaScript appeared in 1995 for dynamics and interactivity."
    },
    "47": {
      "question": "When we start working on the project, what are the 3 important rules to consider?:",
      "options": [
        "That it must be responsive, logical, and reliable.",
        "That the main thing is to use all the tools we have learned to build it.",
        "There are no 3 rules and we don't need to think about such things.",
        "That it should appeal to everyone, be marketable and light."
      ],
      "level": "<medium>medium</medium>",
      "correct": "That it must be responsive, logical, and reliable.",
      "explanation": "Components such as: conceptual clarity, language support, responsive design, and proper layout play a critical role when creating a project."
    },
    "48": {
      "question": "In JavaScript, which of these will throw an error immediately?",
      "options": [
        "console.log(undefinedVar);",
        "const a = 5; let b = a;",
        "function test(){ return a; } test();",
        "const obj = {}; obj.key = 1;"
      ],
      "level": "<medium>medium</medium>",
      "correct": "function test(){ return a; } test();",
      "explanation": "function test(){ return a; } test(); will cause a ReferenceError because a is not defined anywhere."
    },
    "49": {
      "question": "In an interview, you're asked: 'How would you efficiently toggle dark and light themes in a React component using Tailwind?' Which approach shows best understanding?",
      "options": [
        "Use a state variable and conditional class names with template literals",
        "Manually rewrite CSS for each theme",
        "Create separate components for dark and light themes",
        "Rely on external libraries only without Tailwind classes"
      ],
      "level": "<medium>medium</medium>",
      "correct": "Use a state variable and conditional class names with template literals",
      "explanation": "By storing the current theme in state and applying conditional Tailwind classes (or using libraries like `clsx`), you can toggle themes efficiently and dynamically in a single component."
    },
    "50": {
      "question": "Which strategy allows writing minimal but fully functional HTML forms in a single line while maintaining accessibility?",
      "options": [
        "Using semantic elements with inline attributes",
        "Using only divs and spans",
        "Compressing all inputs with `display:none`",
        "Using iframes for each field"
      ],
      "level": "<medium>medium</medium>",
      "correct": "Using semantic elements with inline attributes",
      "explanation": "You can create compact HTML forms by using semantic tags like `<label>` and `<input>` with proper inline attributes, maintaining functionality and accessibility."
    },
    "51": {
      "question": "What is HTTP?",
      "options": [
        "A programming language",
        "A protocol for transferring data over the web",
        "A database system",
        "A web browser"
      ],
      "level": "<hard>hard</hard>",
      "correct": "A protocol for transferring data over the web",
      "explanation": "HTTP (HyperText Transfer Protocol) is the foundation of data communication on the web, used to request and transfer web resources."
    },
    "52": {
      "question": "What does an HTTP request consist of?",
      "options": [
        "Only the URL",
        "Method, headers, body (optional), and URL",
        "Only headers",
        "Only from the html the body"
      ],
      "level": "<hard>hard</hard>",
      "correct": "Method, headers, body (optional), and URL",
      "explanation": "HTTP requests include a method (GET, POST, etc.), headers (metadata), an optional body (for data), and the URL for the resource."
    },
    "53": {
      "question": "What HTTP request methods do you know?",
      "options": [
        "GET, POST, PUT, PATCH, DELETE, OPTIONS, HEAD",
        "ADD, REMOVE, UPDATE",
        "FETCH, SEND, RECEIVE",
        "CONNECT, LINK, UNLINK"
      ],
      "level": "<hard>hard</hard>",
      "correct": "GET, POST, PUT, PATCH, DELETE, OPTIONS, HEAD",
      "explanation": "GET, POST, PUT, PATCH, DELETE, OPTIONS, HEAD, These are the main HTTP methods used to request, create, update, or delete resources in web communication."
    },
    "54": {
      "question": "What is the semantic difference between PUT and PATCH?",
      "options": [
        "PUT replaces the entire resource, PATCH updates only parts",
        "PUT updates parts, PATCH replaces everything",
        "No difference",
        "PUT is slower than PATCH"
      ],
      "level": "<hard>hard</hard>",
      "correct": "PUT replaces the entire resource, PATCH updates only parts",
      "explanation": "PUT is idempotent and sends the full resource; PATCH is for partial updates."
    },
    "55": {
      "question": "What is a REST API?",
      "options": [
        "A design pattern for backend services using HTTP",
        "A type of database",
        "A programming language",
        "It's impossible to describe"
      ],
      "level": "<hard>hard</hard>",
      "correct": "A design pattern for backend services using HTTP",
      "explanation": "REST APIs follow constraints like statelessness, client-server separation, and uniform interfaces, and are commonly used for web services."
    },
    "56": {
      "question": "What is Git?",
      "options": [
        "A text editor",
        "A version control system",
        "A programming language",
        "A web server"
      ],
      "level": "<hard>hard</hard>",
      "correct": "A version control system",
      "explanation": "Git is a distributed version control system for tracking changes in source code during software development."
    },
    "57": {
      "question": "What are the differences between git merge and git rebase?",
      "options": [
        "Merge creates a commit combining histories, rebase rewrites commits sequentially",
        "Merge deletes branches, rebase copies them",
        "Merge and rebase are identical",
        "Rebase creates a new branch, merge doesn't"
      ],
      "level": "<hard>hard</hard>",
      "correct": "Merge creates a commit combining histories, rebase rewrites commits sequentially",
      "explanation": "Merge preserves all branch history and creates a merge commit; rebase reapplies commits on top of another base, creating a linear history."
    },
    "58": {
      "question": "On what principles is OOP based?",
      "options": [
        "Encapsulation, Inheritance, Polymorphism, Abstraction",
        "Loops, Conditions, Functions",
        "HTML, CSS, JS",
        "REST, HTTP, API"
      ],
      "level": "<hard>hard</hard>",
      "correct": "Encapsulation, Inheritance, Polymorphism, Abstraction",
      "explanation": "Object-Oriented Programming is structured around these four pillars to organize code and model real-world entities."
    },
    "59": {
      "question": "What is package.json for in a Node.js project?",
      "options": [
        "Stores HTML templates",
        "Manages project dependencies, scripts, and metadata",
        "Compiles JavaScript to CSS",
        "Stores Git commits"
      ],
      "level": "<hard>hard</hard>",
      "correct": "Manages project dependencies, scripts, and metadata",
      "explanation": "package.json contains project information, dependencies, scripts, and other configurations needed to run and maintain a Node.js project."
    },
    "60": {
      "question": "What data types exist in JavaScript?",
      "options": [
        "String, Number, Boolean, Null, Undefined, Object, Symbol, BigInt",
        "String, Integer, Boolean, Object",
        "Number, Char, Boolean, Array",
        "Text, Number, Boolean, Function"
      ],
      "level": "<hard>hard</hard>",
      "correct": "String, Number, Boolean, Null, Undefined, Object, Symbol, BigInt",
      "explanation": "JavaScript has 7 primitive data types: String, Number, Boolean, Null, Undefined, Symbol, and BigInt. Everything else (like Arrays, Functions, and Dates) falls under the single non-primitive type: Object."
    },
    "61": {
      "question": "What is the difference between null and undefined?",
      "options": [
        "null means no value assigned, undefined means variable exists but not initialized",
        "They are identical",
        "undefined is a string, null is a number",
        "null is only in CSS"
      ],
      "level": "<hard>hard</hard>",
      "correct": "null means no value assigned, undefined means variable exists but not initialized",
      "explanation": "null is an intentional absence of value; undefined occurs when a variable has been declared but not assigned."
    },
    "62": {
      "question": "What will we get after running this code: let funcs = []; for (var i = 0; i < 3; i++) { funcs.push(() => i);} console.log(funcs[0](), funcs[1](), funcs[2]());",
      "options": [
        "0, 1, 2",
        "3, 3, 3",
        "undefined, undefined, undefined",
        "Error: i is not defined"
      ],
      "level": "<hard>hard</hard>",
      "correct": "3, 3, 3",
      "explanation": "Because 'var' is function-scoped, all the arrow functions share the same 'i'. By the time they run, the loop is finished and i = 3, so every function returns 3."
    },
    "63": {
      "question": "Is it possible to write a JavaScript program that completely destroys your PC?",
      "options": [
        "Yes, with an infinite loop it can burn your hardware",
        "No, JavaScript runs in a sandbox and cannot damage hardware",
        "Maybe, if you use too many setTimeout functions",
        "It depends on the operating system"
      ],
      "level": "<hard>hard</hard>",
      "correct": "No, JavaScript runs in a sandbox and cannot damage hardware",
      "explanation": "JavaScript is sandboxed, meaning it can freeze a browser tab or eat memory, but it cannot physically damage your PC. At worst, an infinite loop or huge memory usage can crash the environment, but not destroy hardware."
    },
    "64": {
      "question": "Before we start working in React, we type `cd my-app` in the terminal. What does `cd` stand for?",
      "options": [
        "cd - create directory, it creates a new file.",
        "cd - change directory, it will take you to the desired file.",
        "cd - close directory, processes are terminated.",
        "cd - clean document, it cleans the document history."
      ],
      "level": "<hard>hard</hard>",
      "correct": "cd - change directory, it will take you to the desired file.",
      "explanation": "`cd` = change directory. It changes the shell's working path so commands like `npm run dev` know which project (folder) to execute in."
    },
    "65": {
      "question": "What is a Promise in JavaScript?",
      "options": [
        "An object representing a future value of an asynchronous operation",
        "A function that always returns true",
        "Promise returns a new file containing the text in JSON format.",
        "It is a secret tool of JavaScript."
      ],
      "level": "<hard>hard</hard>",
      "correct": "An object representing a future value of an asynchronous operation",
      "explanation": "A promise is an object that will be available in the future. It will either resolve or be rejected, depending on the result we will process it, in case it resolves we use `.then()`, for errors we use `.catch()`."
    },
    "66": {
      "question": "Specifically, what does a client expect from a hired developer?",
      "options": [
        "Clean (correct) code.",
        "That the developer can achieve the impossible.",
        "The client only expects the desired result.",
        "The client expects fast delivery."
      ],
      "level": "<hard>hard</hard>",
      "correct": "The client only expects the desired result.",
      "explanation": "To put it simply, the client–developer relationship is like a user interacting with AI. No matter how much effort is put in, nobody evaluates the struggle — only the final result matters."
    },
    "67": {
      "question": "What does 'Hero Section' mean in web development?",
      "options": [
        "Hero Section is one of the array libraries.",
        "Hero Section does not exist in web development.",
        "Hero Section is just another name for the Footer.",
        "Hero Section is the first section on the main page."
      ],
      "level": "<hard>hard</hard>",
      "correct": "Hero Section is the first section on the main page.",
      "explanation": "It refers to the very first section of a webpage, usually containing the main heading, call to action, or introductory content."
    },
    "68": {
      "question": "In JavaScript, what exactly the optional chaining operator(`?.`) do?",
      "options": [
        "It safely accesses nested object properties without throwing an error if the value is undefined or null.",
        "In Javascript, we don't have optional chaining operator, it will throw an error.",
        "It checks if we have constant(const) variable in the function.",
        "It depines if the component exist, if so it throws an error."
      ],
      "level": "<hard>hard</hard>",
      "correct": "It safely accesses nested object properties without throwing an error if the value is undefined or null.",
      "explanation": "Optional chaining prevents runtime errors by returning `undefined` if a property doesn't exist, instead of crashing the code."
    },
    "69": {
      "question": "What is the Shadow DOM?",
      "options": [
        "A separate DOM tree embedded inside a web component.",
        "A hidden CSS class.",
        "The opposite mechanism of the DOM.",
        "A type of JavaScript object."
      ],
      "level": "<hard>hard</hard>",
      "correct": "A separate DOM tree embedded inside a web component.",
      "explanation": "Shadow DOM allows web components to encapsulate HTML, CSS, and JS, preventing style and script conflicts."
    },
    "70": {
      "question": "Is it possible to create a new programming language using JavaScript?",
      "options": [
        "Yes, by writing a transpiler or interpreter in JavaScript.",
        "No, JavaScript cannot be used this way.",
        "Only if combined with C++.",
        "It's possible but only for styling languages like CSS."
      ],
      "level": "<hard>hard</hard>",
      "correct": "Yes, by writing a transpiler or interpreter in JavaScript.",
      "explanation": "Languages like TypeScript, CoffeeScript, and Babel are implemented in JavaScript — they translate custom syntax into standard JavaScript."
    },
    "71": {
      "question": "How is class inheritance done in ES6?",
      "options": [
        "Using the `extends` keyword and calling `super()`.",
        "By manually copying all methods.",
        "Only by manually modifying the prototype.",
        "Using `Object.assign`."
      ],
      "level": "<hard>hard</hard>",
      "correct": "Using the `extends` keyword and calling `super()`.",
      "explanation": "In ES6, one class can extend another with `class Child extends Parent`, and constructors use `super()` to call the parent."
    },
    "72": {
      "question": "What is the difference between sessionStorage and localStorage?",
      "options": [
        "sessionStorage works until the browser is closed, while localStorage persists across sessions.",
        "There is no difference between them.",
        "sessionStorage stores files, while localStorage stores text.",
        "sessionStorage is much faster than localStorage."
      ],
      "level": "<hard>hard</hard>",
      "correct": "sessionStorage works until the browser is closed, while localStorage persists across sessions.",
      "explanation": "sessionStorage is temporary storage for a single tab session, while localStorage remains even after closing and reopening the browser."
    },
    "73": {
      "question": "Where are class inheritance and super methods typically used in real-world projects?",
      "options": [
        "They are mostly used in CSS preprocessing.",
        "Only in academic examples, not in real projects.",
        "In building reusable UI components and extending base classes.",
        "They are used only when working with databases."
      ],
      "level": "<hard>hard</hard>",
      "correct": "In building reusable UI components and extending base classes.",
      "explanation": "Think about cases where you don't want to repeat the same logic everywhere. in React you could create a base component that handles translations with i18n and then extend it in different pages. Or a parent class could include logic for saving data to localStorage, and child classes reuse it without rewriting. That's where inheritance and super() shine — letting you share logic across multiple parts of your project without duplication."
    },
    "74": {
      "question": "In Tailwind CSS, how do you create a gradient background that blends two colors?",
      "options": [
        "By using `bg-gradient-to-{direction}` together with `from-{color}` and `to-{color}`.",
        "By writing a CSS `linear-gradient` rule and naming it as a class.",
        "By combining `bg-color-1` + `bg-color-2` classes.",
        "Just by using `bg-gradient`."
      ],
      "level": "<hard>hard</hard>",
      "correct": "By using `bg-gradient-to-{direction}` together with `from-{color}` and `to-{color}`.",
      "explanation": "Tailwind allows gradient backgrounds like this: `bg-gradient-to-r from-blue-500 to-green-500`, creating a smooth color blend."
    },
    "75": {
      "question": "In React, what is a custom hook?",
      "options": [
        "A function starting with 'use' that contains reusable stateful logic.",
        "An icon library.",
        "A built-in hook like useState.",
        "A CSS hook that helps with styling."
      ],
      "level": "<hard>hard</hard>",
      "correct": "A function starting with 'use' that contains reusable stateful logic.",
      "explanation": "Custom hooks help avoid repeating logic. For example, you can create `useLocalStorage` to save and load user scores across different components without rewriting the same useEffect code."
    },
    "76": {
      "question": "How can you dynamically load React icons?",
      "options": [
        "React cannot load icons dynamically",
        "We have to create it with Css.",
        "Use HTML img tag",
        "Import icons directly or dynamically with React.lazy"
      ],
      "level": "<hard>hard</hard>",
      "correct": "Import icons directly or dynamically with React.lazy",
      "explanation": "React icons can be imported statically or dynamically using `React.lazy` and `Suspense` to optimize bundle size."
    },
    "77": {
      "question": "Can we create an HTML element styled with CSS directly in JavaScript?",
      "options": [
        "Yes, but if we install an additional library.",
        "No, JavaScript cannot create or style HTML elements.",
        "It depends on typeScript.",
        "Yes, it's possible in JavaScript."
      ],
      "level": "<hard>hard</hard>",
      "correct": "Yes, this is possible in JavaScript.",
      "explanation": "JavaScript can build and style elements on the fly. For example: `const box = document.createElement('div'); box.style.background = 'red'; document.body.appendChild(box);` creates a red box without touching HTML or CSS files."
    },
    "78": {
      "question": "What is the difference between inline, block, and inline-block elements in HTML/CSS?",
      "options": [
        "Inline-block works on the X/Y axis, Inline on the X-axis, Block on the Y-axis.",
        "All behave the same",
        "Inline-block adapts well to width and height, which the other two types cannot.",
        "Only block elements can have padding"
      ],
      "level": "<hard>hard</hard>",
      "correct": "Inline-block adapts well to width and height, which the other two types cannot.",
      "explanation": "CSS display types control how elements render: inline elements flow in text, block elements break lines, and inline-block combines inline flow with box sizing."
    },
    "79": {
      "question": "In JavaScript, what is the result of `console.log([] + {})`?",
      "options": [
        "'0'",
        "'[object Object]'",
        "'[]{}'",
        "Throws an error"
      ],
      "level": "<hard>hard</hard>",
      "correct": "'[object Object]'",
      "explanation": "When adding an array and an object, JS coerces both to strings: [] → '', {} → '[object Object]', so the result is '[object Object]'."
    },
    "80": {
      "question": "In JavaScript, what is the result of `console.log([] * 2)`?",
      "options": [
        "NaN",
        "Throws an error",
        "0",
        "[]"
      ],
      "level": "<hard>hard</hard>",
      "correct": "0",
      "explanation": "JS coerces [] to 0 for numeric operations; 0 * 2 = 0."
    },
    "81": {
      "question": "How can you implement i18n (internationalization) in a React project?",
      "options": [
        "React cannot handle i18n",
        "By writing multiple if statements",
        "Using libraries like react-i18next and JSON translation files",
        "It is written only in CSS, and then used."
      ],
      "level": "<hard>hard</hard>",
      "correct": "Using libraries like react-i18next and JSON translation files",
      "explanation": "react-i18next allows managing multiple languages, translation keys, and dynamic content in React applications."
    },
    "82": {
      "question": "In CSS, what does the `clip-path` property do?",
      "options": [
        "Defines a visible portion of an element using shapes",
        "Changes the opacity of an element",
        "Adds a shadow",
        "Changes element display type"
      ],
      "level": "<hard>hard</hard>",
      "correct": "Defines a visible portion of an element using shapes",
      "explanation": "`clip-path` allows creating complex shapes by defining which part of an element is visible, hiding the rest."
    },
    "83": {
      "question": "How can you prevent a React component from re-rendering unnecessarily?",
      "options": [
        "Using React.render, useFunction, and useState",
        "Always calling setState",
        "Using React.memo, useCallback, and useMemo",
        "Only using class components"
      ],
      "level": "<hard>hard</hard>",
      "correct": "Using React.memo, useCallback, and useMemo",
      "explanation": "These optimizations help avoid unnecessary renders by memoizing components, functions, and computed values."
    },
    "84": {
      "question": "How can you create a fully functional code block on one line in JS for an interview trick?",
      "options": [
        "By copying multiple lines into one",
        "It's impossible",
        "Using only loops",
        "Using arrow functions with ternary operators and immediately invoked expressions"
      ],
      "level": "<hard>hard</hard>",
      "correct": "Using arrow functions with ternary operators and immediately invoked expressions",
      "explanation": "You can compress logic using IIFE `( () => { ... })()` and ternary expressions to perform multi-step operations in a single line."
    },
    "85": {
      "question": "What is the difference between sticky and fixed positioning in CSS?",
      "options": [
        "They both act the same",
        "Sticky works only with flexbox",
        "Sticky scrolls until a point, fixed stays on screen",
        "Sticky is always at the top, fixed only sometimes"
      ],
      "level": "<hard>hard</hard>",
      "correct": "Sticky scrolls until a point, fixed stays on screen",
      "explanation": "Sticky elements act like relative until a scroll threshold, then 'stick'. Fixed elements are always pinned to the viewport, no matter how you scroll."
    },
    "86": {
      "question": "What is the difference between absolute and fixed positioning in CSS?",
      "options": [
        "Fixed only works inside flexbox",
        "Absolute is always centered, fixed is not",
        "They are identical in behavior",
        "Absolute is positioned to nearest positioned parent, fixed to the viewport"
      ],
      "level": "<hard>hard</hard>",
      "correct": "Absolute is positioned to nearest positioned parent, fixed to the viewport",
      "explanation": "Absolute takes its reference from the closest ancestor with position (relative, absolute, sticky, fixed). Fixed ignores parents and attaches directly to the viewport."
    },
    "87": {
      "question": "In JavaScript, what is the difference between call, apply, and bind?",
      "options": [
        "call invokes a function with arguments, apply with array, bind returns a new function",
        "All three are identical",
        "call modifies DOM, apply modifies CSS, bind modifies JS",
        "bind executes immediately"
      ],
      "level": "<hard>hard</hard>",
      "correct": "call invokes a function with arguments, apply with array, bind returns a new function",
      "explanation": "These methods control the `this` context in function invocation with different argument passing approaches."
    },
    "88": {
      "question": "After importing React Icons, how do we render them on the screen?",
      "options": [
        "We pass it in Css: .Icon{...}",
        "We pass it in js: {Icon}",
        "We pass it in Tag: <FaIcon />",
        "React doesn't support Icon imports."
      ],
      "level": "<hard>hard</hard>",
      "correct": "We pass it in Tag: <FaIcon />",
      "explanation": "After selecting the desired Icon and importing it into the JSX file, we place the Icon in a tag for display."
    },
    "89": {
      "question": "What is the difference between relative units (%, rem) in CSS?",
      "options": [
        "% is absolute, while rem is relative to the parent element",
        "% and rem both behave the same, scaling with parent font size",
        "% is relative to the parent element's size, rem is relative to the root (html) font size",
        "% is relative to the viewport width, rem is relative to the parent font size"
      ],
      "level": "<hard>hard</hard>",
      "correct": "% is relative to the parent element's size, rem is relative to the root (html) font size",
      "explanation": "% depends on the size of the parent element (e.g., width: 50% means half of the parent's width). rem, on the other hand, always uses the root element's font-size (commonly 16px by default in browsers). This makes rem more predictable across the whole document."
    },
    "90": {
      "question": "What is the difference between relative units (px, em) in CSS?",
      "options": [
        "px is a fixed absolute unit, em is relative to the parent element's font size",
        "px is relative to the root element, em is relative to the viewport",
        "px and em are both relative to the parent font size",
        "px is fluid like %, while em is fixed"
      ],
      "level": "<hard>hard</hard>",
      "correct": "px is a fixed absolute unit, em is relative to the parent element's font size",
      "explanation": "px is a fixed measurement (1px means 1 device pixel, though scaled on high-DPI screens). em is relative to the font-size of the element's parent. For example, if the parent has font-size: 20px, then 1em = 20px for the child. This makes em useful but also tricky if multiple nested elements scale each other."
    },
    "91": {
      "question": "How can you lazy-load images in HTML?",
      "options": [
        "Using Tailwind methods",
        "Using Javascripts library",
        "Using `loading=\"lazy\"` attribute",
        "Lazy-loading is not possible"
      ],
      "level": "<hard>hard</hard>",
      "correct": "Using `loading=\"lazy\"` attribute",
      "explanation": "HTML5 provides the `loading=\"lazy\"` attribute to defer loading images until they are near the viewport, improving performance."
    },
    "92": {
      "question": "What is the difference between CSS Grid and Flexbox?",
      "options": [
        "Grid is 2D (rows + columns), Flexbox is 1D (row or column)",
        "They are identical",
        "Flexbox can do 2D layouts, Grid cannot",
        "Grid is slower than Flexbox"
      ],
      "level": "<hard>hard</hard>",
      "correct": "Grid is 2D (rows + columns), Flexbox is 1D (row or column)",
      "explanation": "CSS Grid is for complex two-dimensional layouts; Flexbox handles one-dimensional layouts and alignment."
    },
    "93": {
      "question": "Besides flex-direction (row/col), justify-content, and align-items, what else can Flexbox do?",
      "options": [
        "It can wrap items, control their growth/shrink, and set spacing with gap",
        "It can create complex grids with named areas",
        "It can use Grid methods, like child element",
        "It can create unique animations with built-in libraries"
      ],
      "level": "<hard>hard</hard>",
      "correct": "It can wrap items, control their growth/shrink, and set spacing with gap",
      "explanation": "Flexbox can do much more than just row/column alignment. It supports wrapping items to new lines, controlling how items grow or shrink (flex-grow, flex-shrink, flex-basis), and applying spacing with the gap property."
    },
    "94": {
      "question": "What advanced layouts can CSS Grid achieve beyond just defining rows and columns?",
      "options": [
        "It can't do anything more then defining rows/columns.",
        "It can create additional Z line in row/column.",
        "Named grid areas, item spanning across multiple cells, and precise control with line numbers",
        "It only works for 2x2 layouts"
      ],
      "level": "<hard>hard</hard>",
      "correct": "Named grid areas, item spanning across multiple cells, and precise control with line numbers",
      "explanation": "CSS Grid lets you do more than just make rows and columns. You can give areas custom names (like 'header' or 'sidebar'), stretch one item across multiple rows or columns, and use numbered lines to place items exactly where you want."
    },
    "95": {
      "question": "How can we apply a styling rule to all elements globally in CSS?",
      "options": [
        "It's impossible to set global styles.",
        "Use :root selector only",
        "Use the universal selector: +",
        "Use the universal selector: *"
      ],
      "level": "<hard>hard</hard>",
      "correct": "Use the universal selector: *",
      "explanation": "The universal selector (*) applies styles to every element. It's often used for resets (e.g., setting margin: 0, padding: 0) or to give a global base style across the whole document."
    },
    "96": {
      "question": "What is the difference between visibility:hidden and display:none in CSS?",
      "options": [
        "Both keep element visible",
        "Both remove element from layout",
        "visibility:hidden hides but keeps space; display:none removes element from layout",
        "Only display:none works in flexbox"
      ],
      "level": "<hard>hard</hard>",
      "correct": "visibility:hidden hides but keeps space; display:none removes element from layout",
      "explanation": "`visibility:hidden` keeps the element in the layout but makes it invisible; `display:none` removes it completely."
    },
    "97": {
      "question": "How can you handle errors in async/await functions in JavaScript?",
      "options": [
        "Errors are automatically ignored",
        "Using only then/catch",
        "Using Do while loop.",
        "Using try...catch blocks"
      ],
      "level": "<hard>hard</hard>",
      "correct": "Using try...catch blocks",
      "explanation": "Async/await functions can throw errors; wrapping them in try/catch allows proper error handling."
    },
    "98": {
      "question": "What happens when you use delete on an array element in JavaScript?",
      "options": [
        "It resets the array to empty",
        "It removes the element and shifts the array",
        "It removes the value but leaves an empty hole",
        "It throws an error"
      ],
      "level": "<hard>hard</hard>",
      "correct": "It removes the value but leaves an empty hole",
      "explanation": "delete arr[index] leaves a hole (undefined at that spot), but the array length does not change. Use splice() to fully remove and shift elements."
    },
    "99": {
      "question": "What is the difference between GET and POST requests?",
      "options": [
        "GET retrieves data, POST sends data",
        "GET modifies data, POST retrieves",
        "GET and POST are identical",
        "GET sends data, POST retrieves data"
      ],
      "level": "<hard>hard</hard>",
      "correct": "GET retrieves data, POST sends data",
      "explanation": "GET requests retrieve data with query parameters; POST submits data in the request body and can change server state."
    },
    "100": {
      "question": "Why should you not compare objects with `==` or `===` in JavaScript?",
      "options": [
        "Because objects are reference types, only memory addresses are compared",
        "Because objects cannot be compared",
        "Because == is for strings only",
        "Because === is for numbers only"
      ],
      "level": "<hard>hard</hard>",
      "correct": "Because objects are reference types, only memory addresses are compared",
      "explanation": "Even objects with identical fields are different references, so equality checks return false."
    },
    "101": {
      "question": "Why do we use double curly braces `{{}}` in React (like `style={{}}`)?",
      "options": [
        "Because one pair is for JSX expression and the other is for the object",
        "Because React requires two levels of scoping",
        "Because it's a shortcut for JSON",
        "Because styles only work with two brackets"
      ],
      "level": "<medium>medium</medium>",
      "correct": "Because one pair is for JSX expression and the other is for the object",
      "explanation": "In React, `{}` enters JavaScript mode in JSX, and inside it we pass an object, so `{{}}` means an object wrapped in a JSX expression."
    },
    "102": {
      "question": "What is the difference between `<iframe>` and `<video>` in HTML?",
      "options": [
        "Both are used to embed videos",
        "iframe is only for images, video is for videos",
        "iframe works with external video files, <video> handles videos from a local file.",
        "iframe can autoplay but video cannot"
      ],
      "level": "<easy>easy</easy>",
      "correct": "iframe works with external video files, <video> handles videos from a local file.",
      "explanation": "`<iframe>` loads another webpage or external content, while `<video>` is specifically for embedding and controlling video files."
    },
    "103": {
      "question": "Can normal URLs be used inside an iframe's `src` attribute?",
      "options": [
        "No, iframe requires a local file only",
        "No, many sites block direct embedding and require special embed URLs",
        "Yes, any valid URL can be embedded in the iframe",
        "Yes, but only if it's a video file"
      ],
      "level": "<medium>medium</medium>",
      "correct": "No, many sites block direct embedding and require special embed URLs",
      "explanation": "While iframes technically accept any URL, most sites (like YouTube) block direct embedding using security headers. Instead, platforms provide special embed links (e.g. src='https://www.youtube.com/embed/{...}?start=0', YouTube's `/embed/` URL) that work inside iframes."
    },
    "104": {
      "question": "Is it acceptable to use someone else's video in your project?",
      "options": [
        "Only if you download and reupload the video",
        "Yes, all videos are free to use",
        "No, the use of videos is not acceptable",
        "Yes, but we must respect copyright rules."
      ],
      "level": "<hard>hard</hard>",
      "correct": "Yes, but we must respect copyright rules.",
      "explanation": "You must respect copyright. Some videos allow embedding or reuse, but many require permission or a proper license."
    },
    "105": {
      "question": "In modern React projects, why do we prefer using functional JSX-like components over using classes and inheritance?",
      "options": [
        "Hook functions are much easier to use when working with many files",
        "Classes are banned in React",
        "Classes don't support JSX like files",
        "Import/export only works with JSX formated functions"
      ],
      "level": "<medium>medium</medium>",
      "correct": "Hook functions are much easier to use when working with many files",
      "explanation": "Class components worked in older React, but functional components with hooks are cleaner, easier to maintain, and more reusable, which is why modern React favors them."
    },
    "106": {
      "question": "i18n helps support multiple languages in applications. Which of the following is another popular library that provides multi-language support?",
      "options": [
        "react-i18next",
        "moment.js",
        "redux",
        "framer-motion"
      ],
      "level": "<medium>medium</medium>",
      "correct": "react-i18next",
      "explanation": "react-i18next is a widely used library that integrates i18next for multi-language support in applications, similar to how i18n helps handle translations and language switching."
    },
    "107": {
      "question": "If you can manage localStorage effectively, does that mean you understand backend development?",
      "options": [
        "Yes, localStorage is a backend database",
        "No, localStorage is client-side only",
        "Yes, because it stores persistent data like a server",
        "No, backend is about design patterns, not storage"
      ],
      "level": "<medium>medium</medium>",
      "correct": "No, localStorage is client-side only",
      "explanation": "LocalStorage only saves data in the user's browser. Backend involves servers, databases, and APIs, which are separate from localStorage."
    },
    "108": {
      "question": "What's the main difference between GitHub and Vercel when you upload a project?",
      "options": [
        "GitHub hosts code repositories, while Vercel hosts live web applications",
        "GitHub automatically deploys your site in the browser, Vercel does not",
        "Vercel only stores code, GitHub runs the project",
        "GitHub can run backend servers, Vercel cannot"
      ],
      "level": "<medium>medium</medium>",
      "correct": "GitHub hosts code repositories, while Vercel hosts live web applications",
      "explanation": "GitHub is primarily for storing and sharing code. Vercel deploys your project so it can run in a browser with live URLs."
    },
    "109": {
      "question": "Can you pass a custom hook directly as the initial value to useState in React?",
      "options": [
        "Yes, you can pass any hook as the initial value",
        "No, useState cannot accept a custom hook",
        "Only if the custom hook returns a number or string",
        "Yes, but only for class components"
      ],
      "level": "<hard>hard</hard>",
      "correct": "No, useState cannot accept a custom hook",
      "explanation": "Hooks like useState can store a string,number, boolean, even a function, but it cannot take another custom hook as their initial value. Hooks must be called at the top level of a component or other hooks, not passed as a value."
    },
    "110": {
      "question": "What does the <svg> tag represent in HTML?",
      "options": [
        "A container for Scalable Vector Graphics",
        "A way to display bitmap images",
        "A special CSS styling block",
        "A JavaScript animation element"
      ],
      "level": "<medium>medium</medium>",
      "correct": "A container for Scalable Vector Graphics",
      "explanation": "The <svg> tag defines a container for SVG graphics, which are vector-based and can scale without losing quality."
    },
    "111": {
      "question": "In web programming, what are SVGs most commonly used for?",
      "options": [
        "For large background photos",
        "For logos, icons, and simple illustrations that need to scale",
        "For videos",
        "For font files"
      ],
      "level": "<medium>medium</medium>",
      "correct": "For logos, icons, and simple illustrations that need to scale",
      "explanation": "SVGs are vector graphics, meaning they can scale infinitely without losing quality. That’s why they’re ideal for logos, icons, and simple illustrations."
    },
    "112": {
      "question": "Can you create a unique icon using just an <svg> tag?",
      "options": [
        "Yes, by combining paths, shapes, and colors",
        "No, SVG can only display pre-made images",
        "Only if you convert it from PNG first",
        "No, SVG is only decorative"
      ],
      "level": "<medium>medium</medium>",
      "correct": "Yes, by combining paths, shapes, and colors",
      "explanation": "SVGs can be built from scratch using basic shapes, paths, and styling, allowing you to create completely unique icons without importing images."
    },
    "113": {
      "question": "How can you use an inline SVG in a React project?",
      "options": [
        "Directly as a JSX <svg> tag with paths/shapes",
        "Only as an <img> tag",
        "Only in external files",
        "SVGs cannot be used in React"
      ],
      "level": "<medium>medium</medium>",
      "correct": "Directly as a JSX <svg> tag with paths/shapes",
      "explanation": "In React, the most common way to use SVGs is inline in JSX with <svg> and <path>/<circle>/<rect> elements, allowing full styling and manipulation via props or CSS."
    },
    "114": {
      "question": "In which of these places are SVGs commonly used?",
      "options": [
        "Website logos, icons, illustrations, charts, and animations",
        "Full-length movies and Audio files",
        "it is not used in front-end",
        "Database storage"
      ],
      "level": "<medium>medium</medium>",
      "correct": "Website logos, icons, illustrations, charts, and animations",
      "explanation": "SVGs are widely used in web development for scalable visuals such as logos, icons, interactive charts, and even small animations."
    },
    "115": {
      "question": "You have a large list of 1000+ items in React. Rendering all at once causes performance issues. What is the best approach to optimize rendering?",
      "options": [
        "Render all items normally; React handles performance automatically",
        "Use pagination or virtualized lists like react-window or react-virtualized",
        "Wrap the list in a <div> with overflow hidden",
        "Use setTimeout to delay rendering of each item"
      ],
      "level": "<hard>hard</hard>",
      "correct": "Use pagination or virtualized lists like react-window or react-virtualized",
      "explanation": "Rendering thousands of items at once can freeze the UI. Using virtualized lists or pagination renders only visible items, improving performance dramatically in React applications."
    },
    "116": {
      "question": "In Tailwind, what's a ring?",
      "options": [
        "A border utility that controls border thickness",
        "A utility that adds an outline-like box shadow around an element",
        "A built-in gradient background style",
        "A padding utility for rounded corners"
      ],
      "level": "<hard>hard</hard>",
      "correct": "A utility that adds an outline-like box shadow around an element",
      "explanation": "Tailwind's `ring` creates an outline effect using box-shadow, not a border. It is rendered outside of borders, making it useful for focus states."
    },
    "117": {
      "question": "What's the difference between border and ring in Tailwind?",
      "options": [
        "Border is applied inside the element box, ring is rendered outside",
        "Border is always thicker than ring",
        "Ring replaces the border completely",
        "Border is applied outside the element box, ring is rendered inside"
      ],
      "level": "<hard>hard</hard>",
      "correct": "Border is applied inside the element box, ring is rendered outside",
      "explanation": "Borders take up space in the element box model, while rings are added using box-shadow, so they appear outside and don’t affect layout."
    },
    "118": {
      "question": "If we use both border and ring on the same element, which one is inner and which one is outer?",
      "options": [
        "Border is outside, ring is inside",
        "Ring is outside, border is inside",
        "They overlap randomly",
        "It depends on Tailwind's theme config"
      ],
      "level": "<hard>hard</hard>",
      "correct": "Ring is outside, border is inside",
      "explanation": "The border is drawn as part of the element’s box, while the ring is rendered as an outer outline via box-shadow, so the border is inner and the ring surrounds it."
    },
    "119": {
      "question": "How can you style a ring in Tailwind?",
      "options": [
        "By using utilities like ring-{color}, ring-{size}, and ring-offset",
        "Only by writing custom CSS",
        "By changing border utilities",
        "You cannot style rings in Tailwind"
      ],
      "level": "<hard>hard</hard>",
      "correct": "By using utilities like ring-{color}, ring-{size}, and ring-offset",
      "explanation": "Tailwind provides utilities like `ring-2`, `ring-blue-500`, and `ring-offset-2` for size, color, and spacing customization without custom CSS."
    },
    "120": {
      "question": "What will be the output of: console.log([] * {} + 12);",
      "options": [
        "12",
        "NaN12",
        "NaN",
        "undefined12"
      ],
      "level": "<hard>hard</hard>",
      "correct": "NaN",
      "explanation": "`[] * {}` tries to convert both operands to numbers. `[]` becomes 0, `{}` becomes NaN, so the multiplication is NaN. Adding 12 still results in NaN."
    },
    "121": {
      "question": "What will be the output of: console.log('12' + 12 + [12]);",
      "options": [
        "24",
        "'121212'",
        "'121212' (as string)",
        "'1212,12'"
      ],
      "level": "<hard>hard</hard>",
      "correct": "'121212'",
      "explanation": "'12' + 12 turns into string concatenation → '1212'. Then adding `[12]` calls `toString()` on the array, giving '12'. Final result is \"121212\"."
    },
    "122": {
      "question": "What will be the output of: console.log(true + [] + false);",
      "options": [
        "'1false'",
        "'truefalse'",
        "NaN",
        "'true0'"
      ],
      "level": "<hard>hard</hard>",
      "correct": "'1false'",
      "explanation": "true converts to 1, [] converts to '', 1 + '' → '1', then '1' + false → '1false'."
    },
    "123": {
      "question": "What will be logged by: console.log([1,2] == '1,2');",
      "options": [
        "true",
        "false",
        "TypeError",
        "undefined"
      ],
      "level": "<hard>hard</hard>",
      "correct": "true",
      "explanation": "The array [1,2] is converted to string '1,2', so '1,2' == '1,2' → true."
    },
    "124": {
      "question": "What will this output: console.log([] + false - null + true);",
      "options": [
        "NaN",
        "true",
        "false",
        "0"
      ],
      "level": "<hard>hard</hard>",
      "correct": "NaN",
      "explanation": "[] converts to '', so '' + false → 'false'. Then 'false' - null → NaN (string minus number). NaN + true → still NaN."
    },
    "125": {
      "question": "What will be the output: console.log(!+[] + !+[]);",
      "options": [
        "2",
        "true",
        "false",
        "1"
      ],
      "level": "<hard>hard</hard>",
      "correct": "2",
      "explanation": "+[] converts [] to 0, !0 → true, true + true → 1 + 1 → 2."
    },
    "126": {
      "question": "What will be the output of: console.log([] + {} * []);",
      "options": [
        "NaN",
        "'[object Object]'",
        "'[object Object]0'",
        "0"
      ],
      "level": "<hard>hard</hard>",
      "correct": "NaN",
      "explanation": "({} * []) → NaN because {} converts to NaN in numeric context, [] converts to 0. Then ([] + NaN) → '', ('' + NaN) → 'NaN'."
    },
    "127": {
      "question": "What will this output: console.log({} * 2 + []);",
      "options": [
        "NaN",
        "'NaN'",
        "0",
        "'0'"
      ],
      "level": "<hard>hard</hard>",
      "correct": "NaN",
      "explanation": "{} is converted to NaN in arithmetic context, so (NaN * 2) → NaN. Adding [] converts [] → '', but (NaN + '') → NaN."
    },
    "128": {
      "question": "What is the result of: console.log('5' - '2' * '2');",
      "options": [
        "1",
        "6",
        "NaN",
        "'1'"
      ],
      "level": "<hard>hard</hard>",
      "correct": "1",
      "explanation": "('2' * '2') → 4 (math converts strings to numbers). Then ('5' - 4) → 1. Subtraction converts strings to numbers automatically."
    },
    "129": {
      "question": "What will this log: console.log([3] % 2 + true);",
      "options": [
        "2",
        "1",
        "0",
        "NaN"
      ],
      "level": "<hard>hard</hard>",
      "correct": "2",
      "explanation": "([3] % 2) → 1 (array converts to number 3). Then (1 + true) → 1, (1 + 1) → 2."
    },
    "130": {
      "question": "What is the output of: console.log([] * 2 + false / []);",
      "options": [
        "NaN",
        "0",
        "'NaN'",
        "false"
      ],
      "level": "<hard>hard</hard>",
      "correct": "NaN",
      "explanation": "[] converts to 0 in arithmetic, so ([] * 2) → 0. Then false / [] → 0 / 0 → NaN. Finally, 0 + NaN → NaN."
    }
  },
  "lastSec": {
    "heading": "Behind The Project",
    "p1": "Learn more about the creator, the roadmap for the project, and explore interactive updates.",
    "creator": "Creator",
    "creator2": "Luka Kartvelishvili",
    "role": "Junior Front-end Developer",
    "age": "Age:",
    "box2": "Future Roadmap",
    "ul": {
      "li1": "User Account System",
      "li2": "More Quizzes (Back-end, Tailwind, TypeScript...)",
      "li3": "Difficulty & Ranking Levels",
      "li4": "Multiple Language Support",
      "li5": "Practical Coding Tests"
    },
    "box3": "help resources",
    "box3Nav": {
      "heropatterns": "HeroPatterns",
      "React icons": "React Icons",
      "getwaves.io": "GetWaves.io",
      "ChatGPT": "ChatGPT",
      "i18n": "i18n language picker"
    }
  },
  "about": {
    "header1": "What is CodeMeter?",
    "header2": "Why We Built This",
    "header3": "Our Vision",
    "purpose": "<highlight>CodeMeter</highlight> is a modern, interactive quiz platform built to help <highlight>junior developers</highlight> test their knowledge and strengthen their front-end development skills. Whether you're just getting started or already diving deep into React, CodeMeter will challenge you through carefully crafted quizzes on <normal>HTML, CSS, JavaScript, React</normal> — plus a unique <strong>Random Logic</strong> quiz designed to stretch your reasoning, pattern recognition, and understanding of tricky concepts.",
    "reason": "Learning to code isn't just about memorizing syntax — it's about thinking clearly, solving real-world problems, and building the confidence to debug and create independently. We built CodeMeter to make that journey engaging, challenging, and even a little addictive.",
    "vision": "Our mission is to become a go-to resource for developers who want to sharpen their thinking through meaningful, well-designed questions. We're here to help you prepare for job interviews, master programming fundamentals, and truly understand the logic that powers code — not just follow it."
  },
  "contacts": {
    "header": "Get in Touch",
    "subheader": "We'd love to hear from you! Reach out anytime.",
    "location": "Georgia, Kutaisi",
    "formHeader": "Prefer Writing Instead?",
    "formName": "Name",
    "formEmail": "Email",
    "formMessage": "Message",
    "submit": "Send Message"
  },
  "resources": {
    "res": "Resources",
    "recommended": "Recommended Resources",
    "p": "These resources will help deepen your frontend knowledge. They're: <highlight>trusted, high-quality</highlight>, and <highlight>frequently updated</highlight>.",
    "title1": "MDN Web Docs",
    "title2": "React Official Docs",
    "title3": "JavaScript Info",
    "title4": "Front-End Mentor",
    "title5": "CSS Tricks",
    "description1": "Comprehensive reference for HTML, CSS, and JavaScript.",
    "description2": "Learn how React works straight from the creators.",
    "description3": "Deep dive tutorials into JavaScript mechanics.",
    "description4": "Practice real-world frontend challenges and improve your skills.",
    "description5": "Useful tips, articles, and guides for CSS lovers."
  },
  "Rules": {
    "rules": "Rules",
    "heading": "Quiz Rules",
    "p": "Before you begin, please read the following <highlight>6 simple rules</highlight> to ensure a fair and <strong>smooth experience</strong>.",
    "rule1": "One Attempt Per Question",
    "rule2": "No Going Back",
    "rule3": "No Cheating",
    "rule4": "Be Honest",
    "rule5": "Use a Desktop or Tablet",
    "rule6": "Ready for",
    "desc1": "You can only select one answer per question. Choose wisely!",
    "desc2": "Once you've submitted an answer, you can't change it.",
    "desc3": "Please avoid looking up answers while taking the quiz. Trust your brain — your experience matters.",
    "desc4": "This platform is designed for self-improvement. This platform is built for self-growth. Be fair — be honest with yourself.",
    "desc5": "For the best experience, take the quiz on a larger screen.",
    "desc6": "After clicking start you'll get question, answers, and time which will fix how much time it took for you and final score which will show your mastery level",
    "start": "Start Quiz",
    "p2": "Breaking the rules won't crash your browser... but it might ruin the fun!"
  }
}